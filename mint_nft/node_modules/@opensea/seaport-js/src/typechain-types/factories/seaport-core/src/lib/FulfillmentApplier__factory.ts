/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  FulfillmentApplier,
  FulfillmentApplierInterface,
} from "../../../../seaport-core/src/lib/FulfillmentApplier";

const _abi = [
  {
    inputs: [],
    name: "InvalidFulfillmentComponentData",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "fulfillmentIndex",
        type: "uint256",
      },
    ],
    name: "MismatchedFulfillmentOfferAndConsiderationComponents",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "enum Side",
        name: "side",
        type: "uint8",
      },
    ],
    name: "MissingFulfillmentComponentOnAggregation",
    type: "error",
  },
  {
    inputs: [],
    name: "OfferAndConsiderationRequiredOnFulfillment",
    type: "error",
  },
] as const;

const _bytecode =
  "0x6080604052348015600f57600080fd5b50603f80601d6000396000f3fe6080604052600080fdfea26469706673582212208de25543bd51dd4847ac21f910db7aae240ae1f363687a700f6ef7be06dfbbd764736f6c63430008110033";

type FulfillmentApplierConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: FulfillmentApplierConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class FulfillmentApplier__factory extends ContractFactory {
  constructor(...args: FulfillmentApplierConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string }
  ): Promise<FulfillmentApplier> {
    return super.deploy(overrides || {}) as Promise<FulfillmentApplier>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): FulfillmentApplier {
    return super.attach(address) as FulfillmentApplier;
  }
  override connect(signer: Signer): FulfillmentApplier__factory {
    return super.connect(signer) as FulfillmentApplier__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): FulfillmentApplierInterface {
    return new utils.Interface(_abi) as FulfillmentApplierInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): FulfillmentApplier {
    return new Contract(address, _abi, signerOrProvider) as FulfillmentApplier;
  }
}
