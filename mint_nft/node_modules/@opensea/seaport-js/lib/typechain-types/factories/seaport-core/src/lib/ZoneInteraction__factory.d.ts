import { Signer, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { ZoneInteraction, ZoneInteractionInterface } from "../../../../seaport-core/src/lib/ZoneInteraction";
type ZoneInteractionConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
export declare class ZoneInteraction__factory extends ContractFactory {
    constructor(...args: ZoneInteractionConstructorParams);
    deploy(overrides?: Overrides & {
        from?: string;
    }): Promise<ZoneInteraction>;
    getDeployTransaction(overrides?: Overrides & {
        from?: string;
    }): TransactionRequest;
    attach(address: string): ZoneInteraction;
    connect(signer: Signer): ZoneInteraction__factory;
    static readonly bytecode = "0x6080604052348015600f57600080fd5b50603f80601d6000396000f3fe6080604052600080fdfea264697066735822122088c7d715d9ce154b1396936dd1730f836078f506be7ba4b0a145a84488d7e26564736f6c63430008110033";
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "orderHash";
            readonly type: "bytes32";
        }];
        readonly name: "InvalidContractOrder";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "orderHash";
            readonly type: "bytes32";
        }];
        readonly name: "InvalidRestrictedOrder";
        readonly type: "error";
    }];
    static createInterface(): ZoneInteractionInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): ZoneInteraction;
}
export {};
