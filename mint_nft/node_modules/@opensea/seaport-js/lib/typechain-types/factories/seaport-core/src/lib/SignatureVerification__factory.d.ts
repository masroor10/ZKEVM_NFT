import { Signer, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { SignatureVerification, SignatureVerificationInterface } from "../../../../seaport-core/src/lib/SignatureVerification";
type SignatureVerificationConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
export declare class SignatureVerification__factory extends ContractFactory {
    constructor(...args: SignatureVerificationConstructorParams);
    deploy(overrides?: Overrides & {
        from?: string;
    }): Promise<SignatureVerification>;
    getDeployTransaction(overrides?: Overrides & {
        from?: string;
    }): TransactionRequest;
    attach(address: string): SignatureVerification;
    connect(signer: Signer): SignatureVerification__factory;
    static readonly bytecode = "0x6080604052348015600f57600080fd5b50603f80601d6000396000f3fe6080604052600080fdfea264697066735822122086cb0b5747e6a2d022fe04dd907ac5b5a563d297155ece02581f7026371d3ad364736f6c63430008110033";
    static readonly abi: readonly [{
        readonly inputs: readonly [];
        readonly name: "BadContractSignature";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint8";
            readonly name: "v";
            readonly type: "uint8";
        }];
        readonly name: "BadSignatureV";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InvalidSignature";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InvalidSigner";
        readonly type: "error";
    }];
    static createInterface(): SignatureVerificationInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): SignatureVerification;
}
export {};
