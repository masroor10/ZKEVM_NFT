import { Signer, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { AmountDeriver, AmountDeriverInterface } from "../../../../seaport-core/src/lib/AmountDeriver";
type AmountDeriverConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
export declare class AmountDeriver__factory extends ContractFactory {
    constructor(...args: AmountDeriverConstructorParams);
    deploy(overrides?: Overrides & {
        from?: string;
    }): Promise<AmountDeriver>;
    getDeployTransaction(overrides?: Overrides & {
        from?: string;
    }): TransactionRequest;
    attach(address: string): AmountDeriver;
    connect(signer: Signer): AmountDeriver__factory;
    static readonly bytecode = "0x6080604052348015600f57600080fd5b50603f80601d6000396000f3fe6080604052600080fdfea2646970667358221220ff1f7fc7f59825e8cfae880e6b76756a33b588f7daa78087627017de75dc580064736f6c63430008110033";
    static readonly abi: readonly [{
        readonly inputs: readonly [];
        readonly name: "InexactFraction";
        readonly type: "error";
    }];
    static createInterface(): AmountDeriverInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): AmountDeriver;
}
export {};
