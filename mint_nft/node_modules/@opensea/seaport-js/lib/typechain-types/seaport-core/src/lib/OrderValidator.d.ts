import type { BaseContract, BigNumber, BigNumberish, BytesLike, Signer, utils } from "ethers";
import type { EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "../../../common";
export type SpentItemStruct = {
    itemType: BigNumberish;
    token: string;
    identifier: BigNumberish;
    amount: BigNumberish;
};
export type SpentItemStructOutput = [number, string, BigNumber, BigNumber] & {
    itemType: number;
    token: string;
    identifier: BigNumber;
    amount: BigNumber;
};
export type ReceivedItemStruct = {
    itemType: BigNumberish;
    token: string;
    identifier: BigNumberish;
    amount: BigNumberish;
    recipient: string;
};
export type ReceivedItemStructOutput = [
    number,
    string,
    BigNumber,
    BigNumber,
    string
] & {
    itemType: number;
    token: string;
    identifier: BigNumber;
    amount: BigNumber;
    recipient: string;
};
export type OfferItemStruct = {
    itemType: BigNumberish;
    token: string;
    identifierOrCriteria: BigNumberish;
    startAmount: BigNumberish;
    endAmount: BigNumberish;
};
export type OfferItemStructOutput = [
    number,
    string,
    BigNumber,
    BigNumber,
    BigNumber
] & {
    itemType: number;
    token: string;
    identifierOrCriteria: BigNumber;
    startAmount: BigNumber;
    endAmount: BigNumber;
};
export type ConsiderationItemStruct = {
    itemType: BigNumberish;
    token: string;
    identifierOrCriteria: BigNumberish;
    startAmount: BigNumberish;
    endAmount: BigNumberish;
    recipient: string;
};
export type ConsiderationItemStructOutput = [
    number,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    string
] & {
    itemType: number;
    token: string;
    identifierOrCriteria: BigNumber;
    startAmount: BigNumber;
    endAmount: BigNumber;
    recipient: string;
};
export type OrderParametersStruct = {
    offerer: string;
    zone: string;
    offer: OfferItemStruct[];
    consideration: ConsiderationItemStruct[];
    orderType: BigNumberish;
    startTime: BigNumberish;
    endTime: BigNumberish;
    zoneHash: BytesLike;
    salt: BigNumberish;
    conduitKey: BytesLike;
    totalOriginalConsiderationItems: BigNumberish;
};
export type OrderParametersStructOutput = [
    string,
    string,
    OfferItemStructOutput[],
    ConsiderationItemStructOutput[],
    number,
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    string,
    BigNumber
] & {
    offerer: string;
    zone: string;
    offer: OfferItemStructOutput[];
    consideration: ConsiderationItemStructOutput[];
    orderType: number;
    startTime: BigNumber;
    endTime: BigNumber;
    zoneHash: string;
    salt: BigNumber;
    conduitKey: string;
    totalOriginalConsiderationItems: BigNumber;
};
export interface OrderValidatorInterface extends utils.Interface {
    functions: {};
    events: {
        "CounterIncremented(uint256,address)": EventFragment;
        "OrderCancelled(bytes32,address,address)": EventFragment;
        "OrderFulfilled(bytes32,address,address,address,(uint8,address,uint256,uint256)[],(uint8,address,uint256,uint256,address)[])": EventFragment;
        "OrderValidated(bytes32,(address,address,(uint8,address,uint256,uint256,uint256)[],(uint8,address,uint256,uint256,uint256,address)[],uint8,uint256,uint256,bytes32,uint256,bytes32,uint256))": EventFragment;
        "OrdersMatched(bytes32[])": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "CounterIncremented"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "OrderCancelled"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "OrderFulfilled"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "OrderValidated"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "OrdersMatched"): EventFragment;
}
export interface CounterIncrementedEventObject {
    newCounter: BigNumber;
    offerer: string;
}
export type CounterIncrementedEvent = TypedEvent<[
    BigNumber,
    string
], CounterIncrementedEventObject>;
export type CounterIncrementedEventFilter = TypedEventFilter<CounterIncrementedEvent>;
export interface OrderCancelledEventObject {
    orderHash: string;
    offerer: string;
    zone: string;
}
export type OrderCancelledEvent = TypedEvent<[
    string,
    string,
    string
], OrderCancelledEventObject>;
export type OrderCancelledEventFilter = TypedEventFilter<OrderCancelledEvent>;
export interface OrderFulfilledEventObject {
    orderHash: string;
    offerer: string;
    zone: string;
    recipient: string;
    offer: SpentItemStructOutput[];
    consideration: ReceivedItemStructOutput[];
}
export type OrderFulfilledEvent = TypedEvent<[
    string,
    string,
    string,
    string,
    SpentItemStructOutput[],
    ReceivedItemStructOutput[]
], OrderFulfilledEventObject>;
export type OrderFulfilledEventFilter = TypedEventFilter<OrderFulfilledEvent>;
export interface OrderValidatedEventObject {
    orderHash: string;
    orderParameters: OrderParametersStructOutput;
}
export type OrderValidatedEvent = TypedEvent<[
    string,
    OrderParametersStructOutput
], OrderValidatedEventObject>;
export type OrderValidatedEventFilter = TypedEventFilter<OrderValidatedEvent>;
export interface OrdersMatchedEventObject {
    orderHashes: string[];
}
export type OrdersMatchedEvent = TypedEvent<[
    string[]
], OrdersMatchedEventObject>;
export type OrdersMatchedEventFilter = TypedEventFilter<OrdersMatchedEvent>;
export interface OrderValidator extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: OrderValidatorInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {};
    callStatic: {};
    filters: {
        "CounterIncremented(uint256,address)"(newCounter?: null, offerer?: string | null): CounterIncrementedEventFilter;
        CounterIncremented(newCounter?: null, offerer?: string | null): CounterIncrementedEventFilter;
        "OrderCancelled(bytes32,address,address)"(orderHash?: null, offerer?: string | null, zone?: string | null): OrderCancelledEventFilter;
        OrderCancelled(orderHash?: null, offerer?: string | null, zone?: string | null): OrderCancelledEventFilter;
        "OrderFulfilled(bytes32,address,address,address,(uint8,address,uint256,uint256)[],(uint8,address,uint256,uint256,address)[])"(orderHash?: null, offerer?: string | null, zone?: string | null, recipient?: null, offer?: null, consideration?: null): OrderFulfilledEventFilter;
        OrderFulfilled(orderHash?: null, offerer?: string | null, zone?: string | null, recipient?: null, offer?: null, consideration?: null): OrderFulfilledEventFilter;
        "OrderValidated(bytes32,(address,address,(uint8,address,uint256,uint256,uint256)[],(uint8,address,uint256,uint256,uint256,address)[],uint8,uint256,uint256,bytes32,uint256,bytes32,uint256))"(orderHash?: null, orderParameters?: null): OrderValidatedEventFilter;
        OrderValidated(orderHash?: null, orderParameters?: null): OrderValidatedEventFilter;
        "OrdersMatched(bytes32[])"(orderHashes?: null): OrdersMatchedEventFilter;
        OrdersMatched(orderHashes?: null): OrdersMatchedEventFilter;
    };
    estimateGas: {};
    populateTransaction: {};
}
