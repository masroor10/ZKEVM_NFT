import type { BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, ContractTransaction, Overrides, PopulatedTransaction, Signer, utils } from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "../../../../common";
export interface TestERC1271WalletInterface extends utils.Interface {
    functions: {
        "approveToken(address,address,uint256)": FunctionFragment;
        "isValidSignature(bytes32,bytes)": FunctionFragment;
        "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
        "orderSigner()": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "approveToken" | "isValidSignature" | "onERC721Received" | "orderSigner"): FunctionFragment;
    encodeFunctionData(functionFragment: "approveToken", values: [string, string, BigNumberish]): string;
    encodeFunctionData(functionFragment: "isValidSignature", values: [BytesLike, BytesLike]): string;
    encodeFunctionData(functionFragment: "onERC721Received", values: [string, string, BigNumberish, BytesLike]): string;
    encodeFunctionData(functionFragment: "orderSigner", values?: undefined): string;
    decodeFunctionResult(functionFragment: "approveToken", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isValidSignature", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "onERC721Received", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "orderSigner", data: BytesLike): Result;
    events: {};
}
export interface TestERC1271Wallet extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: TestERC1271WalletInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        approveToken(token: string, spender: string, amount: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        isValidSignature(hash: BytesLike, signature: BytesLike, overrides?: CallOverrides): Promise<[string]>;
        onERC721Received(operator: string, from: string, tokenId: BigNumberish, _data: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        orderSigner(overrides?: CallOverrides): Promise<[string]>;
    };
    approveToken(token: string, spender: string, amount: BigNumberish, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    isValidSignature(hash: BytesLike, signature: BytesLike, overrides?: CallOverrides): Promise<string>;
    onERC721Received(operator: string, from: string, tokenId: BigNumberish, _data: BytesLike, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    orderSigner(overrides?: CallOverrides): Promise<string>;
    callStatic: {
        approveToken(token: string, spender: string, amount: BigNumberish, overrides?: CallOverrides): Promise<void>;
        isValidSignature(hash: BytesLike, signature: BytesLike, overrides?: CallOverrides): Promise<string>;
        onERC721Received(operator: string, from: string, tokenId: BigNumberish, _data: BytesLike, overrides?: CallOverrides): Promise<string>;
        orderSigner(overrides?: CallOverrides): Promise<string>;
    };
    filters: {};
    estimateGas: {
        approveToken(token: string, spender: string, amount: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        isValidSignature(hash: BytesLike, signature: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
        onERC721Received(operator: string, from: string, tokenId: BigNumberish, _data: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        orderSigner(overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        approveToken(token: string, spender: string, amount: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        isValidSignature(hash: BytesLike, signature: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        onERC721Received(operator: string, from: string, tokenId: BigNumberish, _data: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        orderSigner(overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}
