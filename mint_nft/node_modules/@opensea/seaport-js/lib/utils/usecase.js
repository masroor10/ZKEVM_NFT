"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getTagFromDomain = exports.getTransactionMethods = exports.executeAllActions = void 0;
const utils_1 = require("ethers/lib/utils");
const executeAllActions = (actions) => __awaiter(void 0, void 0, void 0, function* () {
    for (let i = 0; i < actions.length - 1; i++) {
        const action = actions[i];
        if (action.type === "approval") {
            const tx = yield action.transactionMethods.transact();
            yield tx.wait();
        }
    }
    const finalAction = actions[actions.length - 1];
    switch (finalAction.type) {
        case "create":
            return finalAction.createOrder();
        case "createBulk":
            return finalAction.createBulkOrders();
        default:
            return finalAction.transactionMethods.transact();
    }
});
exports.executeAllActions = executeAllActions;
const instanceOfOverrides = (obj) => {
    const validKeys = [
        "gasLimit",
        "gasPrice",
        "maxFeePerGas",
        "maxPriorityFeePerGas",
        "nonce",
        "type",
        "accessList",
        "customData",
        "ccipReadEnabled",
        "value",
        "blockTag",
        "CallOverrides",
    ];
    return (obj === undefined ||
        Object.keys(obj).every((key) => validKeys.includes(key)));
};
const getTransactionMethods = (contract, method, args, domain) => {
    const lastArg = args[args.length - 1];
    let initialOverrides;
    if (instanceOfOverrides(lastArg)) {
        initialOverrides = lastArg;
        args.pop();
    }
    const buildTransaction = (overrides) => __awaiter(void 0, void 0, void 0, function* () {
        const mergedOverrides = Object.assign(Object.assign({}, initialOverrides), overrides);
        const populatedTransaction = yield contract.populateTransaction[method](...[...args, mergedOverrides]);
        if (domain) {
            const tag = (0, exports.getTagFromDomain)(domain);
            populatedTransaction.data = populatedTransaction.data + tag;
        }
        return populatedTransaction;
    });
    return {
        callStatic: (overrides) => {
            const mergedOverrides = Object.assign(Object.assign({}, initialOverrides), overrides);
            return contract.callStatic[method](...[...args, mergedOverrides]);
        },
        estimateGas: (overrides) => {
            const mergedOverrides = Object.assign(Object.assign({}, initialOverrides), overrides);
            return contract.estimateGas[method](...[...args, mergedOverrides]);
        },
        transact: (overrides) => __awaiter(void 0, void 0, void 0, function* () {
            const mergedOverrides = Object.assign(Object.assign({}, initialOverrides), overrides);
            const data = yield buildTransaction(mergedOverrides);
            return contract.signer.sendTransaction(data);
        }),
        buildTransaction,
    };
};
exports.getTransactionMethods = getTransactionMethods;
const getTagFromDomain = (domain) => {
    return (0, utils_1.keccak256)((0, utils_1.toUtf8Bytes)(domain)).slice(2, 10);
};
exports.getTagFromDomain = getTagFromDomain;
//# sourceMappingURL=usecase.js.map