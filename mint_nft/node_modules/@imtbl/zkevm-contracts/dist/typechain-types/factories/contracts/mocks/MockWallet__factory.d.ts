import { Signer, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type { MockWallet, MockWalletInterface } from "../../../contracts/mocks/MockWallet";
type MockWalletConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
export declare class MockWallet__factory extends ContractFactory {
    constructor(...args: MockWalletConstructorParams);
    deploy(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<MockWallet>;
    getDeployTransaction(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): TransactionRequest;
    attach(address: string): MockWallet;
    connect(signer: Signer): MockWallet__factory;
    static readonly bytecode = "0x608060405234801561001057600080fd5b50610152806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063b030667114610030575b600080fd5b61004361003e3660046100d1565b610045565b005b6040516323b872dd60e01b81526001600160a01b0384811660048301528381166024830152604482018390528516906323b872dd90606401600060405180830381600087803b15801561009757600080fd5b505af11580156100ab573d6000803e3d6000fd5b5050505050505050565b80356001600160a01b03811681146100cc57600080fd5b919050565b600080600080608085870312156100e757600080fd5b6100f0856100b5565b93506100fe602086016100b5565b925061010c604086016100b5565b939692955092936060013592505056fea2646970667358221220d50dea43255422ecc69c124b93a5ed3c5bf051a16c392468ed8465e4d7487e4864736f6c63430008110033";
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "token";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "from";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "tokenId";
            readonly type: "uint256";
        }];
        readonly name: "transferNFT";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }];
    static createInterface(): MockWalletInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): MockWallet;
}
export {};
