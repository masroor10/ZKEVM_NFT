import { Signer, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type { MockOnReceive, MockOnReceiveInterface } from "../../../contracts/mocks/MockOnReceive";
type MockOnReceiveConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
export declare class MockOnReceive__factory extends ContractFactory {
    constructor(...args: MockOnReceiveConstructorParams);
    deploy(_tokenAddress: PromiseOrValue<string>, _recipient: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<MockOnReceive>;
    getDeployTransaction(_tokenAddress: PromiseOrValue<string>, _recipient: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): TransactionRequest;
    attach(address: string): MockOnReceive;
    connect(signer: Signer): MockOnReceive__factory;
    static readonly bytecode = "0x608060405234801561001057600080fd5b506040516102c63803806102c683398101604081905261002f91610078565b600080546001600160a01b039384166001600160a01b031991821617909155600180549290931691161790556100b2565b6001600160a01b038116811461007557600080fd5b50565b6000806040838503121561008b57600080fd5b825161009681610060565b60208401519092506100a781610060565b809150509250929050565b610205806100c16000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063150b7a021461003b5780639d76ea581461006c575b600080fd5b61004e610049366004610134565b610097565b6040516001600160e01b031990911681526020015b60405180910390f35b60005461007f906001600160a01b031681565b6040516001600160a01b039091168152602001610063565b600080546001546040516323b872dd60e01b81523060048201526001600160a01b039182166024820152604481018790529116906323b872dd90606401600060405180830381600087803b1580156100ee57600080fd5b505af1158015610102573d6000803e3d6000fd5b50630a85bd0160e11b9998505050505050505050565b80356001600160a01b038116811461012f57600080fd5b919050565b60008060008060006080868803121561014c57600080fd5b61015586610118565b945061016360208701610118565b935060408601359250606086013567ffffffffffffffff8082111561018757600080fd5b818801915088601f83011261019b57600080fd5b8135818111156101aa57600080fd5b8960208285010111156101bc57600080fd5b969995985093965060200194939250505056fea264697066735822122044241c8228e4a77e77b4fce1f43830c01eb445415707561ce44fab0c3dbb553f64736f6c63430008110033";
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "contract IERC721";
            readonly name: "_tokenAddress";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_recipient";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "constructor";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "operator";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "from";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "tokenId";
            readonly type: "uint256";
        }, {
            readonly internalType: "bytes";
            readonly name: "data";
            readonly type: "bytes";
        }];
        readonly name: "onERC721Received";
        readonly outputs: readonly [{
            readonly internalType: "bytes4";
            readonly name: "";
            readonly type: "bytes4";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "tokenAddress";
        readonly outputs: readonly [{
            readonly internalType: "contract IERC721";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): MockOnReceiveInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): MockOnReceive;
}
export {};
