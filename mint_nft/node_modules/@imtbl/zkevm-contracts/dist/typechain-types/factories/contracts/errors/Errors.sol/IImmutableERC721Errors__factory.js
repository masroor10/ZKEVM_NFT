"use strict";
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
Object.defineProperty(exports, "__esModule", { value: true });
exports.IImmutableERC721Errors__factory = void 0;
const ethers_1 = require("ethers");
const _abi = [
    {
        inputs: [
            {
                internalType: "uint256",
                name: "tokenId",
                type: "uint256",
            },
        ],
        name: "IImmutableERC721IDAboveThreshold",
        type: "error",
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "tokenId",
                type: "uint256",
            },
            {
                internalType: "address",
                name: "currentOwner",
                type: "address",
            },
        ],
        name: "IImmutableERC721MismatchedTokenOwner",
        type: "error",
    },
    {
        inputs: [],
        name: "IImmutableERC721MismatchedTransferLengths",
        type: "error",
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "tokenId",
                type: "uint256",
            },
        ],
        name: "IImmutableERC721NotOwnerOrOperator",
        type: "error",
    },
    {
        inputs: [],
        name: "IImmutableERC721SendingToZerothAddress",
        type: "error",
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "tokenId",
                type: "uint256",
            },
        ],
        name: "IImmutableERC721TokenAlreadyBurned",
        type: "error",
    },
    {
        inputs: [],
        name: "InvalidSignature",
        type: "error",
    },
    {
        inputs: [],
        name: "PermitExpired",
        type: "error",
    },
    {
        inputs: [],
        name: "SignerCannotBeZerothAddress",
        type: "error",
    },
];
class IImmutableERC721Errors__factory {
    static createInterface() {
        return new ethers_1.utils.Interface(_abi);
    }
    static connect(address, signerOrProvider) {
        return new ethers_1.Contract(address, _abi, signerOrProvider);
    }
}
exports.IImmutableERC721Errors__factory = IImmutableERC721Errors__factory;
IImmutableERC721Errors__factory.abi = _abi;
