import { Signer, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type { MockFactory, MockFactoryInterface } from "../../../contracts/mocks/MockFactory";
type MockFactoryConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
export declare class MockFactory__factory extends ContractFactory {
    constructor(...args: MockFactoryConstructorParams);
    deploy(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<MockFactory>;
    getDeployTransaction(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): TransactionRequest;
    attach(address: string): MockFactory;
    connect(signer: Signer): MockFactory__factory;
    static readonly bytecode = "0x608060405234801561001057600080fd5b5061030c806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063481286e61461003b578063cdcb760a1461006a575b600080fd5b61004e6100493660046101e3565b61007f565b6040516001600160a01b03909116815260200160405180910390f35b61007d61007836600461021b565b610092565b005b600061008b83836100a3565b9392505050565b61009e600083836100b0565b505050565b600061008b8383306101b9565b6000834710156101075760405162461bcd60e51b815260206004820152601d60248201527f437265617465323a20696e73756666696369656e742062616c616e636500000060448201526064015b60405180910390fd5b81516000036101585760405162461bcd60e51b815260206004820181905260248201527f437265617465323a2062797465636f6465206c656e677468206973207a65726f60448201526064016100fe565b8282516020840186f590506001600160a01b03811661008b5760405162461bcd60e51b815260206004820152601960248201527f437265617465323a204661696c6564206f6e206465706c6f790000000000000060448201526064016100fe565b6000604051836040820152846020820152828152600b8101905060ff815360559020949350505050565b600080604083850312156101f657600080fd5b50508035926020909101359150565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561022e57600080fd5b82359150602083013567ffffffffffffffff8082111561024d57600080fd5b818501915085601f83011261026157600080fd5b81358181111561027357610273610205565b604051601f8201601f19908116603f0116810190838211818310171561029b5761029b610205565b816040528281528860208487010111156102b457600080fd5b826020860160208301376000602084830101528095505050505050925092905056fea2646970667358221220e3302dd4e7ddc0b094de5d617f3ddf95056a933ec1c04e1d3295c3c938cc1ef064736f6c63430008110033";
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "salt";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "codeHash";
            readonly type: "bytes32";
        }];
        readonly name: "computeAddress";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "salt";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes";
            readonly name: "code";
            readonly type: "bytes";
        }];
        readonly name: "deploy";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }];
    static createInterface(): MockFactoryInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): MockFactory;
}
export {};
