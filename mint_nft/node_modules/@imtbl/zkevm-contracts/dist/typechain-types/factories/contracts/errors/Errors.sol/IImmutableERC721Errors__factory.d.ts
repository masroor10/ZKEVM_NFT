import { Signer } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type { IImmutableERC721Errors, IImmutableERC721ErrorsInterface } from "../../../../contracts/errors/Errors.sol/IImmutableERC721Errors";
export declare class IImmutableERC721Errors__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "tokenId";
            readonly type: "uint256";
        }];
        readonly name: "IImmutableERC721IDAboveThreshold";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "tokenId";
            readonly type: "uint256";
        }, {
            readonly internalType: "address";
            readonly name: "currentOwner";
            readonly type: "address";
        }];
        readonly name: "IImmutableERC721MismatchedTokenOwner";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "IImmutableERC721MismatchedTransferLengths";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "tokenId";
            readonly type: "uint256";
        }];
        readonly name: "IImmutableERC721NotOwnerOrOperator";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "IImmutableERC721SendingToZerothAddress";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "tokenId";
            readonly type: "uint256";
        }];
        readonly name: "IImmutableERC721TokenAlreadyBurned";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InvalidSignature";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "PermitExpired";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "SignerCannotBeZerothAddress";
        readonly type: "error";
    }];
    static createInterface(): IImmutableERC721ErrorsInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): IImmutableERC721Errors;
}
