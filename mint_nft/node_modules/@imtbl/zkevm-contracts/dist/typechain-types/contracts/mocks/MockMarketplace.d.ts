import type { BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, ContractTransaction, Overrides, PayableOverrides, PopulatedTransaction, Signer, utils } from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from "../../common";
export interface MockMarketplaceInterface extends utils.Interface {
    functions: {
        "executeApproveForAll(address,bool)": FunctionFragment;
        "executeTransfer(address,uint256)": FunctionFragment;
        "executeTransferFrom(address,address,uint256)": FunctionFragment;
        "executeTransferRoyalties(address,address,uint256,uint256)": FunctionFragment;
        "royaltyAddress()": FunctionFragment;
        "tokenAddress()": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "executeApproveForAll" | "executeTransfer" | "executeTransferFrom" | "executeTransferRoyalties" | "royaltyAddress" | "tokenAddress"): FunctionFragment;
    encodeFunctionData(functionFragment: "executeApproveForAll", values: [PromiseOrValue<string>, PromiseOrValue<boolean>]): string;
    encodeFunctionData(functionFragment: "executeTransfer", values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "executeTransferFrom", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "executeTransferRoyalties", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "royaltyAddress", values?: undefined): string;
    encodeFunctionData(functionFragment: "tokenAddress", values?: undefined): string;
    decodeFunctionResult(functionFragment: "executeApproveForAll", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "executeTransfer", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "executeTransferFrom", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "executeTransferRoyalties", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "royaltyAddress", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "tokenAddress", data: BytesLike): Result;
    events: {};
}
export interface MockMarketplace extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: MockMarketplaceInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        executeApproveForAll(operator: PromiseOrValue<string>, approved: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        executeTransfer(recipient: PromiseOrValue<string>, _tokenId: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        executeTransferFrom(from: PromiseOrValue<string>, to: PromiseOrValue<string>, _tokenId: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        executeTransferRoyalties(from: PromiseOrValue<string>, recipient: PromiseOrValue<string>, _tokenId: PromiseOrValue<BigNumberish>, price: PromiseOrValue<BigNumberish>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        royaltyAddress(overrides?: CallOverrides): Promise<[string]>;
        tokenAddress(overrides?: CallOverrides): Promise<[string]>;
    };
    executeApproveForAll(operator: PromiseOrValue<string>, approved: PromiseOrValue<boolean>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    executeTransfer(recipient: PromiseOrValue<string>, _tokenId: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    executeTransferFrom(from: PromiseOrValue<string>, to: PromiseOrValue<string>, _tokenId: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    executeTransferRoyalties(from: PromiseOrValue<string>, recipient: PromiseOrValue<string>, _tokenId: PromiseOrValue<BigNumberish>, price: PromiseOrValue<BigNumberish>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    royaltyAddress(overrides?: CallOverrides): Promise<string>;
    tokenAddress(overrides?: CallOverrides): Promise<string>;
    callStatic: {
        executeApproveForAll(operator: PromiseOrValue<string>, approved: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<void>;
        executeTransfer(recipient: PromiseOrValue<string>, _tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        executeTransferFrom(from: PromiseOrValue<string>, to: PromiseOrValue<string>, _tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        executeTransferRoyalties(from: PromiseOrValue<string>, recipient: PromiseOrValue<string>, _tokenId: PromiseOrValue<BigNumberish>, price: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        royaltyAddress(overrides?: CallOverrides): Promise<string>;
        tokenAddress(overrides?: CallOverrides): Promise<string>;
    };
    filters: {};
    estimateGas: {
        executeApproveForAll(operator: PromiseOrValue<string>, approved: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        executeTransfer(recipient: PromiseOrValue<string>, _tokenId: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        executeTransferFrom(from: PromiseOrValue<string>, to: PromiseOrValue<string>, _tokenId: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        executeTransferRoyalties(from: PromiseOrValue<string>, recipient: PromiseOrValue<string>, _tokenId: PromiseOrValue<BigNumberish>, price: PromiseOrValue<BigNumberish>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        royaltyAddress(overrides?: CallOverrides): Promise<BigNumber>;
        tokenAddress(overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        executeApproveForAll(operator: PromiseOrValue<string>, approved: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        executeTransfer(recipient: PromiseOrValue<string>, _tokenId: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        executeTransferFrom(from: PromiseOrValue<string>, to: PromiseOrValue<string>, _tokenId: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        executeTransferRoyalties(from: PromiseOrValue<string>, recipient: PromiseOrValue<string>, _tokenId: PromiseOrValue<BigNumberish>, price: PromiseOrValue<BigNumberish>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        royaltyAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        tokenAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}
