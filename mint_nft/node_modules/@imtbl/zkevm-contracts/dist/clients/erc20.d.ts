import { Overrides } from "ethers";
import { Provider } from "@ethersproject/providers";
import { BigNumberish, BigNumber } from "@ethersproject/bignumber";
import { CallOverrides, PopulatedTransaction } from "@ethersproject/contracts";
import { PromiseOrValue } from "../typechain-types/common";
export declare class ERC20Client {
    private readonly contract;
    constructor(contractAddress: string);
    /**
     * @returns a promise that resolves with a BigNumber that represents the amount of tokens in existence
     */
    totalSupply(provider: Provider, overrides?: CallOverrides): Promise<BigNumber>;
    /**
     * @returns a promise that resolves with a BigNumber that represents the amount of tokens owned by account
     */
    balanceOf(provider: Provider, account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
    /**
     * @returns a promise that resolves with a BigNumber that represents the remaining number of tokens that spender will be allowed to spend on behalf of owner through transferFrom
     */
    allowance(provider: Provider, owner: PromiseOrValue<string>, spender: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
    /**
     * @returns a promise that resolves with a populated transaction
     */
    populateTransfer(to: PromiseOrValue<string>, amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<PopulatedTransaction>;
    /**
     * @returns a promise that resolves with a populated transaction
     */
    populateApprove(spender: PromiseOrValue<string>, amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<PopulatedTransaction>;
    /**
     * @returns a promise that resolves with a populated transaction
     */
    populateTransferFrom(from: PromiseOrValue<string>, to: PromiseOrValue<string>, amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<PopulatedTransaction>;
}
