/// <reference types="node" />
import { ExchangeContracts } from 'config';

declare type Bytes = ArrayLike<number>;
declare type BytesLike = Bytes | string;
interface Hexable {
    toHexString(): string;
}

declare type BigNumberish = BigNumber | Bytes | bigint | string | number;
declare class BigNumber implements Hexable {
    readonly _hex: string;
    readonly _isBigNumber: boolean;
    constructor(constructorGuard: any, hex: string);
    fromTwos(value: number): BigNumber;
    toTwos(value: number): BigNumber;
    abs(): BigNumber;
    add(other: BigNumberish): BigNumber;
    sub(other: BigNumberish): BigNumber;
    div(other: BigNumberish): BigNumber;
    mul(other: BigNumberish): BigNumber;
    mod(other: BigNumberish): BigNumber;
    pow(other: BigNumberish): BigNumber;
    and(other: BigNumberish): BigNumber;
    or(other: BigNumberish): BigNumber;
    xor(other: BigNumberish): BigNumber;
    mask(value: number): BigNumber;
    shl(value: number): BigNumber;
    shr(value: number): BigNumber;
    eq(other: BigNumberish): boolean;
    lt(other: BigNumberish): boolean;
    lte(other: BigNumberish): boolean;
    gt(other: BigNumberish): boolean;
    gte(other: BigNumberish): boolean;
    isNegative(): boolean;
    isZero(): boolean;
    toNumber(): number;
    toBigInt(): bigint;
    toString(): string;
    toHexString(): string;
    toJSON(key?: string): any;
    static from(value: any): BigNumber;
    static isBigNumber(value: any): value is BigNumber;
}

declare type Deferrable<T> = {
    [K in keyof T]: T[K] | Promise<T[K]>;
};
declare class Description<T = any> {
    constructor(info: {
        [K in keyof T]: T[K];
    });
}

declare type Network = {
    name: string;
    chainId: number;
    ensAddress?: string;
    _defaultProvider?: (providers: any, options?: any) => any;
};
declare type Networkish = Network | string | number;

declare type AccessList = Array<{
    address: string;
    storageKeys: Array<string>;
}>;
declare type AccessListish = AccessList | Array<[string, Array<string>]> | Record<string, Array<string>>;
interface Transaction {
    hash?: string;
    to?: string;
    from?: string;
    nonce: number;
    gasLimit: BigNumber;
    gasPrice?: BigNumber;
    data: string;
    value: BigNumber;
    chainId: number;
    r?: string;
    s?: string;
    v?: number;
    type?: number | null;
    accessList?: AccessList;
    maxPriorityFeePerGas?: BigNumber;
    maxFeePerGas?: BigNumber;
}

declare type ConnectionInfo = {
    url: string;
    headers?: {
        [key: string]: string | number;
    };
    user?: string;
    password?: string;
    allowInsecureAuthentication?: boolean;
    allowGzip?: boolean;
    throttleLimit?: number;
    throttleSlotInterval?: number;
    throttleCallback?: (attempt: number, url: string) => Promise<boolean>;
    skipFetchSetup?: boolean;
    fetchOptions?: Record<string, string>;
    errorPassThrough?: boolean;
    timeout?: number;
};
interface OnceBlockable {
    once(eventName: "block", handler: () => void): void;
}

declare type TransactionRequest = {
    to?: string;
    from?: string;
    nonce?: BigNumberish;
    gasLimit?: BigNumberish;
    gasPrice?: BigNumberish;
    data?: BytesLike;
    value?: BigNumberish;
    chainId?: number;
    type?: number;
    accessList?: AccessListish;
    maxPriorityFeePerGas?: BigNumberish;
    maxFeePerGas?: BigNumberish;
    customData?: Record<string, any>;
    ccipReadEnabled?: boolean;
};
interface TransactionResponse extends Transaction {
    hash: string;
    blockNumber?: number;
    blockHash?: string;
    timestamp?: number;
    confirmations: number;
    from: string;
    raw?: string;
    wait: (confirmations?: number) => Promise<TransactionReceipt>;
}
declare type BlockTag = string | number;
interface _Block {
    hash: string;
    parentHash: string;
    number: number;
    timestamp: number;
    nonce: string;
    difficulty: number;
    _difficulty: BigNumber;
    gasLimit: BigNumber;
    gasUsed: BigNumber;
    miner: string;
    extraData: string;
    baseFeePerGas?: null | BigNumber;
}
interface Block extends _Block {
    transactions: Array<string>;
}
interface BlockWithTransactions extends _Block {
    transactions: Array<TransactionResponse>;
}
interface Log {
    blockNumber: number;
    blockHash: string;
    transactionIndex: number;
    removed: boolean;
    address: string;
    data: string;
    topics: Array<string>;
    transactionHash: string;
    logIndex: number;
}
interface TransactionReceipt {
    to: string;
    from: string;
    contractAddress: string;
    transactionIndex: number;
    root?: string;
    gasUsed: BigNumber;
    logsBloom: string;
    blockHash: string;
    transactionHash: string;
    logs: Array<Log>;
    blockNumber: number;
    confirmations: number;
    cumulativeGasUsed: BigNumber;
    effectiveGasPrice: BigNumber;
    byzantium: boolean;
    type: number;
    status?: number;
}
interface FeeData$1 {
    lastBaseFeePerGas: null | BigNumber;
    maxFeePerGas: null | BigNumber;
    maxPriorityFeePerGas: null | BigNumber;
    gasPrice: null | BigNumber;
}
interface EventFilter {
    address?: string;
    topics?: Array<string | Array<string> | null>;
}
interface Filter extends EventFilter {
    fromBlock?: BlockTag;
    toBlock?: BlockTag;
}
interface FilterByBlockHash extends EventFilter {
    blockHash?: string;
}
declare abstract class ForkEvent extends Description {
    readonly expiry: number;
    readonly _isForkEvent?: boolean;
    static isForkEvent(value: any): value is ForkEvent;
}
declare type EventType = string | Array<string | Array<string>> | EventFilter | ForkEvent;
declare type Listener = (...args: Array<any>) => void;
declare abstract class Provider$1 implements OnceBlockable {
    abstract getNetwork(): Promise<Network>;
    abstract getBlockNumber(): Promise<number>;
    abstract getGasPrice(): Promise<BigNumber>;
    getFeeData(): Promise<FeeData$1>;
    abstract getBalance(addressOrName: string | Promise<string>, blockTag?: BlockTag | Promise<BlockTag>): Promise<BigNumber>;
    abstract getTransactionCount(addressOrName: string | Promise<string>, blockTag?: BlockTag | Promise<BlockTag>): Promise<number>;
    abstract getCode(addressOrName: string | Promise<string>, blockTag?: BlockTag | Promise<BlockTag>): Promise<string>;
    abstract getStorageAt(addressOrName: string | Promise<string>, position: BigNumberish | Promise<BigNumberish>, blockTag?: BlockTag | Promise<BlockTag>): Promise<string>;
    abstract sendTransaction(signedTransaction: string | Promise<string>): Promise<TransactionResponse>;
    abstract call(transaction: Deferrable<TransactionRequest>, blockTag?: BlockTag | Promise<BlockTag>): Promise<string>;
    abstract estimateGas(transaction: Deferrable<TransactionRequest>): Promise<BigNumber>;
    abstract getBlock(blockHashOrBlockTag: BlockTag | string | Promise<BlockTag | string>): Promise<Block>;
    abstract getBlockWithTransactions(blockHashOrBlockTag: BlockTag | string | Promise<BlockTag | string>): Promise<BlockWithTransactions>;
    abstract getTransaction(transactionHash: string): Promise<TransactionResponse>;
    abstract getTransactionReceipt(transactionHash: string): Promise<TransactionReceipt>;
    abstract getLogs(filter: Filter): Promise<Array<Log>>;
    abstract resolveName(name: string | Promise<string>): Promise<null | string>;
    abstract lookupAddress(address: string | Promise<string>): Promise<null | string>;
    abstract on(eventName: EventType, listener: Listener): Provider$1;
    abstract once(eventName: EventType, listener: Listener): Provider$1;
    abstract emit(eventName: EventType, ...args: Array<any>): boolean;
    abstract listenerCount(eventName?: EventType): number;
    abstract listeners(eventName?: EventType): Array<Listener>;
    abstract off(eventName: EventType, listener?: Listener): Provider$1;
    abstract removeAllListeners(eventName?: EventType): Provider$1;
    addListener(eventName: EventType, listener: Listener): Provider$1;
    removeListener(eventName: EventType, listener: Listener): Provider$1;
    abstract waitForTransaction(transactionHash: string, confirmations?: number, timeout?: number): Promise<TransactionReceipt>;
    readonly _isProvider: boolean;
    constructor();
    static isProvider(value: any): value is Provider$1;
}

interface TypedDataDomain {
    name?: string;
    version?: string;
    chainId?: BigNumberish;
    verifyingContract?: string;
    salt?: BytesLike;
}
interface TypedDataField {
    name: string;
    type: string;
}
interface TypedDataSigner {
    _signTypedData(domain: TypedDataDomain, types: Record<string, Array<TypedDataField>>, value: Record<string, any>): Promise<string>;
}
declare abstract class Signer {
    readonly provider?: Provider$1;
    abstract getAddress(): Promise<string>;
    abstract signMessage(message: Bytes | string): Promise<string>;
    abstract signTransaction(transaction: Deferrable<TransactionRequest>): Promise<string>;
    abstract connect(provider: Provider$1): Signer;
    readonly _isSigner: boolean;
    constructor();
    getBalance(blockTag?: BlockTag): Promise<BigNumber>;
    getTransactionCount(blockTag?: BlockTag): Promise<number>;
    estimateGas(transaction: Deferrable<TransactionRequest>): Promise<BigNumber>;
    call(transaction: Deferrable<TransactionRequest>, blockTag?: BlockTag): Promise<string>;
    sendTransaction(transaction: Deferrable<TransactionRequest>): Promise<TransactionResponse>;
    getChainId(): Promise<number>;
    getGasPrice(): Promise<BigNumber>;
    getFeeData(): Promise<FeeData$1>;
    resolveName(name: string): Promise<string>;
    checkTransaction(transaction: Deferrable<TransactionRequest>): Deferrable<TransactionRequest>;
    populateTransaction(transaction: Deferrable<TransactionRequest>): Promise<TransactionRequest>;
    _checkProvider(operation?: string): void;
    static isSigner(value: any): value is Signer;
}

declare type FormatFunc = (value: any) => any;
declare type FormatFuncs = {
    [key: string]: FormatFunc;
};
declare type Formats = {
    transaction: FormatFuncs;
    transactionRequest: FormatFuncs;
    receipt: FormatFuncs;
    receiptLog: FormatFuncs;
    block: FormatFuncs;
    blockWithTransactions: FormatFuncs;
    filter: FormatFuncs;
    filterLog: FormatFuncs;
};
declare class Formatter {
    readonly formats: Formats;
    constructor();
    getDefaultFormats(): Formats;
    accessList(accessList: Array<any>): AccessList;
    number(number: any): number;
    type(number: any): number;
    bigNumber(value: any): BigNumber;
    boolean(value: any): boolean;
    hex(value: any, strict?: boolean): string;
    data(value: any, strict?: boolean): string;
    address(value: any): string;
    callAddress(value: any): string;
    contractAddress(value: any): string;
    blockTag(blockTag: any): string;
    hash(value: any, strict?: boolean): string;
    difficulty(value: any): number;
    uint256(value: any): string;
    _block(value: any, format: any): Block;
    block(value: any): Block;
    blockWithTransactions(value: any): Block;
    transactionRequest(value: any): any;
    transactionResponse(transaction: any): TransactionResponse;
    transaction(value: any): any;
    receiptLog(value: any): any;
    receipt(value: any): TransactionReceipt;
    topics(value: any): any;
    filter(value: any): any;
    filterLog(value: any): any;
    static check(format: {
        [name: string]: FormatFunc;
    }, object: any): any;
    static allowNull(format: FormatFunc, nullValue?: any): FormatFunc;
    static allowFalsish(format: FormatFunc, replaceValue: any): FormatFunc;
    static arrayOf(format: FormatFunc): FormatFunc;
}

declare class Event {
    readonly listener: Listener;
    readonly once: boolean;
    readonly tag: string;
    _lastBlockNumber: number;
    _inflight: boolean;
    constructor(tag: string, listener: Listener, once: boolean);
    get event(): EventType;
    get type(): string;
    get hash(): string;
    get filter(): Filter;
    pollable(): boolean;
}
interface EnsResolver {
    readonly name: string;
    readonly address: string;
    getAddress(coinType?: 60): Promise<null | string>;
    getContentHash(): Promise<null | string>;
    getText(key: string): Promise<null | string>;
}
interface EnsProvider {
    resolveName(name: string): Promise<null | string>;
    lookupAddress(address: string): Promise<null | string>;
    getResolver(name: string): Promise<null | EnsResolver>;
}
interface Avatar {
    url: string;
    linkage: Array<{
        type: string;
        content: string;
    }>;
}
declare class Resolver implements EnsResolver {
    readonly provider: BaseProvider;
    readonly name: string;
    readonly address: string;
    readonly _resolvedAddress: null | string;
    _supportsEip2544: null | Promise<boolean>;
    constructor(provider: BaseProvider, address: string, name: string, resolvedAddress?: string);
    supportsWildcard(): Promise<boolean>;
    _fetch(selector: string, parameters?: string): Promise<null | string>;
    _fetchBytes(selector: string, parameters?: string): Promise<null | string>;
    _getAddress(coinType: number, hexBytes: string): string;
    getAddress(coinType?: number): Promise<string>;
    getAvatar(): Promise<null | Avatar>;
    getContentHash(): Promise<string>;
    getText(key: string): Promise<string>;
}
declare class BaseProvider extends Provider$1 implements EnsProvider {
    _networkPromise: Promise<Network>;
    _network: Network;
    _events: Array<Event>;
    formatter: Formatter;
    _emitted: {
        [eventName: string]: number | "pending";
    };
    _pollingInterval: number;
    _poller: NodeJS.Timer;
    _bootstrapPoll: NodeJS.Timer;
    _lastBlockNumber: number;
    _maxFilterBlockRange: number;
    _fastBlockNumber: number;
    _fastBlockNumberPromise: Promise<number>;
    _fastQueryDate: number;
    _maxInternalBlockNumber: number;
    _internalBlockNumber: Promise<{
        blockNumber: number;
        reqTime: number;
        respTime: number;
    }>;
    readonly anyNetwork: boolean;
    disableCcipRead: boolean;
    /**
     *  ready
     *
     *  A Promise<Network> that resolves only once the provider is ready.
     *
     *  Sub-classes that call the super with a network without a chainId
     *  MUST set this. Standard named networks have a known chainId.
     *
     */
    constructor(network: Networkish | Promise<Network>);
    _ready(): Promise<Network>;
    get ready(): Promise<Network>;
    static getFormatter(): Formatter;
    static getNetwork(network: Networkish): Network;
    ccipReadFetch(tx: Transaction, calldata: string, urls: Array<string>): Promise<null | string>;
    _getInternalBlockNumber(maxAge: number): Promise<number>;
    poll(): Promise<void>;
    resetEventsBlock(blockNumber: number): void;
    get network(): Network;
    detectNetwork(): Promise<Network>;
    getNetwork(): Promise<Network>;
    get blockNumber(): number;
    get polling(): boolean;
    set polling(value: boolean);
    get pollingInterval(): number;
    set pollingInterval(value: number);
    _getFastBlockNumber(): Promise<number>;
    _setFastBlockNumber(blockNumber: number): void;
    waitForTransaction(transactionHash: string, confirmations?: number, timeout?: number): Promise<TransactionReceipt>;
    _waitForTransaction(transactionHash: string, confirmations: number, timeout: number, replaceable: {
        data: string;
        from: string;
        nonce: number;
        to: string;
        value: BigNumber;
        startBlock: number;
    }): Promise<TransactionReceipt>;
    getBlockNumber(): Promise<number>;
    getGasPrice(): Promise<BigNumber>;
    getBalance(addressOrName: string | Promise<string>, blockTag?: BlockTag | Promise<BlockTag>): Promise<BigNumber>;
    getTransactionCount(addressOrName: string | Promise<string>, blockTag?: BlockTag | Promise<BlockTag>): Promise<number>;
    getCode(addressOrName: string | Promise<string>, blockTag?: BlockTag | Promise<BlockTag>): Promise<string>;
    getStorageAt(addressOrName: string | Promise<string>, position: BigNumberish | Promise<BigNumberish>, blockTag?: BlockTag | Promise<BlockTag>): Promise<string>;
    _wrapTransaction(tx: Transaction, hash?: string, startBlock?: number): TransactionResponse;
    sendTransaction(signedTransaction: string | Promise<string>): Promise<TransactionResponse>;
    _getTransactionRequest(transaction: Deferrable<TransactionRequest>): Promise<Transaction>;
    _getFilter(filter: Filter | FilterByBlockHash | Promise<Filter | FilterByBlockHash>): Promise<Filter | FilterByBlockHash>;
    _call(transaction: TransactionRequest, blockTag: BlockTag, attempt: number): Promise<string>;
    call(transaction: Deferrable<TransactionRequest>, blockTag?: BlockTag | Promise<BlockTag>): Promise<string>;
    estimateGas(transaction: Deferrable<TransactionRequest>): Promise<BigNumber>;
    _getAddress(addressOrName: string | Promise<string>): Promise<string>;
    _getBlock(blockHashOrBlockTag: BlockTag | string | Promise<BlockTag | string>, includeTransactions?: boolean): Promise<Block | BlockWithTransactions>;
    getBlock(blockHashOrBlockTag: BlockTag | string | Promise<BlockTag | string>): Promise<Block>;
    getBlockWithTransactions(blockHashOrBlockTag: BlockTag | string | Promise<BlockTag | string>): Promise<BlockWithTransactions>;
    getTransaction(transactionHash: string | Promise<string>): Promise<TransactionResponse>;
    getTransactionReceipt(transactionHash: string | Promise<string>): Promise<TransactionReceipt>;
    getLogs(filter: Filter | FilterByBlockHash | Promise<Filter | FilterByBlockHash>): Promise<Array<Log>>;
    getEtherPrice(): Promise<number>;
    _getBlockTag(blockTag: BlockTag | Promise<BlockTag>): Promise<BlockTag>;
    getResolver(name: string): Promise<null | Resolver>;
    _getResolver(name: string, operation?: string): Promise<string>;
    resolveName(name: string | Promise<string>): Promise<null | string>;
    lookupAddress(address: string | Promise<string>): Promise<null | string>;
    getAvatar(nameOrAddress: string): Promise<null | string>;
    perform(method: string, params: any): Promise<any>;
    _startEvent(event: Event): void;
    _stopEvent(event: Event): void;
    _addEventListener(eventName: EventType, listener: Listener, once: boolean): this;
    on(eventName: EventType, listener: Listener): this;
    once(eventName: EventType, listener: Listener): this;
    emit(eventName: EventType, ...args: Array<any>): boolean;
    listenerCount(eventName?: EventType): number;
    listeners(eventName?: EventType): Array<Listener>;
    off(eventName: EventType, listener?: Listener): this;
    removeAllListeners(eventName?: EventType): this;
}

declare class JsonRpcSigner extends Signer implements TypedDataSigner {
    readonly provider: JsonRpcProvider;
    _index: number;
    _address: string;
    constructor(constructorGuard: any, provider: JsonRpcProvider, addressOrIndex?: string | number);
    connect(provider: Provider$1): JsonRpcSigner;
    connectUnchecked(): JsonRpcSigner;
    getAddress(): Promise<string>;
    sendUncheckedTransaction(transaction: Deferrable<TransactionRequest>): Promise<string>;
    signTransaction(transaction: Deferrable<TransactionRequest>): Promise<string>;
    sendTransaction(transaction: Deferrable<TransactionRequest>): Promise<TransactionResponse>;
    signMessage(message: Bytes | string): Promise<string>;
    _legacySignMessage(message: Bytes | string): Promise<string>;
    _signTypedData(domain: TypedDataDomain, types: Record<string, Array<TypedDataField>>, value: Record<string, any>): Promise<string>;
    unlock(password: string): Promise<boolean>;
}
declare class UncheckedJsonRpcSigner extends JsonRpcSigner {
    sendTransaction(transaction: Deferrable<TransactionRequest>): Promise<TransactionResponse>;
}
declare class JsonRpcProvider extends BaseProvider {
    readonly connection: ConnectionInfo;
    _pendingFilter: Promise<number>;
    _nextId: number;
    _eventLoopCache: Record<string, Promise<any>>;
    get _cache(): Record<string, Promise<any>>;
    constructor(url?: ConnectionInfo | string, network?: Networkish);
    static defaultUrl(): string;
    detectNetwork(): Promise<Network>;
    _uncachedDetectNetwork(): Promise<Network>;
    getSigner(addressOrIndex?: string | number): JsonRpcSigner;
    getUncheckedSigner(addressOrIndex?: string | number): UncheckedJsonRpcSigner;
    listAccounts(): Promise<Array<string>>;
    send(method: string, params: Array<any>): Promise<any>;
    prepareRequest(method: string, params: any): [string, Array<any>];
    perform(method: string, params: any): Promise<any>;
    _startEvent(event: Event): void;
    _startPending(): void;
    _stopEvent(event: Event): void;
    static hexlifyTransaction(transaction: TransactionRequest, allowExtra?: {
        [key: string]: boolean;
    }): {
        [key: string]: string | AccessList;
    };
}

declare type ExternalProvider = {
    isMetaMask?: boolean;
    isStatus?: boolean;
    host?: string;
    path?: string;
    sendAsync?: (request: {
        method: string;
        params?: Array<any>;
    }, callback: (error: any, response: any) => void) => void;
    send?: (request: {
        method: string;
        params?: Array<any>;
    }, callback: (error: any, response: any) => void) => void;
    request?: (request: {
        method: string;
        params?: Array<any>;
    }) => Promise<any>;
};
declare type JsonRpcFetchFunc = (method: string, params?: Array<any>) => Promise<any>;
declare class Web3Provider extends JsonRpcProvider {
    readonly provider: ExternalProvider;
    readonly jsonRpcFetchFunc: JsonRpcFetchFunc;
    constructor(provider: ExternalProvider | JsonRpcFetchFunc, network?: Networkish);
    send(method: string, params: Array<any>): Promise<any>;
}

declare enum Environment {
    PRODUCTION = "production",
    SANDBOX = "sandbox"
}
declare class ImmutableConfiguration {
    readonly environment: Environment;
    readonly apiKey?: string;
    constructor(options: {
        environment: Environment;
        apiKey?: string;
    });
}
interface ModuleConfiguration<T> {
    baseConfig: ImmutableConfiguration;
    overrides?: T;
}

/**
 * Interface representing a token
 * @property {number} chainId - The chain ID
 * @property {string} address - The token address
 * @property {number} decimals - The token decimals
 * @property {string | undefined} symbol - The token symbol or undefined if it is not available
 * @property {string | undefined} name - The token name or undefined if it is not available
 */
type TokenInfo$1 = {
    chainId: number;
    address: string;
    decimals: number;
    symbol?: string;
    name?: string;
};
interface ExchangeOverrides {
    rpcURL: string;
    exchangeContracts: ExchangeContracts;
    commonRoutingTokens: TokenInfo$1[];
    nativeToken: TokenInfo$1;
}

/**
 * @typedef {string} Address - Represents an Ethereum address.
 */
type Address = string;
/**
 * @typedef {Address | 'NATIVE'} FungibleToken - Represents a fungible token, either an ERC20 token address or the native token.
 */
type FungibleToken = Address | 'NATIVE';

// TypeScript Version: 3.0

type AxiosRequestHeaders = Record<string, string | number | boolean>;

type AxiosResponseHeaders = Record<string, string> & {
  "set-cookie"?: string[]
};

interface AxiosRequestTransformer {
  (data: any, headers?: AxiosRequestHeaders): any;
}

interface AxiosResponseTransformer {
  (data: any, headers?: AxiosResponseHeaders): any;
}

interface AxiosAdapter {
  (config: AxiosRequestConfig): AxiosPromise;
}

interface AxiosBasicCredentials {
  username: string;
  password: string;
}

interface AxiosProxyConfig {
  host: string;
  port: number;
  auth?: {
    username: string;
    password: string;
  };
  protocol?: string;
}

type Method =
  | 'get' | 'GET'
  | 'delete' | 'DELETE'
  | 'head' | 'HEAD'
  | 'options' | 'OPTIONS'
  | 'post' | 'POST'
  | 'put' | 'PUT'
  | 'patch' | 'PATCH'
  | 'purge' | 'PURGE'
  | 'link' | 'LINK'
  | 'unlink' | 'UNLINK';

type ResponseType =
  | 'arraybuffer'
  | 'blob'
  | 'document'
  | 'json'
  | 'text'
  | 'stream';

  type responseEncoding =
  | 'ascii' | 'ASCII'
  | 'ansi' | 'ANSI'
  | 'binary' | 'BINARY'
  | 'base64' | 'BASE64'
  | 'base64url' | 'BASE64URL'
  | 'hex' | 'HEX'
  | 'latin1' | 'LATIN1'
  | 'ucs-2' | 'UCS-2'
  | 'ucs2' | 'UCS2'
  | 'utf-8' | 'UTF-8'
  | 'utf8' | 'UTF8'
  | 'utf16le' | 'UTF16LE';

interface TransitionalOptions {
  silentJSONParsing?: boolean;
  forcedJSONParsing?: boolean;
  clarifyTimeoutError?: boolean;
}

interface AxiosRequestConfig<D = any> {
  url?: string;
  method?: Method;
  baseURL?: string;
  transformRequest?: AxiosRequestTransformer | AxiosRequestTransformer[];
  transformResponse?: AxiosResponseTransformer | AxiosResponseTransformer[];
  headers?: AxiosRequestHeaders;
  params?: any;
  paramsSerializer?: (params: any) => string;
  data?: D;
  timeout?: number;
  timeoutErrorMessage?: string;
  withCredentials?: boolean;
  adapter?: AxiosAdapter;
  auth?: AxiosBasicCredentials;
  responseType?: ResponseType;
  responseEncoding?: responseEncoding | string;
  xsrfCookieName?: string;
  xsrfHeaderName?: string;
  onUploadProgress?: (progressEvent: any) => void;
  onDownloadProgress?: (progressEvent: any) => void;
  maxContentLength?: number;
  validateStatus?: ((status: number) => boolean) | null;
  maxBodyLength?: number;
  maxRedirects?: number;
  socketPath?: string | null;
  httpAgent?: any;
  httpsAgent?: any;
  proxy?: AxiosProxyConfig | false;
  cancelToken?: CancelToken;
  decompress?: boolean;
  transitional?: TransitionalOptions;
  signal?: AbortSignal;
  insecureHTTPParser?: boolean;
}

interface HeadersDefaults {
  common: AxiosRequestHeaders;
  delete: AxiosRequestHeaders;
  get: AxiosRequestHeaders;
  head: AxiosRequestHeaders;
  post: AxiosRequestHeaders;
  put: AxiosRequestHeaders;
  patch: AxiosRequestHeaders;
  options?: AxiosRequestHeaders;
  purge?: AxiosRequestHeaders;
  link?: AxiosRequestHeaders;
  unlink?: AxiosRequestHeaders;
}

interface AxiosDefaults<D = any> extends Omit<AxiosRequestConfig<D>, 'headers'> {
  headers: HeadersDefaults;
}

interface AxiosResponse<T = any, D = any>  {
  data: T;
  status: number;
  statusText: string;
  headers: AxiosResponseHeaders;
  config: AxiosRequestConfig<D>;
  request?: any;
}

interface AxiosPromise<T = any> extends Promise<AxiosResponse<T>> {
}

interface Cancel {
  message: string | undefined;
}

interface CancelToken {
  promise: Promise<Cancel>;
  reason?: Cancel;
  throwIfRequested(): void;
}

interface AxiosInterceptorManager<V> {
  use<T = V>(onFulfilled?: (value: V) => T | Promise<T>, onRejected?: (error: any) => any): number;
  eject(id: number): void;
}

declare class Axios {
  constructor(config?: AxiosRequestConfig);
  defaults: AxiosDefaults;
  interceptors: {
    request: AxiosInterceptorManager<AxiosRequestConfig>;
    response: AxiosInterceptorManager<AxiosResponse>;
  };
  getUri(config?: AxiosRequestConfig): string;
  request<T = any, R = AxiosResponse<T>, D = any>(config: AxiosRequestConfig<D>): Promise<R>;
  get<T = any, R = AxiosResponse<T>, D = any>(url: string, config?: AxiosRequestConfig<D>): Promise<R>;
  delete<T = any, R = AxiosResponse<T>, D = any>(url: string, config?: AxiosRequestConfig<D>): Promise<R>;
  head<T = any, R = AxiosResponse<T>, D = any>(url: string, config?: AxiosRequestConfig<D>): Promise<R>;
  options<T = any, R = AxiosResponse<T>, D = any>(url: string, config?: AxiosRequestConfig<D>): Promise<R>;
  post<T = any, R = AxiosResponse<T>, D = any>(url: string, data?: D, config?: AxiosRequestConfig<D>): Promise<R>;
  put<T = any, R = AxiosResponse<T>, D = any>(url: string, data?: D, config?: AxiosRequestConfig<D>): Promise<R>;
  patch<T = any, R = AxiosResponse<T>, D = any>(url: string, data?: D, config?: AxiosRequestConfig<D>): Promise<R>;
}

interface AxiosInstance extends Axios {
  (config: AxiosRequestConfig): AxiosPromise;
  (url: string, config?: AxiosRequestConfig): AxiosPromise;
}

/**
 * An abstraction of a Stark account, which can be used to sign messages and transactions on StarkEx to execute state changing operations
 */
interface StarkSigner {
    /**
     * Signs the prefixed-message
     * @params message - this must be a UTF8-message
     * @example "0x1234"
     * @returns the signed prefixed-message
     */
    signMessage(message: string): Promise<string>;
    /**
     * Get the Signer address
     * @returns the Signer's checksum address
     */
    getAddress(): string | Promise<string>;
}
/**
 * A pair of Signers
 */
interface WalletConnection {
    /**
     * The L1 signer
     */
    ethSigner: Signer;
    /**
     * The L2 signer
     */
    starkSigner: StarkSigner;
}

/**
 * An ERC20 token
 */
interface ERC20Token {
    type: 'ERC20';
    tokenAddress: string;
}
/**
 * An ERC721 token
 */
interface ERC721Token {
    type: 'ERC721';
    tokenId: string;
    tokenAddress: string;
}
/**
 * An ETH token
 */
interface ETHToken {
    type: 'ETH';
}
/**
 * An amount of ETH token of unit Wei
 */
interface ETHAmount extends ETHToken {
    /**
     * An amount in unit Wei
     */
    amount: string;
}
/**
 * The token details and amount of ERC20 token units
 */
interface ERC20Amount extends ERC20Token {
    /**
     * An amount in units for the given ERC20 token
     */
    amount: string;
}
/**
 * Union type that represents all token types
 */
declare type AnyToken = ETHToken | ERC721Token | ERC20Token;
/**
 * Union type that represents all token type amounts
 */
declare type TokenAmount = ETHAmount | ERC20Amount | ERC721Token;
/**
 * Union type that represents exchange token type amounts
 */
declare type ExchangeTokenAmount = ETHAmount | ERC20Amount;

/**
 * Immutable X API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
interface ConfigurationParameters {
    apiKey?: string | Promise<string> | ((name: string) => string) | ((name: string) => Promise<string>);
    username?: string;
    password?: string;
    accessToken?: string | Promise<string> | ((name?: string, scopes?: string[]) => string) | ((name?: string, scopes?: string[]) => Promise<string>);
    basePath?: string;
    baseOptions?: any;
    formDataCtor?: new () => any;
}
declare class Configuration {
    /**
     * parameter for apiKey security
     * @param name security name
     * @memberof Configuration
     */
    apiKey?: string | Promise<string> | ((name: string) => string) | ((name: string) => Promise<string>);
    /**
     * parameter for basic security
     *
     * @type {string}
     * @memberof Configuration
     */
    username?: string;
    /**
     * parameter for basic security
     *
     * @type {string}
     * @memberof Configuration
     */
    password?: string;
    /**
     * parameter for oauth2 security
     * @param name security name
     * @param scopes oauth2 scope
     * @memberof Configuration
     */
    accessToken?: string | Promise<string> | ((name?: string, scopes?: string[]) => string) | ((name?: string, scopes?: string[]) => Promise<string>);
    /**
     * override base path
     *
     * @type {string}
     * @memberof Configuration
     */
    basePath?: string;
    /**
     * base options for axios calls
     *
     * @type {any}
     * @memberof Configuration
     */
    baseOptions?: any;
    /**
     * The FormData constructor that will be used to create multipart form data
     * requests. You can inject this here so that execution environments that
     * do not support the FormData class can still run the generated client.
     *
     * @type {new () => FormData}
     */
    formDataCtor?: new () => any;
    constructor(param?: ConfigurationParameters);
    /**
     * Check if the given MIME is a JSON MIME.
     * JSON MIME examples:
     *   application/json
     *   application/json; charset=UTF8
     *   APPLICATION/JSON
     *   application/vnd.company+json
     * @param mime - MIME (Multipurpose Internet Mail Extensions)
     * @return True if the given MIME is JSON, false otherwise.
     */
    isJsonMime(mime: string): boolean;
}
/**
 *
 * @export
 * @class BaseAPI
 */
declare class BaseAPI {
    protected basePath: string;
    protected axios: AxiosInstance;
    protected configuration: Configuration | undefined;
    constructor(configuration?: Configuration, basePath?: string, axios?: AxiosInstance);
}

/**
 * Immutable X API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @interface MetadataSchemaRequest
 */
interface MetadataSchemaRequest {
    /**
     * Sets the metadata as filterable
     * @type {boolean}
     * @memberof MetadataSchemaRequest
     */
    'filterable'?: boolean;
    /**
     * Name of the metadata key
     * @type {string}
     * @memberof MetadataSchemaRequest
     */
    'name': string;
    /**
     * Type of the metadata. Values: \"enum\", \"text\", \"boolean\", \"continuous\", \"discrete\" | Default: \"text\". Src: https://docs.x.immutable.com/docs/asset-metadata#property-type-mapping
     * @type {string}
     * @memberof MetadataSchemaRequest
     */
    'type'?: MetadataSchemaRequestTypeEnum;
}
declare const MetadataSchemaRequestTypeEnum: {
    readonly Enum: "enum";
    readonly Text: "text";
    readonly Boolean: "boolean";
    readonly Continuous: "continuous";
    readonly Discrete: "discrete";
};
declare type MetadataSchemaRequestTypeEnum = typeof MetadataSchemaRequestTypeEnum[keyof typeof MetadataSchemaRequestTypeEnum];

/**
 * Immutable X API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface AddMetadataSchemaToCollectionRequest
 */
interface AddMetadataSchemaToCollectionRequest {
    /**
     * Not required from API user
     * @type {string}
     * @memberof AddMetadataSchemaToCollectionRequest
     */
    'contract_address'?: string;
    /**
     * The metadata container
     * @type {Array<MetadataSchemaRequest>}
     * @memberof AddMetadataSchemaToCollectionRequest
     */
    'metadata': Array<MetadataSchemaRequest>;
}

/**
 * Immutable X API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @interface AggregateLimit
 */
interface AggregateLimit {
    /**
     * Max transaction amount
     * @type {number}
     * @memberof AggregateLimit
     */
    'max_amount'?: number;
    /**
     * Min transaction amount
     * @type {number}
     * @memberof AggregateLimit
     */
    'min_amount'?: number;
}

/**
 * Immutable X API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @interface CollectionDetails
 */
interface CollectionDetails {
    /**
     * URL of the icon of the collection
     * @type {string}
     * @memberof CollectionDetails
     */
    'icon_url': string | null;
    /**
     * Name of the collection
     * @type {string}
     * @memberof CollectionDetails
     */
    'name': string;
}

/**
 * Immutable X API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface AssetProperties
 */
interface AssetProperties {
    /**
     *
     * @type {CollectionDetails}
     * @memberof AssetProperties
     */
    'collection'?: CollectionDetails;
    /**
     * Image URL of this asset
     * @type {string}
     * @memberof AssetProperties
     */
    'image_url'?: string;
    /**
     * Name of this asset
     * @type {string}
     * @memberof AssetProperties
     */
    'name'?: string;
}

/**
 * Immutable X API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 * @type TokenDataProperties
 * Properties of this asset
 * @export
 */
declare type TokenDataProperties = AssetProperties;

/**
 * Immutable X API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface TokenData
 */
interface TokenData {
    /**
     * Number of decimals supported by this asset
     * @type {number}
     * @memberof TokenData
     */
    'decimals'?: number;
    /**
     * [DEPRECATED] Internal Immutable X Token ID
     * @type {string}
     * @memberof TokenData
     */
    'id'?: string;
    /**
     *
     * @type {TokenDataProperties}
     * @memberof TokenData
     */
    'properties'?: TokenDataProperties;
    /**
     * Quantity of this asset - inclusive of fees for buy order in v1 API and exclusive of fees in v3 API
     * @type {string}
     * @memberof TokenData
     */
    'quantity': string;
    /**
     * [DEPRECATED for v3 endpoints] Quantity of this asset with the sum of all fees applied to the asset. Replaced by quantity_with_fees in maker_fees / taker_fees depending on the type of order. Refer https://docs.x.immutable.com/docs/maker-taker-fees/#new-maker-taker-fields-and-the-deprecation-of-quantity_with_fees-in-buy-and-sell.
     * @type {string}
     * @memberof TokenData
     */
    'quantity_with_fees': string;
    /**
     * Symbol of a token
     * @type {string}
     * @memberof TokenData
     */
    'symbol'?: string;
    /**
     * Address of ERC721/ERC20 contract
     * @type {string}
     * @memberof TokenData
     */
    'token_address'?: string;
    /**
     * ERC721 Token ID
     * @type {string}
     * @memberof TokenData
     */
    'token_id'?: string;
}

/**
 * Immutable X API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 * @type TokenDataOAIGen
 * Token details of this asset
 * @export
 */
declare type TokenDataOAIGen = TokenData;

/**
 * Immutable X API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface Token
 */
interface Token {
    /**
     *
     * @type {TokenDataOAIGen}
     * @memberof Token
     */
    'data': TokenDataOAIGen;
    /**
     * Type of this asset (ETH/ERC20/ERC721)
     * @type {string}
     * @memberof Token
     */
    'type': string;
}

/**
 * Immutable X API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @interface FeeData
 */
interface FeeData {
    /**
     * Address of ERC721/ERC20 contract
     * @type {string}
     * @memberof FeeData
     */
    'contract_address'?: string;
    /**
     * Number of decimals supported by this asset
     * @type {number}
     * @memberof FeeData
     */
    'decimals'?: number;
}

/**
 * Immutable X API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface FeeToken
 */
interface FeeToken$1 {
    /**
     *
     * @type {FeeData}
     * @memberof FeeToken
     */
    'data'?: FeeData;
    /**
     * Fee token type. One of ETH/ERC20
     * @type {string}
     * @memberof FeeToken
     */
    'type'?: FeeTokenTypeEnum;
}
declare const FeeTokenTypeEnum: {
    readonly Eth: "ETH";
    readonly Erc20: "ERC20";
};
declare type FeeTokenTypeEnum = typeof FeeTokenTypeEnum[keyof typeof FeeTokenTypeEnum];

/**
 * Immutable X API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 * @type OrderFeeInfoToken
 * Details of the fee currency
 * @export
 */
declare type OrderFeeInfoToken = FeeToken$1;

/**
 * Immutable X API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface OrderFeeInfo
 */
interface OrderFeeInfo {
    /**
     * Address of the fee recipient
     * @type {string}
     * @memberof OrderFeeInfo
     */
    'address'?: string;
    /**
     * Fee amount
     * @type {string}
     * @memberof OrderFeeInfo
     */
    'amount'?: string;
    /**
     *
     * @type {OrderFeeInfoToken}
     * @memberof OrderFeeInfo
     */
    'token'?: OrderFeeInfoToken;
    /**
     * Fee type
     * @type {string}
     * @memberof OrderFeeInfo
     */
    'type'?: string;
}

/**
 * Immutable X API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @interface ApiRegisterPassportUserRequest
 */
interface ApiRegisterPassportUserRequest {
    /**
     * Eth signature
     * @type {string}
     * @memberof ApiRegisterPassportUserRequest
     */
    'eth_signature': string;
    /**
     * The ether key of the user
     * @type {string}
     * @memberof ApiRegisterPassportUserRequest
     */
    'ether_key': string;
    /**
     * Public stark key of the user
     * @type {string}
     * @memberof ApiRegisterPassportUserRequest
     */
    'stark_key': string;
    /**
     * Payload signature
     * @type {string}
     * @memberof ApiRegisterPassportUserRequest
     */
    'stark_signature': string;
}

/**
 * Immutable X API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @interface Fee
 */
interface Fee {
    /**
     * Wallet address
     * @type {string}
     * @memberof Fee
     */
    'address': string;
    /**
     * The percentage of fee
     * @type {number}
     * @memberof Fee
     */
    'percentage': number;
    /**
     * Type of fee. Examples: `royalty`, `maker`, `taker` or `protocol`
     * @type {string}
     * @memberof Fee
     */
    'type': string;
}

/**
 * Immutable X API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @interface OrderDetails
 */
interface OrderDetails {
    /**
     * Buy orders for this asset
     * @type {Array<object>}
     * @memberof OrderDetails
     */
    'buy_orders'?: Array<object>;
    /**
     * Sell orders for this asset
     * @type {Array<object>}
     * @memberof OrderDetails
     */
    'sell_orders'?: Array<object>;
}

/**
 * Immutable X API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface Asset
 */
interface Asset {
    /**
     *
     * @type {CollectionDetails}
     * @memberof Asset
     */
    'collection': CollectionDetails;
    /**
     * Timestamp of when the asset was created
     * @type {string}
     * @memberof Asset
     */
    'created_at': string | null;
    /**
     * Description of this asset
     * @type {string}
     * @memberof Asset
     */
    'description': string | null;
    /**
     * Royalties to pay on this asset operations
     * @type {Array<Fee>}
     * @memberof Asset
     */
    'fees'?: Array<Fee>;
    /**
     * [DEPRECATED] Internal Immutable X Token ID
     * @type {string}
     * @memberof Asset
     */
    'id'?: string;
    /**
     * URL of the image which should be used for this asset
     * @type {string}
     * @memberof Asset
     */
    'image_url': string | null;
    /**
     * Metadata of this asset
     * @type {object}
     * @memberof Asset
     */
    'metadata': object | null;
    /**
     * Name of this asset
     * @type {string}
     * @memberof Asset
     */
    'name': string | null;
    /**
     *
     * @type {OrderDetails}
     * @memberof Asset
     */
    'orders'?: OrderDetails;
    /**
     * Status of this asset (where it is in the system)
     * @type {string}
     * @memberof Asset
     */
    'status': string;
    /**
     * Address of the ERC721 contract
     * @type {string}
     * @memberof Asset
     */
    'token_address': string;
    /**
     * ERC721 Token ID of this asset
     * @type {string}
     * @memberof Asset
     */
    'token_id': string;
    /**
     * Timestamp of when the asset was updated
     * @type {string}
     * @memberof Asset
     */
    'updated_at': string | null;
    /**
     * URI to access this asset externally to Immutable X
     * @type {string}
     * @memberof Asset
     */
    'uri': string | null;
    /**
     * Ethereum address of the user who owns this asset
     * @type {string}
     * @memberof Asset
     */
    'user': string;
}

/**
 * Immutable X API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface AssetWithOrders
 */
interface AssetWithOrders {
    /**
     *
     * @type {CollectionDetails}
     * @memberof AssetWithOrders
     */
    'collection': CollectionDetails;
    /**
     * Timestamp of when the asset was created
     * @type {string}
     * @memberof AssetWithOrders
     */
    'created_at': string | null;
    /**
     * Description of this asset
     * @type {string}
     * @memberof AssetWithOrders
     */
    'description': string | null;
    /**
     * Royalties to pay on this asset operations
     * @type {Array<Fee>}
     * @memberof AssetWithOrders
     */
    'fees'?: Array<Fee>;
    /**
     * [DEPRECATED] Internal Immutable X Token ID
     * @type {string}
     * @memberof AssetWithOrders
     */
    'id'?: string;
    /**
     * URL of the image which should be used for this asset
     * @type {string}
     * @memberof AssetWithOrders
     */
    'image_url': string | null;
    /**
     * Metadata of this asset
     * @type {object}
     * @memberof AssetWithOrders
     */
    'metadata': object | null;
    /**
     * Name of this asset
     * @type {string}
     * @memberof AssetWithOrders
     */
    'name': string | null;
    /**
     *
     * @type {OrderDetails}
     * @memberof AssetWithOrders
     */
    'orders'?: OrderDetails;
    /**
     * Status of this asset (where it is in the system)
     * @type {string}
     * @memberof AssetWithOrders
     */
    'status': string;
    /**
     * Address of the ERC721 contract
     * @type {string}
     * @memberof AssetWithOrders
     */
    'token_address': string;
    /**
     * ERC721 Token ID of this asset
     * @type {string}
     * @memberof AssetWithOrders
     */
    'token_id': string;
    /**
     * Timestamp of when the asset was updated
     * @type {string}
     * @memberof AssetWithOrders
     */
    'updated_at': string | null;
    /**
     * URI to access this asset externally to Immutable X
     * @type {string}
     * @memberof AssetWithOrders
     */
    'uri': string | null;
    /**
     * Ethereum address of the user who owns this asset
     * @type {string}
     * @memberof AssetWithOrders
     */
    'user': string;
}

/**
 * Immutable X API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @interface Balance
 */
interface Balance {
    /**
     * Amount which is currently inside the exchange
     * @type {string}
     * @memberof Balance
     */
    'balance': string;
    /**
     * Amount which is currently preparing withdrawal from the exchange
     * @type {string}
     * @memberof Balance
     */
    'preparing_withdrawal': string;
    /**
     * Symbol of the token (e.g. ETH, IMX)
     * @type {string}
     * @memberof Balance
     */
    'symbol': string;
    /**
     * Address of the contract that represents this ERC20 token or empty for ETH
     * @type {string}
     * @memberof Balance
     */
    'token_address': string;
    /**
     * Amount which is currently withdrawable from the exchange
     * @type {string}
     * @memberof Balance
     */
    'withdrawable': string;
}

/**
 * Immutable X API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @interface CancelOrderRequest
 */
interface CancelOrderRequest {
    /**
     * ID of the order
     * @type {number}
     * @memberof CancelOrderRequest
     */
    'order_id': number;
    /**
     * Payload signature
     * @type {string}
     * @memberof CancelOrderRequest
     */
    'stark_signature': string;
}

/**
 * Immutable X API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @interface CancelOrderResponse
 */
interface CancelOrderResponse {
    /**
     * ID of the cancelled order
     * @type {number}
     * @memberof CancelOrderResponse
     */
    'order_id': number;
    /**
     * New status of the order
     * @type {string}
     * @memberof CancelOrderResponse
     */
    'status': string;
}

/**
 * Immutable X API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @interface Collection
 */
interface Collection {
    /**
     * Ethereum address of the ERC721 contract
     * @type {string}
     * @memberof Collection
     */
    'address': string;
    /**
     * URL of the tile image for this collection
     * @type {string}
     * @memberof Collection
     */
    'collection_image_url': string | null;
    /**
     * Timestamp of when the collection was created
     * @type {string}
     * @memberof Collection
     */
    'created_at': string | null;
    /**
     * Description of the collection
     * @type {string}
     * @memberof Collection
     */
    'description': string | null;
    /**
     * URL of the icon for this collection
     * @type {string}
     * @memberof Collection
     */
    'icon_url': string | null;
    /**
     * URL of the metadata for this collection
     * @type {string}
     * @memberof Collection
     */
    'metadata_api_url': string | null;
    /**
     * Name of the collection
     * @type {string}
     * @memberof Collection
     */
    'name': string;
    /**
     * The collection\'s project ID
     * @type {number}
     * @memberof Collection
     */
    'project_id': number;
    /**
     * Project owner address
     * @type {string}
     * @memberof Collection
     */
    'project_owner_address': string;
    /**
     * Timestamp of when the collection was updated
     * @type {string}
     * @memberof Collection
     */
    'updated_at': string | null;
}

/**
 * Immutable X API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @interface Range
 */
interface Range {
    /**
     * Maximum value
     * @type {number}
     * @memberof Range
     */
    'max'?: number;
    /**
     * Minimum value
     * @type {number}
     * @memberof Range
     */
    'min'?: number;
}

/**
 * Immutable X API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface CollectionFilter
 */
interface CollectionFilter {
    /**
     * Key of this property
     * @type {string}
     * @memberof CollectionFilter
     */
    'key'?: string;
    /**
     *
     * @type {Range}
     * @memberof CollectionFilter
     */
    'range'?: Range;
    /**
     * Type of this filter
     * @type {string}
     * @memberof CollectionFilter
     */
    'type'?: string;
    /**
     * List of possible values for this property
     * @type {Array<string>}
     * @memberof CollectionFilter
     */
    'value'?: Array<string>;
}

/**
 * Immutable X API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @interface ContractCreateAPIRequest
 */
interface ContractCreateAPIRequest {
    /**
     *
     * @type {string}
     * @memberof ContractCreateAPIRequest
     */
    'contract_address'?: string;
    /**
     *
     * @type {string}
     * @memberof ContractCreateAPIRequest
     */
    'data_url'?: string;
    /**
     *
     * @type {string}
     * @memberof ContractCreateAPIRequest
     */
    'mint_url'?: string;
}

/**
 * Immutable X API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @interface ContractCreateResponse
 */
interface ContractCreateResponse {
    /**
     *
     * @type {string}
     * @memberof ContractCreateResponse
     */
    'webhook_hash'?: string;
}

/**
 * Immutable X API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @interface CreateCollectionRequest
 */
interface CreateCollectionRequest {
    /**
     * URL of the tile image for this collection
     * @type {string}
     * @memberof CreateCollectionRequest
     */
    'collection_image_url'?: string;
    /**
     * Ethereum address of the ERC721 contract
     * @type {string}
     * @memberof CreateCollectionRequest
     */
    'contract_address': string;
    /**
     * Description of the collection
     * @type {string}
     * @memberof CreateCollectionRequest
     */
    'description'?: string;
    /**
     * URL of the icon for this collection
     * @type {string}
     * @memberof CreateCollectionRequest
     */
    'icon_url'?: string;
    /**
     * URL of the metadata for this collection
     * @type {string}
     * @memberof CreateCollectionRequest
     */
    'metadata_api_url'?: string;
    /**
     * Name of the collection
     * @type {string}
     * @memberof CreateCollectionRequest
     */
    'name': string;
    /**
     * Owner Public Key: The uncompressed public key of the owner of the contract
     * @type {string}
     * @memberof CreateCollectionRequest
     */
    'owner_public_key': string;
    /**
     * The collection\'s project ID
     * @type {number}
     * @memberof CreateCollectionRequest
     */
    'project_id': number;
}

/**
 * Immutable X API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @interface WidgetParams
 */
interface WidgetParams {
    /**
     * Amount that will be prefilled in the widget
     * @type {string}
     * @memberof WidgetParams
     */
    'amount'?: string;
    /**
     * Currencies that will be available in the widget. If not defined all available currencies will be shown
     * @type {Array<string>}
     * @memberof WidgetParams
     */
    'supported_currencies'?: Array<string>;
    /**
     * Widget theme dark by default
     * @type {string}
     * @memberof WidgetParams
     */
    'theme'?: string;
}

/**
 * Immutable X API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface CreateExchangeAndURLAPIRequest
 */
interface CreateExchangeAndURLAPIRequest {
    /**
     * Provider name
     * @type {string}
     * @memberof CreateExchangeAndURLAPIRequest
     */
    'provider'?: CreateExchangeAndURLAPIRequestProviderEnum;
    /**
     * Transaction type
     * @type {string}
     * @memberof CreateExchangeAndURLAPIRequest
     */
    'type'?: CreateExchangeAndURLAPIRequestTypeEnum;
    /**
     * Ethereum address of the user who wants to create transaction
     * @type {string}
     * @memberof CreateExchangeAndURLAPIRequest
     */
    'wallet_address'?: string;
    /**
     *
     * @type {WidgetParams}
     * @memberof CreateExchangeAndURLAPIRequest
     */
    'widget'?: WidgetParams;
}
declare const CreateExchangeAndURLAPIRequestProviderEnum: {
    readonly Moonpay: "moonpay";
    readonly Layerswap: "layerswap";
};
declare type CreateExchangeAndURLAPIRequestProviderEnum = typeof CreateExchangeAndURLAPIRequestProviderEnum[keyof typeof CreateExchangeAndURLAPIRequestProviderEnum];
declare const CreateExchangeAndURLAPIRequestTypeEnum: {
    readonly Onramp: "onramp";
    readonly Offramp: "offramp";
};
declare type CreateExchangeAndURLAPIRequestTypeEnum = typeof CreateExchangeAndURLAPIRequestTypeEnum[keyof typeof CreateExchangeAndURLAPIRequestTypeEnum];

/**
 * Immutable X API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @interface CreateMetadataRefreshRequest
 */
interface CreateMetadataRefreshRequest {
    /**
     * The collection contract address
     * @type {string}
     * @memberof CreateMetadataRefreshRequest
     */
    'collection_address': string;
    /**
     * The tokens to refresh
     * @type {Array<string>}
     * @memberof CreateMetadataRefreshRequest
     */
    'token_ids': Array<string>;
}

/**
 * Immutable X API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @interface CreateMetadataRefreshResponse
 */
interface CreateMetadataRefreshResponse {
    /**
     * The metadata refresh ID
     * @type {string}
     * @memberof CreateMetadataRefreshResponse
     */
    'refresh_id': string;
}

/**
 * Immutable X API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @interface FeeEntry
 */
interface FeeEntry {
    /**
     *
     * @type {string}
     * @memberof FeeEntry
     */
    'address'?: string;
    /**
     *
     * @type {number}
     * @memberof FeeEntry
     */
    'fee_percentage'?: number;
}

/**
 * Immutable X API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface CreateOrderRequest
 */
interface CreateOrderRequest {
    /**
     * Amount to buy
     * @type {string}
     * @memberof CreateOrderRequest
     */
    'amount_buy': string;
    /**
     * Amount to sell
     * @type {string}
     * @memberof CreateOrderRequest
     */
    'amount_sell': string;
    /**
     * ID of the asset to buy
     * @type {string}
     * @memberof CreateOrderRequest
     */
    'asset_id_buy': string;
    /**
     * ID of the asset to sell
     * @type {string}
     * @memberof CreateOrderRequest
     */
    'asset_id_sell': string;
    /**
     * Expiration timestamp for this order
     * @type {number}
     * @memberof CreateOrderRequest
     */
    'expiration_timestamp': number;
    /**
     * Fee information
     * @type {Array<FeeEntry>}
     * @memberof CreateOrderRequest
     */
    'fees'?: Array<FeeEntry>;
    /**
     * Whether to include fees in order
     * @type {boolean}
     * @memberof CreateOrderRequest
     */
    'include_fees'?: boolean;
    /**
     * Nonce of the order
     * @type {number}
     * @memberof CreateOrderRequest
     */
    'nonce': number;
    /**
     * Public stark key of the user creating order
     * @type {string}
     * @memberof CreateOrderRequest
     */
    'stark_key': string;
    /**
     * Payload signature
     * @type {string}
     * @memberof CreateOrderRequest
     */
    'stark_signature': string;
    /**
     * ID of the vault into which the bought asset will be placed
     * @type {number}
     * @memberof CreateOrderRequest
     */
    'vault_id_buy': number;
    /**
     * ID of the vault to sell from
     * @type {number}
     * @memberof CreateOrderRequest
     */
    'vault_id_sell': number;
}

/**
 * Immutable X API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface CreateOrderRequestV3
 */
interface CreateOrderRequestV3 {
    /**
     * Amount to buy
     * @type {string}
     * @memberof CreateOrderRequestV3
     */
    'amount_buy': string;
    /**
     * Amount to sell
     * @type {string}
     * @memberof CreateOrderRequestV3
     */
    'amount_sell': string;
    /**
     * ID of the asset to buy
     * @type {string}
     * @memberof CreateOrderRequestV3
     */
    'asset_id_buy': string;
    /**
     * ID of the asset to sell
     * @type {string}
     * @memberof CreateOrderRequestV3
     */
    'asset_id_sell': string;
    /**
     * Expiration timestamp for this order
     * @type {number}
     * @memberof CreateOrderRequestV3
     */
    'expiration_timestamp': number;
    /**
     * Fee information
     * @type {Array<FeeEntry>}
     * @memberof CreateOrderRequestV3
     */
    'fees'?: Array<FeeEntry>;
    /**
     * [DEPRECATED] Whether to include fees in order
     * @type {boolean}
     * @memberof CreateOrderRequestV3
     */
    'include_fees'?: boolean;
    /**
     * Nonce of the order
     * @type {number}
     * @memberof CreateOrderRequestV3
     */
    'nonce': number;
    /**
     * Public stark key of the user creating order
     * @type {string}
     * @memberof CreateOrderRequestV3
     */
    'stark_key': string;
    /**
     * Payload signature
     * @type {string}
     * @memberof CreateOrderRequestV3
     */
    'stark_signature': string;
    /**
     * ID of the vault into which the bought asset will be placed
     * @type {number}
     * @memberof CreateOrderRequestV3
     */
    'vault_id_buy': number;
    /**
     * ID of the vault to sell from
     * @type {number}
     * @memberof CreateOrderRequestV3
     */
    'vault_id_sell': number;
}

/**
 * Immutable X API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @interface CreateOrderResponse
 */
interface CreateOrderResponse {
    /**
     * ID of the created order
     * @type {number}
     * @memberof CreateOrderResponse
     */
    'order_id': number;
    /**
     * Request ID as a reference for an asynchronous order creation request
     * @type {string}
     * @memberof CreateOrderResponse
     */
    'request_id'?: string;
    /**
     * Status of the created order
     * @type {string}
     * @memberof CreateOrderResponse
     */
    'status': string;
    /**
     * Timestamp of the created order
     * @type {number}
     * @memberof CreateOrderResponse
     */
    'time': number;
}

/**
 * Immutable X API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @interface CreateProjectRequest
 */
interface CreateProjectRequest {
    /**
     * The company name
     * @type {string}
     * @memberof CreateProjectRequest
     */
    'company_name': string;
    /**
     * The project contact email (must be registered as a developer account with Immutable at https://hub.immutable.com)
     * @type {string}
     * @memberof CreateProjectRequest
     */
    'contact_email': string;
    /**
     * The project name
     * @type {string}
     * @memberof CreateProjectRequest
     */
    'name': string;
}

/**
 * Immutable X API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @interface CreateProjectResponse
 */
interface CreateProjectResponse {
    /**
     * The project ID
     * @type {number}
     * @memberof CreateProjectResponse
     */
    'id': number;
}

/**
 * Immutable X API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @interface FeeInfo
 */
interface FeeInfo {
    /**
     * ID of the asset these fees relate to
     * @type {string}
     * @memberof FeeInfo
     */
    'asset_id': string;
    /**
     * Fee limit
     * @type {string}
     * @memberof FeeInfo
     */
    'fee_limit': string;
    /**
     * ID of vault the asset belong to
     * @type {number}
     * @memberof FeeInfo
     */
    'source_vault_id': number;
}

/**
 * Immutable X API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 * @type CreateTradeRequestV1FeeInfo
 * Fee details
 * @export
 */
declare type CreateTradeRequestV1FeeInfo = FeeInfo;

/**
 * Immutable X API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface CreateTradeRequestV1
 */
interface CreateTradeRequestV1 {
    /**
     * Amount to buy
     * @type {string}
     * @memberof CreateTradeRequestV1
     */
    'amount_buy': string;
    /**
     * Amount to sell
     * @type {string}
     * @memberof CreateTradeRequestV1
     */
    'amount_sell': string;
    /**
     * ID of the asset to buy
     * @type {string}
     * @memberof CreateTradeRequestV1
     */
    'asset_id_buy': string;
    /**
     * ID of the asset to sell
     * @type {string}
     * @memberof CreateTradeRequestV1
     */
    'asset_id_sell': string;
    /**
     * Expiration timestamp for this trade
     * @type {number}
     * @memberof CreateTradeRequestV1
     */
    'expiration_timestamp': number;
    /**
     *
     * @type {CreateTradeRequestV1FeeInfo}
     * @memberof CreateTradeRequestV1
     */
    'fee_info'?: CreateTradeRequestV1FeeInfo;
    /**
     * Fee information
     * @type {Array<FeeEntry>}
     * @memberof CreateTradeRequestV1
     */
    'fees'?: Array<FeeEntry>;
    /**
     * [deprecated] All orders include fees since the introduction of protocol fees
     * @type {boolean}
     * @memberof CreateTradeRequestV1
     */
    'include_fees'?: boolean;
    /**
     * Nonce of the trade
     * @type {number}
     * @memberof CreateTradeRequestV1
     */
    'nonce': number;
    /**
     * ID of the order
     * @type {number}
     * @memberof CreateTradeRequestV1
     */
    'order_id': number;
    /**
     * Public stark key of the user creating trade
     * @type {string}
     * @memberof CreateTradeRequestV1
     */
    'stark_key': string;
    /**
     * Payload signature
     * @type {string}
     * @memberof CreateTradeRequestV1
     */
    'stark_signature': string;
    /**
     * ID of the vault into which the traded asset will be placed
     * @type {number}
     * @memberof CreateTradeRequestV1
     */
    'vault_id_buy': number;
    /**
     * ID of the vault to sell from
     * @type {number}
     * @memberof CreateTradeRequestV1
     */
    'vault_id_sell': number;
}

/**
 * Immutable X API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @interface CreateTradeResponse
 */
interface CreateTradeResponse {
    /**
     * Request ID as a reference for an asynchronous trade creation request
     * @type {string}
     * @memberof CreateTradeResponse
     */
    'request_id'?: string;
    /**
     * Current status of trade
     * @type {string}
     * @memberof CreateTradeResponse
     */
    'status': string;
    /**
     * ID of trade within Immutable X
     * @type {number}
     * @memberof CreateTradeResponse
     */
    'trade_id': number;
}

/**
 * Immutable X API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @interface TransferRequest
 */
interface TransferRequest {
    /**
     * Amount to transfer
     * @type {string}
     * @memberof TransferRequest
     */
    'amount': string;
    /**
     * ID of the asset to transfer
     * @type {string}
     * @memberof TransferRequest
     */
    'asset_id': string;
    /**
     * Expiration timestamp for this transfer
     * @type {number}
     * @memberof TransferRequest
     */
    'expiration_timestamp': number;
    /**
     * Nonce of the transfer
     * @type {number}
     * @memberof TransferRequest
     */
    'nonce': number;
    /**
     * Public stark key of the user receiving the transfer
     * @type {string}
     * @memberof TransferRequest
     */
    'receiver_stark_key': string;
    /**
     * ID of the vault into which the asset will be transferred to
     * @type {number}
     * @memberof TransferRequest
     */
    'receiver_vault_id': number;
    /**
     * ID of the vault into which the asset is from
     * @type {number}
     * @memberof TransferRequest
     */
    'sender_vault_id': number;
    /**
     * Transfer payload signature
     * @type {string}
     * @memberof TransferRequest
     */
    'stark_signature': string;
}

/**
 * Immutable X API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface CreateTransferRequest
 */
interface CreateTransferRequest {
    /**
     * List of transfers
     * @type {Array<TransferRequest>}
     * @memberof CreateTransferRequest
     */
    'requests': Array<TransferRequest>;
    /**
     * Public stark key of the user sending the transfer
     * @type {string}
     * @memberof CreateTransferRequest
     */
    'sender_stark_key': string;
}

/**
 * Immutable X API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @interface CreateTransferRequestV1
 */
interface CreateTransferRequestV1 {
    /**
     * Amount to transfer
     * @type {string}
     * @memberof CreateTransferRequestV1
     */
    'amount': string;
    /**
     * ID of the asset to transfer
     * @type {string}
     * @memberof CreateTransferRequestV1
     */
    'asset_id': string;
    /**
     * Expiration timestamp for this transfer
     * @type {number}
     * @memberof CreateTransferRequestV1
     */
    'expiration_timestamp': number;
    /**
     * Nonce of the transfer
     * @type {number}
     * @memberof CreateTransferRequestV1
     */
    'nonce': number;
    /**
     * Public stark key of the user receiving the transfer
     * @type {string}
     * @memberof CreateTransferRequestV1
     */
    'receiver_stark_key': string;
    /**
     * ID of the vault into which the asset will be transferred to
     * @type {number}
     * @memberof CreateTransferRequestV1
     */
    'receiver_vault_id': number;
    /**
     * Public stark key of the user sending the transfer
     * @type {string}
     * @memberof CreateTransferRequestV1
     */
    'sender_stark_key': string;
    /**
     * ID of the vault into which the asset is from
     * @type {number}
     * @memberof CreateTransferRequestV1
     */
    'sender_vault_id': number;
    /**
     * Transfer payload signature
     * @type {string}
     * @memberof CreateTransferRequestV1
     */
    'stark_signature': string;
}

/**
 * Immutable X API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @interface CreateTransferResponse
 */
interface CreateTransferResponse {
    /**
     * List of transfer IDs
     * @type {Array<number>}
     * @memberof CreateTransferResponse
     */
    'transfer_ids': Array<number>;
}

/**
 * Immutable X API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @interface CreateTransferResponseV1
 */
interface CreateTransferResponseV1 {
    /**
     * [deprecated] Sent signature
     * @type {string}
     * @memberof CreateTransferResponseV1
     */
    'sent_signature': string;
    /**
     * [deprecated] The status of transfer
     * @type {string}
     * @memberof CreateTransferResponseV1
     */
    'status': string;
    /**
     * [deprecated] Time of the transfer
     * @type {number}
     * @memberof CreateTransferResponseV1
     */
    'time': number;
    /**
     * ID of the transfer
     * @type {number}
     * @memberof CreateTransferResponseV1
     */
    'transfer_id': number;
}

/**
 * Immutable X API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @interface CreateWithdrawalRequest
 */
interface CreateWithdrawalRequest {
    /**
     * Amount to withdraw
     * @type {string}
     * @memberof CreateWithdrawalRequest
     */
    'amount': string;
    /**
     * The ID of asset the user is withdrawing
     * @type {string}
     * @memberof CreateWithdrawalRequest
     */
    'asset_id': string;
    /**
     * Nonce of the withdrawal
     * @type {number}
     * @memberof CreateWithdrawalRequest
     */
    'nonce': number;
    /**
     * Public stark key of the withdrawing user
     * @type {string}
     * @memberof CreateWithdrawalRequest
     */
    'stark_key': string;
    /**
     * Payload signature
     * @type {string}
     * @memberof CreateWithdrawalRequest
     */
    'stark_signature': string;
    /**
     * The ID of the vault the asset belong to
     * @type {number}
     * @memberof CreateWithdrawalRequest
     */
    'vault_id': number;
}

/**
 * Immutable X API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @interface CreateWithdrawalResponse
 */
interface CreateWithdrawalResponse {
    /**
     * Status of the withdrawal
     * @type {string}
     * @memberof CreateWithdrawalResponse
     */
    'status': string;
    /**
     * Time of the withdrawal
     * @type {number}
     * @memberof CreateWithdrawalResponse
     */
    'time': number;
    /**
     * ID of the withdrawal
     * @type {number}
     * @memberof CreateWithdrawalResponse
     */
    'withdrawal_id': number;
}

/**
 * Immutable X API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface CurrencyWithLimits
 */
interface CurrencyWithLimits {
    /**
     * Provider currency code
     * @type {string}
     * @memberof CurrencyWithLimits
     */
    'currency_code'?: string;
    /**
     *
     * @type {AggregateLimit}
     * @memberof CurrencyWithLimits
     */
    'limits'?: AggregateLimit;
    /**
     * Provider name (e.g. moonpay)
     * @type {string}
     * @memberof CurrencyWithLimits
     */
    'provider'?: string;
    /**
     * Currency Symbol
     * @type {string}
     * @memberof CurrencyWithLimits
     */
    'symbol'?: string;
}

/**
 * Immutable X API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface Deposit
 */
interface Deposit {
    /**
     * Status of this deposit in Immutable X
     * @type {string}
     * @memberof Deposit
     */
    'status': string;
    /**
     * Timestamp of the deposit
     * @type {string}
     * @memberof Deposit
     */
    'timestamp': string;
    /**
     *
     * @type {Token}
     * @memberof Deposit
     */
    'token': Token;
    /**
     * Sequential ID of this transaction within Immutable X
     * @type {number}
     * @memberof Deposit
     */
    'transaction_id': number;
    /**
     * Ethereum address of the user making this deposit
     * @type {string}
     * @memberof Deposit
     */
    'user': string;
}

/**
 * Immutable X API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @interface OptionalExchangeData
 */
interface OptionalExchangeData {
    /**
     * Provider transaction ID
     * @type {string}
     * @memberof OptionalExchangeData
     */
    'external_id'?: string;
    /**
     * Fees amount
     * @type {number}
     * @memberof OptionalExchangeData
     */
    'fees_amount'?: number;
    /**
     * Amount that was exchanged from
     * @type {number}
     * @memberof OptionalExchangeData
     */
    'from_amount'?: number;
    /**
     * Currency that was exchanged from
     * @type {string}
     * @memberof OptionalExchangeData
     */
    'from_currency'?: string;
    /**
     * Provider wallet address that was used for transferring crypto
     * @type {string}
     * @memberof OptionalExchangeData
     */
    'provider_wallet_address'?: string;
    /**
     * Amount that was exchanged to
     * @type {number}
     * @memberof OptionalExchangeData
     */
    'to_amount'?: number;
    /**
     * Currency that was exchanged to
     * @type {string}
     * @memberof OptionalExchangeData
     */
    'to_currency'?: string;
    /**
     * Transfer ID
     * @type {string}
     * @memberof OptionalExchangeData
     */
    'transfer_id'?: string;
}

/**
 * Immutable X API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface Exchange
 */
interface Exchange {
    /**
     * Time this transaction was created
     * @type {string}
     * @memberof Exchange
     */
    'created_at'?: string;
    /**
     *
     * @type {OptionalExchangeData}
     * @memberof Exchange
     */
    'data'?: OptionalExchangeData;
    /**
     * Transaction ID
     * @type {number}
     * @memberof Exchange
     */
    'id'?: number;
    /**
     * Provider name
     * @type {string}
     * @memberof Exchange
     */
    'provider'?: string;
    /**
     * Transaction status
     * @type {string}
     * @memberof Exchange
     */
    'status'?: string;
    /**
     * Transaction type
     * @type {string}
     * @memberof Exchange
     */
    'type'?: string;
    /**
     * Time this transaction was updates
     * @type {string}
     * @memberof Exchange
     */
    'updated_at'?: string;
    /**
     * Ethereum address of the user who created transaction
     * @type {string}
     * @memberof Exchange
     */
    'wallet_address'?: string;
}

/**
 * Immutable X API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @interface ExchangeCreateExchangeAndURLResponse
 */
interface ExchangeCreateExchangeAndURLResponse {
    /**
     * Created transaction ID
     * @type {number}
     * @memberof ExchangeCreateExchangeAndURLResponse
     */
    'id'?: number;
    /**
     * Provider name (e.g. moonpay)
     * @type {string}
     * @memberof ExchangeCreateExchangeAndURLResponse
     */
    'provider'?: string;
    /**
     * Transaction type
     * @type {string}
     * @memberof ExchangeCreateExchangeAndURLResponse
     */
    'type'?: string;
    /**
     * Widget URL
     * @type {string}
     * @memberof ExchangeCreateExchangeAndURLResponse
     */
    'url'?: string;
    /**
     * Ethereum address of the user who created transaction
     * @type {string}
     * @memberof ExchangeCreateExchangeAndURLResponse
     */
    'wallet_address'?: string;
}

/**
 * Immutable X API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @interface MetadataRefreshErrors
 */
interface MetadataRefreshErrors {
    /**
     * Metadata API response for the token
     * @type {string}
     * @memberof MetadataRefreshErrors
     */
    'client_response_body': string | null;
    /**
     * Metadata API response code for the token
     * @type {string}
     * @memberof MetadataRefreshErrors
     */
    'client_response_status_code': string | null;
    /**
     * Requested metadata url for the token
     * @type {string}
     * @memberof MetadataRefreshErrors
     */
    'client_token_metadata_url': string;
    /**
     * The collection contract address
     * @type {string}
     * @memberof MetadataRefreshErrors
     */
    'collection_address': string;
    /**
     * When the error was created
     * @type {string}
     * @memberof MetadataRefreshErrors
     */
    'created_at': string;
    /**
     * Metadata refresh error code
     * @type {string}
     * @memberof MetadataRefreshErrors
     */
    'error_code': string;
    /**
     * The token ID
     * @type {string}
     * @memberof MetadataRefreshErrors
     */
    'token_id': string;
}

/**
 * Immutable X API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface GetMetadataRefreshErrorsResponse
 */
interface GetMetadataRefreshErrorsResponse {
    /**
     * Generated cursor returned by previous query
     * @type {string}
     * @memberof GetMetadataRefreshErrorsResponse
     */
    'cursor': string;
    /**
     * Remaining results flag. 1: there are remaining results matching this query, 0: no remaining results
     * @type {number}
     * @memberof GetMetadataRefreshErrorsResponse
     */
    'remaining': number;
    /**
     * Metadata refresh errors matching query parameters
     * @type {Array<MetadataRefreshErrors>}
     * @memberof GetMetadataRefreshErrorsResponse
     */
    'result': Array<MetadataRefreshErrors>;
}

/**
 * Immutable X API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @interface MetadataRefreshSummary
 */
interface MetadataRefreshSummary {
    /**
     * The number of tokens with failed metadata refreshes
     * @type {number}
     * @memberof MetadataRefreshSummary
     */
    'failed'?: number;
    /**
     * The number of tokens that has not been refreshed yet
     * @type {number}
     * @memberof MetadataRefreshSummary
     */
    'pending'?: number;
    /**
     * The number of tokens with successful metadata refreshes
     * @type {number}
     * @memberof MetadataRefreshSummary
     */
    'succeeded'?: number;
}

/**
 * Immutable X API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface GetMetadataRefreshResponse
 */
interface GetMetadataRefreshResponse {
    /**
     * The collection address
     * @type {string}
     * @memberof GetMetadataRefreshResponse
     */
    'collection_address': string;
    /**
     * When the metadata refresh completed
     * @type {string}
     * @memberof GetMetadataRefreshResponse
     */
    'completed_at'?: string | null;
    /**
     * The metadata refresh ID
     * @type {string}
     * @memberof GetMetadataRefreshResponse
     */
    'refresh_id': string;
    /**
     * When the metadata refresh started
     * @type {string}
     * @memberof GetMetadataRefreshResponse
     */
    'started_at': string;
    /**
     * The metadata refresh status
     * @type {string}
     * @memberof GetMetadataRefreshResponse
     */
    'status': GetMetadataRefreshResponseStatusEnum;
    /**
     * The current metadata refresh summary. The summary continue to update until metadata refresh is completed
     * @type {Array<MetadataRefreshSummary>}
     * @memberof GetMetadataRefreshResponse
     */
    'summary': Array<MetadataRefreshSummary>;
}
declare const GetMetadataRefreshResponseStatusEnum: {
    readonly Queued: "queued";
    readonly InProgress: "in_progress";
    readonly Completed: "completed";
};
declare type GetMetadataRefreshResponseStatusEnum = typeof GetMetadataRefreshResponseStatusEnum[keyof typeof GetMetadataRefreshResponseStatusEnum];

/**
 * Immutable X API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @interface MetadataRefreshExcludingSummary
 */
interface MetadataRefreshExcludingSummary {
    /**
     * The collection address
     * @type {string}
     * @memberof MetadataRefreshExcludingSummary
     */
    'collection_address': string;
    /**
     * When the metadata refresh completed
     * @type {string}
     * @memberof MetadataRefreshExcludingSummary
     */
    'completed_at'?: string | null;
    /**
     * The metadata refresh ID
     * @type {string}
     * @memberof MetadataRefreshExcludingSummary
     */
    'refresh_id': string;
    /**
     * When the metadata refresh started
     * @type {string}
     * @memberof MetadataRefreshExcludingSummary
     */
    'started_at': string;
    /**
     * The metadata refresh status
     * @type {string}
     * @memberof MetadataRefreshExcludingSummary
     */
    'status': MetadataRefreshExcludingSummaryStatusEnum;
}
declare const MetadataRefreshExcludingSummaryStatusEnum: {
    readonly Queued: "queued";
    readonly InProgress: "in_progress";
    readonly Completed: "completed";
};
declare type MetadataRefreshExcludingSummaryStatusEnum = typeof MetadataRefreshExcludingSummaryStatusEnum[keyof typeof MetadataRefreshExcludingSummaryStatusEnum];

/**
 * Immutable X API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface GetMetadataRefreshes
 */
interface GetMetadataRefreshes {
    /**
     * Generated cursor returned by previous query
     * @type {string}
     * @memberof GetMetadataRefreshes
     */
    'cursor': string;
    /**
     * Remaining results flag. 1: there are remaining results matching this query, 0: no remaining results
     * @type {number}
     * @memberof GetMetadataRefreshes
     */
    'remaining': number;
    /**
     * Metadata refresh errors matching query parameters
     * @type {Array<MetadataRefreshExcludingSummary>}
     * @memberof GetMetadataRefreshes
     */
    'result': Array<MetadataRefreshExcludingSummary>;
}

/**
 * Immutable X API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @interface Project
 */
interface Project {
    /**
     * The current period expiry date for collection limit
     * @type {string}
     * @memberof Project
     */
    'collection_limit_expires_at': string;
    /**
     * The total monthly collection limit
     * @type {number}
     * @memberof Project
     */
    'collection_monthly_limit': number;
    /**
     * The number of collection remaining in the current period
     * @type {number}
     * @memberof Project
     */
    'collection_remaining': number;
    /**
     * The company name
     * @type {string}
     * @memberof Project
     */
    'company_name': string;
    /**
     * The project contact email (must be registered as a developer account with Immutable at https://hub.immutable.com)
     * @type {string}
     * @memberof Project
     */
    'contact_email': string;
    /**
     * The project ID
     * @type {number}
     * @memberof Project
     */
    'id': number;
    /**
     * The current period expiry date for mint operation limit
     * @type {string}
     * @memberof Project
     */
    'mint_limit_expires_at': string;
    /**
     * The total monthly mint operation limit
     * @type {number}
     * @memberof Project
     */
    'mint_monthly_limit': number;
    /**
     * The number of mint operation remaining in the current period
     * @type {number}
     * @memberof Project
     */
    'mint_remaining': number;
    /**
     * The project name
     * @type {string}
     * @memberof Project
     */
    'name': string;
}

/**
 * Immutable X API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface GetProjectsResponse
 */
interface GetProjectsResponse {
    /**
     * Generated cursor returned by previous query
     * @type {string}
     * @memberof GetProjectsResponse
     */
    'cursor': string;
    /**
     * Remaining results flag. 1: there are remaining results matching this query, 0: no remaining results
     * @type {number}
     * @memberof GetProjectsResponse
     */
    'remaining': number;
    /**
     * Projects matching query parameters
     * @type {Array<Project>}
     * @memberof GetProjectsResponse
     */
    'result': Array<Project>;
}

/**
 * Immutable X API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @interface GetSignableCancelOrderRequest
 */
interface GetSignableCancelOrderRequest {
    /**
     * ID of the order to be cancelled
     * @type {number}
     * @memberof GetSignableCancelOrderRequest
     */
    'order_id': number;
}

/**
 * Immutable X API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @interface GetSignableCancelOrderResponse
 */
interface GetSignableCancelOrderResponse {
    /**
     * ID of the order to be cancelled
     * @type {number}
     * @memberof GetSignableCancelOrderResponse
     */
    'order_id': number;
    /**
     * Hash of the payload to be signed for cancel order
     * @type {string}
     * @memberof GetSignableCancelOrderResponse
     */
    'payload_hash': string;
    /**
     * Message to sign from wallet to confirm cancel order
     * @type {string}
     * @memberof GetSignableCancelOrderResponse
     */
    'signable_message': string;
}

/**
 * Immutable X API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @interface SignableToken
 */
interface SignableToken {
    /**
     * Token data. See https://docs.x.immutable.com/docs/token-data-object
     * @type {object}
     * @memberof SignableToken
     */
    'data'?: object;
    /**
     * Type of token
     * @type {string}
     * @memberof SignableToken
     */
    'type'?: string;
}

/**
 * Immutable X API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface GetSignableDepositRequest
 */
interface GetSignableDepositRequest {
    /**
     * Amount of the token the user is depositing
     * @type {string}
     * @memberof GetSignableDepositRequest
     */
    'amount': string;
    /**
     *
     * @type {SignableToken}
     * @memberof GetSignableDepositRequest
     */
    'token': SignableToken;
    /**
     * User who is depositing
     * @type {string}
     * @memberof GetSignableDepositRequest
     */
    'user': string;
}

/**
 * Immutable X API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @interface GetSignableDepositResponse
 */
interface GetSignableDepositResponse {
    /**
     * Amount this user is depositing
     * @type {string}
     * @memberof GetSignableDepositResponse
     */
    'amount': string;
    /**
     * ID of the asset this user is depositing
     * @type {string}
     * @memberof GetSignableDepositResponse
     */
    'asset_id': string;
    /**
     * Nonce of the deposit
     * @type {number}
     * @memberof GetSignableDepositResponse
     */
    'nonce': number;
    /**
     * Public stark key of the depositing user
     * @type {string}
     * @memberof GetSignableDepositResponse
     */
    'stark_key': string;
    /**
     * ID of the vault this user is depositing to
     * @type {number}
     * @memberof GetSignableDepositResponse
     */
    'vault_id': number;
}

/**
 * Immutable X API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 * @type GetSignableOrderRequestV3TokenBuy
 * Token to buy
 * @export
 */
declare type GetSignableOrderRequestV3TokenBuy = SignableToken;

/**
 * Immutable X API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 * @type GetSignableOrderRequestV3TokenSell
 * Token to sell
 * @export
 */
declare type GetSignableOrderRequestV3TokenSell = SignableToken;

/**
 * Immutable X API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface GetSignableOrderRequestV3
 */
interface GetSignableOrderRequestV3 {
    /**
     * Fee-exclusive amount to buy the asset
     * @type {string}
     * @memberof GetSignableOrderRequestV3
     */
    'amount_buy': string;
    /**
     * Amount to sell (quantity)
     * @type {string}
     * @memberof GetSignableOrderRequestV3
     */
    'amount_sell': string;
    /**
     * ExpirationTimestamp in Unix time in hours. Note: will be rounded down to the nearest hour
     * @type {number}
     * @memberof GetSignableOrderRequestV3
     */
    'expiration_timestamp'?: number;
    /**
     * Inclusion of either maker or taker fees
     * @type {Array<FeeEntry>}
     * @memberof GetSignableOrderRequestV3
     */
    'fees'?: Array<FeeEntry>;
    /**
     * SplitFees dictates whether fees will be split between maker & taker, set split_fees to true when submitting signing to v3 endpoints and vice versa for v1
     * @type {boolean}
     * @memberof GetSignableOrderRequestV3
     */
    'split_fees'?: boolean;
    /**
     *
     * @type {GetSignableOrderRequestV3TokenBuy}
     * @memberof GetSignableOrderRequestV3
     */
    'token_buy': GetSignableOrderRequestV3TokenBuy;
    /**
     *
     * @type {GetSignableOrderRequestV3TokenSell}
     * @memberof GetSignableOrderRequestV3
     */
    'token_sell': GetSignableOrderRequestV3TokenSell;
    /**
     * Ethereum address of the submitting user
     * @type {string}
     * @memberof GetSignableOrderRequestV3
     */
    'user': string;
}

/**
 * Immutable X API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 * @type GetSignableOrderResponseFeeInfo
 * Fee information
 * @export
 */
declare type GetSignableOrderResponseFeeInfo = FeeInfo;

/**
 * Immutable X API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface GetSignableOrderResponse
 */
interface GetSignableOrderResponse {
    /**
     * Fee-exclusive amount to buy
     * @type {string}
     * @memberof GetSignableOrderResponse
     */
    'amount_buy': string;
    /**
     * Amount to sell
     * @type {string}
     * @memberof GetSignableOrderResponse
     */
    'amount_sell': string;
    /**
     * ID of the asset to buy
     * @type {string}
     * @memberof GetSignableOrderResponse
     */
    'asset_id_buy': string;
    /**
     * ID of the asset to sell
     * @type {string}
     * @memberof GetSignableOrderResponse
     */
    'asset_id_sell': string;
    /**
     * ExpirationTimestamp in Unix time in hours. Note: will be rounded down to the nearest hour
     * @type {number}
     * @memberof GetSignableOrderResponse
     */
    'expiration_timestamp': number;
    /**
     *
     * @type {GetSignableOrderResponseFeeInfo}
     * @memberof GetSignableOrderResponse
     */
    'fee_info'?: GetSignableOrderResponseFeeInfo;
    /**
     * Nonce of the order
     * @type {number}
     * @memberof GetSignableOrderResponse
     */
    'nonce': number;
    /**
     * Hash of the payload to be signed for signable order
     * @type {string}
     * @memberof GetSignableOrderResponse
     */
    'payload_hash': string;
    /**
     * Message to sign with L1 wallet to confirm order request
     * @type {string}
     * @memberof GetSignableOrderResponse
     */
    'signable_message': string;
    /**
     * Public stark key of the created user
     * @type {string}
     * @memberof GetSignableOrderResponse
     */
    'stark_key': string;
    /**
     * ID of the vault into which the bought asset will be placed
     * @type {number}
     * @memberof GetSignableOrderResponse
     */
    'vault_id_buy': number;
    /**
     * ID of the vault to sell from
     * @type {number}
     * @memberof GetSignableOrderResponse
     */
    'vault_id_sell': number;
}

/**
 * Immutable X API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @interface GetSignableRegistrationOffchainResponse
 */
interface GetSignableRegistrationOffchainResponse {
    /**
     * Hash of the payload to be signed for user registration offchain
     * @type {string}
     * @memberof GetSignableRegistrationOffchainResponse
     */
    'payload_hash': string;
    /**
     * Message to sign with L1 wallet to register user offchain
     * @type {string}
     * @memberof GetSignableRegistrationOffchainResponse
     */
    'signable_message': string;
}

/**
 * Immutable X API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @interface GetSignableRegistrationRequest
 */
interface GetSignableRegistrationRequest {
    /**
     * Ether key of user
     * @type {string}
     * @memberof GetSignableRegistrationRequest
     */
    'ether_key': string;
    /**
     * Public stark key of the user
     * @type {string}
     * @memberof GetSignableRegistrationRequest
     */
    'stark_key': string;
}

/**
 * Immutable X API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @interface GetSignableRegistrationResponse
 */
interface GetSignableRegistrationResponse {
    /**
     * Signature from authorised operator
     * @type {string}
     * @memberof GetSignableRegistrationResponse
     */
    'operator_signature': string;
    /**
     * Hash of the payload to be signed for user registration
     * @type {string}
     * @memberof GetSignableRegistrationResponse
     */
    'payload_hash': string;
}

/**
 * Immutable X API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface GetSignableTradeRequest
 */
interface GetSignableTradeRequest {
    /**
     * ExpirationTimestamp in Unix time in hours. Note: will be rounded down to the nearest hour
     * @type {number}
     * @memberof GetSignableTradeRequest
     */
    'expiration_timestamp'?: number;
    /**
     * Inclusion of either maker or taker fees
     * @type {Array<FeeEntry>}
     * @memberof GetSignableTradeRequest
     */
    'fees'?: Array<FeeEntry>;
    /**
     * The ID of the maker order involved
     * @type {number}
     * @memberof GetSignableTradeRequest
     */
    'order_id': number;
    /**
     * Ethereum address of the submitting user
     * @type {string}
     * @memberof GetSignableTradeRequest
     */
    'user': string;
}

/**
 * Immutable X API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 * @type GetSignableTradeResponseFeeInfo
 * Fee information
 * @export
 */
declare type GetSignableTradeResponseFeeInfo = FeeInfo;

/**
 * Immutable X API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface GetSignableTradeResponse
 */
interface GetSignableTradeResponse {
    /**
     * Amount to buy
     * @type {string}
     * @memberof GetSignableTradeResponse
     */
    'amount_buy': string;
    /**
     * Amount to sell
     * @type {string}
     * @memberof GetSignableTradeResponse
     */
    'amount_sell': string;
    /**
     * ID of the asset to buy
     * @type {string}
     * @memberof GetSignableTradeResponse
     */
    'asset_id_buy': string;
    /**
     * ID of the asset to sell
     * @type {string}
     * @memberof GetSignableTradeResponse
     */
    'asset_id_sell': string;
    /**
     * ExpirationTimestamp in Unix time in hours. Note: will be rounded down to the nearest hour
     * @type {number}
     * @memberof GetSignableTradeResponse
     */
    'expiration_timestamp': number;
    /**
     *
     * @type {GetSignableTradeResponseFeeInfo}
     * @memberof GetSignableTradeResponse
     */
    'fee_info'?: GetSignableTradeResponseFeeInfo;
    /**
     * Nonce of the order
     * @type {number}
     * @memberof GetSignableTradeResponse
     */
    'nonce': number;
    /**
     * Payload Hash
     * @type {string}
     * @memberof GetSignableTradeResponse
     */
    'payload_hash': string;
    /**
     * Message to sign with L1 wallet to confirm trade request
     * @type {string}
     * @memberof GetSignableTradeResponse
     */
    'signable_message': string;
    /**
     * Public stark key of the created user
     * @type {string}
     * @memberof GetSignableTradeResponse
     */
    'stark_key': string;
    /**
     * ID of the vault into which the bought asset will be placed
     * @type {number}
     * @memberof GetSignableTradeResponse
     */
    'vault_id_buy': number;
    /**
     * ID of the vault to sell from
     * @type {number}
     * @memberof GetSignableTradeResponse
     */
    'vault_id_sell': number;
}

/**
 * Immutable X API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface SignableTransferDetails
 */
interface SignableTransferDetails {
    /**
     * Amount of the token to transfer
     * @type {string}
     * @memberof SignableTransferDetails
     */
    'amount': string;
    /**
     * Ethereum address of the receiving user
     * @type {string}
     * @memberof SignableTransferDetails
     */
    'receiver': string;
    /**
     *
     * @type {SignableToken}
     * @memberof SignableTransferDetails
     */
    'token': SignableToken;
}

/**
 * Immutable X API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface GetSignableTransferRequest
 */
interface GetSignableTransferRequest {
    /**
     * Ethereum address of the transferring user
     * @type {string}
     * @memberof GetSignableTransferRequest
     */
    'sender_ether_key': string;
    /**
     * List of signable transfer details
     * @type {Array<SignableTransferDetails>}
     * @memberof GetSignableTransferRequest
     */
    'signable_requests': Array<SignableTransferDetails>;
}

/**
 * Immutable X API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface GetSignableTransferRequestV1
 */
interface GetSignableTransferRequestV1 {
    /**
     * Amount of the token to transfer
     * @type {string}
     * @memberof GetSignableTransferRequestV1
     */
    'amount': string;
    /**
     * Ethereum address of the receiving user
     * @type {string}
     * @memberof GetSignableTransferRequestV1
     */
    'receiver': string;
    /**
     * Ethereum address of the transferring user
     * @type {string}
     * @memberof GetSignableTransferRequestV1
     */
    'sender': string;
    /**
     *
     * @type {SignableToken}
     * @memberof GetSignableTransferRequestV1
     */
    'token': SignableToken;
}

/**
 * Immutable X API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface SignableTransferResponseDetails
 */
interface SignableTransferResponseDetails {
    /**
     * Amount of the asset being transferred
     * @type {string}
     * @memberof SignableTransferResponseDetails
     */
    'amount': string;
    /**
     * ID of the asset being transferred
     * @type {string}
     * @memberof SignableTransferResponseDetails
     */
    'asset_id': string;
    /**
     * Timestamp when this transfer will expire
     * @type {number}
     * @memberof SignableTransferResponseDetails
     */
    'expiration_timestamp': number;
    /**
     * Nonce of the transfer
     * @type {number}
     * @memberof SignableTransferResponseDetails
     */
    'nonce': number;
    /**
     * Hash of the payload to be signed for transfer
     * @type {string}
     * @memberof SignableTransferResponseDetails
     */
    'payload_hash': string;
    /**
     * Receiver of the transfer
     * @type {string}
     * @memberof SignableTransferResponseDetails
     */
    'receiver_stark_key': string;
    /**
     * ID of the vault being transferred to
     * @type {number}
     * @memberof SignableTransferResponseDetails
     */
    'receiver_vault_id': number;
    /**
     * ID of the vault being transferred from
     * @type {number}
     * @memberof SignableTransferResponseDetails
     */
    'sender_vault_id': number;
    /**
     *
     * @type {SignableToken}
     * @memberof SignableTransferResponseDetails
     */
    'token': SignableToken;
}

/**
 * Immutable X API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface GetSignableTransferResponse
 */
interface GetSignableTransferResponse {
    /**
     * Sender of the transfer
     * @type {string}
     * @memberof GetSignableTransferResponse
     */
    'sender_stark_key': string;
    /**
     * Message to sign with L1 wallet to confirm transfer request
     * @type {string}
     * @memberof GetSignableTransferResponse
     */
    'signable_message': string;
    /**
     * List of transfer responses without the sender stark key
     * @type {Array<SignableTransferResponseDetails>}
     * @memberof GetSignableTransferResponse
     */
    'signable_responses': Array<SignableTransferResponseDetails>;
}

/**
 * Immutable X API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @interface GetSignableTransferResponseV1
 */
interface GetSignableTransferResponseV1 {
    /**
     * Amount of the asset being transferred
     * @type {string}
     * @memberof GetSignableTransferResponseV1
     */
    'amount': string;
    /**
     * ID of the asset being transferred
     * @type {string}
     * @memberof GetSignableTransferResponseV1
     */
    'asset_id': string;
    /**
     * Token in request to match in SDK implementation
     * @type {number}
     * @memberof GetSignableTransferResponseV1
     */
    'expiration_timestamp': number;
    /**
     * Nonce of the transfer
     * @type {number}
     * @memberof GetSignableTransferResponseV1
     */
    'nonce': number;
    /**
     * Hash of the payload
     * @type {string}
     * @memberof GetSignableTransferResponseV1
     */
    'payload_hash': string;
    /**
     * Receiver of the transfer
     * @type {string}
     * @memberof GetSignableTransferResponseV1
     */
    'receiver_stark_key': string;
    /**
     * ID of the vault being transferred to
     * @type {number}
     * @memberof GetSignableTransferResponseV1
     */
    'receiver_vault_id': number;
    /**
     * Sender of the transfer
     * @type {string}
     * @memberof GetSignableTransferResponseV1
     */
    'sender_stark_key'?: string;
    /**
     * ID of the vault being transferred from
     * @type {number}
     * @memberof GetSignableTransferResponseV1
     */
    'sender_vault_id': number;
    /**
     * Message to sign with L1 wallet to confirm transfer request
     * @type {string}
     * @memberof GetSignableTransferResponseV1
     */
    'signable_message': string;
}

/**
 * Immutable X API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface GetSignableWithdrawalRequest
 */
interface GetSignableWithdrawalRequest {
    /**
     * Amount of the token to withdraw
     * @type {string}
     * @memberof GetSignableWithdrawalRequest
     */
    'amount': string;
    /**
     *
     * @type {SignableToken}
     * @memberof GetSignableWithdrawalRequest
     */
    'token': SignableToken;
    /**
     * Ethereum address of the user who is making this withdrawal
     * @type {string}
     * @memberof GetSignableWithdrawalRequest
     */
    'user': string;
}

/**
 * Immutable X API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @interface GetSignableWithdrawalResponse
 */
interface GetSignableWithdrawalResponse {
    /**
     * Amount of the token we are withdrawing
     * @type {string}
     * @memberof GetSignableWithdrawalResponse
     */
    'amount': string;
    /**
     * ID of the asset to be withdrawn
     * @type {string}
     * @memberof GetSignableWithdrawalResponse
     */
    'asset_id': string;
    /**
     * Nonce of this transaction
     * @type {number}
     * @memberof GetSignableWithdrawalResponse
     */
    'nonce': number;
    /**
     * Encoded payload hash
     * @type {string}
     * @memberof GetSignableWithdrawalResponse
     */
    'payload_hash': string;
    /**
     * Message to sign with L1 wallet to verity withdrawal request
     * @type {string}
     * @memberof GetSignableWithdrawalResponse
     */
    'signable_message': string;
    /**
     * Public stark key of this user
     * @type {string}
     * @memberof GetSignableWithdrawalResponse
     */
    'stark_key': string;
    /**
     * ID of the vault we are withdrawing from
     * @type {number}
     * @memberof GetSignableWithdrawalResponse
     */
    'vault_id': number;
}

/**
 * Immutable X API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface GetTransactionsResponse
 */
interface GetTransactionsResponse {
    /**
     * Generated cursor returned by previous query
     * @type {string}
     * @memberof GetTransactionsResponse
     */
    'cursor'?: string;
    /**
     * Remaining results flag. 1: there are remaining results matching this query, 0: no remaining results
     * @type {number}
     * @memberof GetTransactionsResponse
     */
    'remaining'?: number;
    /**
     * Transactions matching query parameters
     * @type {Array<Exchange>}
     * @memberof GetTransactionsResponse
     */
    'result'?: Array<Exchange>;
}

/**
 * Immutable X API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @interface GetUsersApiResponse
 */
interface GetUsersApiResponse {
    /**
     * Accounts
     * @type {Array<string>}
     * @memberof GetUsersApiResponse
     */
    'accounts': Array<string>;
}

/**
 * Immutable X API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface ListAssetsResponse
 */
interface ListAssetsResponse {
    /**
     * Generated cursor returned by previous query
     * @type {string}
     * @memberof ListAssetsResponse
     */
    'cursor': string;
    /**
     * Remaining results flag. 1: there are remaining results matching this query, 0: no remaining results
     * @type {number}
     * @memberof ListAssetsResponse
     */
    'remaining': number;
    /**
     * Assets matching query parameters
     * @type {Array<AssetWithOrders>}
     * @memberof ListAssetsResponse
     */
    'result': Array<AssetWithOrders>;
}

/**
 * Immutable X API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface ListBalancesResponse
 */
interface ListBalancesResponse {
    /**
     * Generated cursor returned by previous query
     * @type {string}
     * @memberof ListBalancesResponse
     */
    'cursor': string;
    /**
     * Remaining results flag. 1: there are remaining results matching this query, 0: no remaining results
     * @type {number}
     * @memberof ListBalancesResponse
     */
    'remaining': number;
    /**
     * Dictionary of tokens
     * @type {Array<Balance>}
     * @memberof ListBalancesResponse
     */
    'result': Array<Balance>;
}

/**
 * Immutable X API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface ListCollectionsResponse
 */
interface ListCollectionsResponse {
    /**
     * Generated cursor returned by previous query
     * @type {string}
     * @memberof ListCollectionsResponse
     */
    'cursor': string;
    /**
     * Remaining results flag. 1: there are remaining results matching this query, 0: no remaining results
     * @type {number}
     * @memberof ListCollectionsResponse
     */
    'remaining': number;
    /**
     * Collections matching query parameters
     * @type {Array<Collection>}
     * @memberof ListCollectionsResponse
     */
    'result': Array<Collection>;
}

/**
 * Immutable X API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface ListDepositsResponse
 */
interface ListDepositsResponse {
    /**
     * Generated cursor returned by previous query
     * @type {string}
     * @memberof ListDepositsResponse
     */
    'cursor': string;
    /**
     * Remaining results flag. 1: there are remaining results matching this query, 0: no remaining results
     * @type {number}
     * @memberof ListDepositsResponse
     */
    'remaining': number;
    /**
     * Deposits matching query parameters
     * @type {Array<Deposit>}
     * @memberof ListDepositsResponse
     */
    'result': Array<Deposit>;
}

/**
 * Immutable X API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface Mint
 */
interface Mint {
    /**
     * Fee details
     * @type {Array<Fee>}
     * @memberof Mint
     */
    'fees'?: Array<Fee>;
    /**
     * Status of this mint
     * @type {string}
     * @memberof Mint
     */
    'status': string;
    /**
     * Timestamp this mint was initiated
     * @type {string}
     * @memberof Mint
     */
    'timestamp': string;
    /**
     *
     * @type {Token}
     * @memberof Mint
     */
    'token': Token;
    /**
     * Sequential ID of transaction in Immutable X
     * @type {number}
     * @memberof Mint
     */
    'transaction_id': number;
    /**
     * Ethereum address of the user to whom the asset has been minted
     * @type {string}
     * @memberof Mint
     */
    'user': string;
}

/**
 * Immutable X API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface ListMintsResponse
 */
interface ListMintsResponse {
    /**
     * Generated cursor returned by previous query
     * @type {string}
     * @memberof ListMintsResponse
     */
    'cursor': string;
    /**
     * Remaining results flag. 1: there are remaining results matching this query, 0: no remaining results
     * @type {number}
     * @memberof ListMintsResponse
     */
    'remaining': number;
    /**
     * Mints matching query parameters
     * @type {Array<Mint>}
     * @memberof ListMintsResponse
     */
    'result': Array<Mint>;
}

/**
 * Immutable X API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 * @type OrderBuy
 * Details of the asset being bought
 * @export
 */
declare type OrderBuy = Token;

/**
 * Immutable X API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 * @type OrderSell
 * Details of the asset being sold
 * @export
 */
declare type OrderSell = Token;

/**
 * Immutable X API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface Order
 */
interface Order {
    /**
     * Amount of the asset already sold by this order
     * @type {string}
     * @memberof Order
     */
    'amount_sold': string | null;
    /**
     *
     * @type {OrderBuy}
     * @memberof Order
     */
    'buy': OrderBuy;
    /**
     * Expiration timestamp of this order
     * @type {string}
     * @memberof Order
     */
    'expiration_timestamp': string | null;
    /**
     * Fee information for the order
     * @type {Array<OrderFeeInfo>}
     * @memberof Order
     */
    'fees'?: Array<OrderFeeInfo>;
    /**
     * ID of the order
     * @type {number}
     * @memberof Order
     */
    'order_id': number;
    /**
     *
     * @type {OrderSell}
     * @memberof Order
     */
    'sell': OrderSell;
    /**
     * Status of the order
     * @type {string}
     * @memberof Order
     */
    'status': string;
    /**
     * Timestamp this order was created
     * @type {string}
     * @memberof Order
     */
    'timestamp': string | null;
    /**
     * Updated timestamp of this order
     * @type {string}
     * @memberof Order
     */
    'updated_timestamp': string | null;
    /**
     * Ethereum address of the user who submitted the order
     * @type {string}
     * @memberof Order
     */
    'user': string;
}

/**
 * Immutable X API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface ListOrdersResponse
 */
interface ListOrdersResponse {
    /**
     * Generated cursor returned by previous query
     * @type {string}
     * @memberof ListOrdersResponse
     */
    'cursor': string;
    /**
     * Remaining results flag. 1: there are remaining results matching this query, 0: no remaining results
     * @type {number}
     * @memberof ListOrdersResponse
     */
    'remaining': number;
    /**
     * Orders matching query parameters
     * @type {Array<Order>}
     * @memberof ListOrdersResponse
     */
    'result': Array<Order>;
}

/**
 * Immutable X API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 * @type OrderV3Buy
 * Details of the asset being bought
 * @export
 */
declare type OrderV3Buy = Token;

/**
 * Immutable X API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface OrdersMakerTakerFee
 */
interface OrdersMakerTakerFee {
    /**
     * Number of Decimals supported the fee token
     * @type {number}
     * @memberof OrdersMakerTakerFee
     */
    'decimals'?: number;
    /**
     * Fees
     * @type {Array<OrderFeeInfo>}
     * @memberof OrdersMakerTakerFee
     */
    'fees'?: Array<OrderFeeInfo>;
    /**
     * Quantity of this asset with the sum of all fees applied to the asset
     * @type {string}
     * @memberof OrdersMakerTakerFee
     */
    'quantity_with_fees': string;
    /**
     * Symbol of the fee token
     * @type {string}
     * @memberof OrdersMakerTakerFee
     */
    'symbol'?: string;
    /**
     * Address of the ERC20 contract for the fee token
     * @type {string}
     * @memberof OrdersMakerTakerFee
     */
    'token_address'?: string;
    /**
     * Type of the fee token (ETH/ERC20)
     * @type {string}
     * @memberof OrdersMakerTakerFee
     */
    'token_type'?: string;
}

/**
 * Immutable X API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 * @type OrderV3MakerFees
 * MakerFees is the information about the fees that needs to be paid by the maker (liquidity)
 * @export
 */
declare type OrderV3MakerFees = OrdersMakerTakerFee;

/**
 * Immutable X API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 * @type OrderV3Sell
 * Details of the asset being sold
 * @export
 */
declare type OrderV3Sell = Token;

/**
 * Immutable X API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 * @type OrderV3TakerFees
 * TakerFees is the information about the fees that needs to be paid by the taker (liquidity)
 * @export
 */
declare type OrderV3TakerFees = OrdersMakerTakerFee;

/**
 * Immutable X API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface OrderV3
 */
interface OrderV3 {
    /**
     * Amount of the asset already sold by this order
     * @type {string}
     * @memberof OrderV3
     */
    'amount_sold': string | null;
    /**
     *
     * @type {OrderV3Buy}
     * @memberof OrderV3
     */
    'buy': OrderV3Buy;
    /**
     * Expiration timestamp of this order
     * @type {string}
     * @memberof OrderV3
     */
    'expiration_timestamp': string | null;
    /**
     * [DEPRECATED] Fee information for the order. Replaced by maker_fees / taker_fees depending on the type of order. Refer https://docs.x.immutable.com/docs/maker-taker-fees/#new-maker-taker-fields-and-the-deprecation-of-quantity_with_fees-in-buy-and-sell.
     * @type {Array<OrderFeeInfo>}
     * @memberof OrderV3
     */
    'fees'?: Array<OrderFeeInfo>;
    /**
     *
     * @type {OrderV3MakerFees}
     * @memberof OrderV3
     */
    'maker_fees'?: OrderV3MakerFees;
    /**
     * MakerTakerType
     * @type {string}
     * @memberof OrderV3
     */
    'maker_taker_type'?: string;
    /**
     * ID of the order
     * @type {number}
     * @memberof OrderV3
     */
    'order_id': number;
    /**
     *
     * @type {OrderV3Sell}
     * @memberof OrderV3
     */
    'sell': OrderV3Sell;
    /**
     * Status of the order
     * @type {string}
     * @memberof OrderV3
     */
    'status': string;
    /**
     *
     * @type {OrderV3TakerFees}
     * @memberof OrderV3
     */
    'taker_fees'?: OrderV3TakerFees;
    /**
     * Timestamp this order was created
     * @type {string}
     * @memberof OrderV3
     */
    'timestamp': string | null;
    /**
     * Updated timestamp of this order
     * @type {string}
     * @memberof OrderV3
     */
    'updated_timestamp': string | null;
    /**
     * Ethereum address of the user who submitted the order
     * @type {string}
     * @memberof OrderV3
     */
    'user': string;
}

/**
 * Immutable X API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface ListOrdersResponseV3
 */
interface ListOrdersResponseV3 {
    /**
     * Generated cursor returned by previous query
     * @type {string}
     * @memberof ListOrdersResponseV3
     */
    'cursor': string;
    /**
     * Remaining results flag. 1: there are remaining results matching this query, 0: no remaining results
     * @type {number}
     * @memberof ListOrdersResponseV3
     */
    'remaining': number;
    /**
     * Orders matching query parameters
     * @type {Array<OrderV3>}
     * @memberof ListOrdersResponseV3
     */
    'result': Array<OrderV3>;
}

/**
 * Immutable X API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @interface TokenDetails
 */
interface TokenDetails {
    /**
     * Number of decimals for token
     * @type {string}
     * @memberof TokenDetails
     */
    'decimals': string;
    /**
     * Url for the icon of the token
     * @type {string}
     * @memberof TokenDetails
     */
    'image_url': string;
    /**
     * Full name of the token (e.g. Ether)
     * @type {string}
     * @memberof TokenDetails
     */
    'name': string;
    /**
     * Quantum for token
     * @type {string}
     * @memberof TokenDetails
     */
    'quantum': string;
    /**
     * Ticker symbol for token (e.g. ETH/USDC/IMX)
     * @type {string}
     * @memberof TokenDetails
     */
    'symbol': string;
    /**
     * Address of the ERC721 contract
     * @type {string}
     * @memberof TokenDetails
     */
    'token_address': string;
}

/**
 * Immutable X API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface ListTokensResponse
 */
interface ListTokensResponse {
    /**
     * Generated cursor returned by previous query
     * @type {string}
     * @memberof ListTokensResponse
     */
    'cursor': string;
    /**
     * Tokens matching query parameters
     * @type {Array<TokenDetails>}
     * @memberof ListTokensResponse
     */
    'result': Array<TokenDetails>;
}

/**
 * Immutable X API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @interface TradeSide
 */
interface TradeSide {
    /**
     * The ID of the order involved in the trade
     * @type {number}
     * @memberof TradeSide
     */
    'order_id': number;
    /**
     * The amount of that order\'s asset this trade sold
     * @type {string}
     * @memberof TradeSide
     */
    'sold': string;
    /**
     * The contract address of the token that this trade sold
     * @type {string}
     * @memberof TradeSide
     */
    'token_address'?: string;
    /**
     * The ID of the token that this trade sold
     * @type {string}
     * @memberof TradeSide
     */
    'token_id'?: string;
    /**
     * The type of the token that this trade sold
     * @type {string}
     * @memberof TradeSide
     */
    'token_type': string;
}

/**
 * Immutable X API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 * @type TradeA
 * Side A of this trade (the buy order)
 * @export
 */
declare type TradeA = TradeSide;

/**
 * Immutable X API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 * @type TradeB
 * Side B of this trade (the sell order)
 * @export
 */
declare type TradeB = TradeSide;

/**
 * Immutable X API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface Trade
 */
interface Trade {
    /**
     *
     * @type {TradeA}
     * @memberof Trade
     */
    'a': TradeA;
    /**
     *
     * @type {TradeB}
     * @memberof Trade
     */
    'b': TradeB;
    /**
     * Status of this trade
     * @type {string}
     * @memberof Trade
     */
    'status': string;
    /**
     * Time this trade occurred
     * @type {string}
     * @memberof Trade
     */
    'timestamp': string | null;
    /**
     * Sequential ID of this trade within Immutable X
     * @type {number}
     * @memberof Trade
     */
    'transaction_id': number;
}

/**
 * Immutable X API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface ListTradesResponse
 */
interface ListTradesResponse {
    /**
     * Generated cursor returned by previous query
     * @type {string}
     * @memberof ListTradesResponse
     */
    'cursor': string;
    /**
     * Remaining results flag. 1: there are remaining results matching this query, 0: no remaining results
     * @type {number}
     * @memberof ListTradesResponse
     */
    'remaining': number;
    /**
     * Trades matching query parameters
     * @type {Array<Trade>}
     * @memberof ListTradesResponse
     */
    'result': Array<Trade>;
}

/**
 * Immutable X API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface Transfer
 */
interface Transfer {
    /**
     * Ethereum address of the user who received this transfer
     * @type {string}
     * @memberof Transfer
     */
    'receiver': string;
    /**
     * Status of the transaction
     * @type {string}
     * @memberof Transfer
     */
    'status': string;
    /**
     * Timestamp of the transfer
     * @type {string}
     * @memberof Transfer
     */
    'timestamp': string | null;
    /**
     *
     * @type {Token}
     * @memberof Transfer
     */
    'token': Token;
    /**
     * Sequential transaction ID
     * @type {number}
     * @memberof Transfer
     */
    'transaction_id': number;
    /**
     * Ethereum address of the user  who submitted this transfer
     * @type {string}
     * @memberof Transfer
     */
    'user': string;
}

/**
 * Immutable X API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface ListTransfersResponse
 */
interface ListTransfersResponse {
    /**
     * Generated cursor returned by previous query
     * @type {string}
     * @memberof ListTransfersResponse
     */
    'cursor': string;
    /**
     * Remaining results flag. 1: there are remaining results matching this query, 0: no remaining results
     * @type {number}
     * @memberof ListTransfersResponse
     */
    'remaining': number;
    /**
     * Transfers matching query parameters
     * @type {Array<Transfer>}
     * @memberof ListTransfersResponse
     */
    'result': Array<Transfer>;
}

/**
 * Immutable X API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface Withdrawal
 */
interface Withdrawal {
    /**
     * Status of the on-chain batch confirmation for this withdrawal
     * @type {string}
     * @memberof Withdrawal
     */
    'rollup_status': string;
    /**
     * Ethereum address of the user who requested this withdrawal
     * @type {string}
     * @memberof Withdrawal
     */
    'sender': string;
    /**
     * Status of this withdrawal
     * @type {string}
     * @memberof Withdrawal
     */
    'status': string;
    /**
     * Time when this withdrawal was initiated
     * @type {string}
     * @memberof Withdrawal
     */
    'timestamp': string;
    /**
     *
     * @type {Token}
     * @memberof Withdrawal
     */
    'token': Token;
    /**
     * Sequential ID of this transaction
     * @type {number}
     * @memberof Withdrawal
     */
    'transaction_id': number;
    /**
     * Withdrawal has been transferred to user\'s Layer 1 wallet
     * @type {boolean}
     * @memberof Withdrawal
     */
    'withdrawn_to_wallet': boolean;
}

/**
 * Immutable X API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface ListWithdrawalsResponse
 */
interface ListWithdrawalsResponse {
    /**
     * Generated cursor returned by previous query
     * @type {string}
     * @memberof ListWithdrawalsResponse
     */
    'cursor': string;
    /**
     * Remaining results flag. 1: there are remaining results matching this query, 0: no remaining results
     * @type {number}
     * @memberof ListWithdrawalsResponse
     */
    'remaining': number;
    /**
     * Withdrawals matching query parameters
     * @type {Array<Withdrawal>}
     * @memberof ListWithdrawalsResponse
     */
    'result': Array<Withdrawal>;
}

/**
 * Immutable X API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @interface MetadataSchemaProperty
 */
interface MetadataSchemaProperty {
    /**
     * Sets the metadata as filterable
     * @type {boolean}
     * @memberof MetadataSchemaProperty
     */
    'filterable': boolean;
    /**
     * Name of the metadata key
     * @type {string}
     * @memberof MetadataSchemaProperty
     */
    'name': string;
    /**
     * Type of the metadata. Values: \"enum\", \"text\", \"boolean\", \"continuous\", \"discrete\" | Default: \"text\". Src: https://docs.x.immutable.com/docs/asset-metadata#property-type-mapping
     * @type {string}
     * @memberof MetadataSchemaProperty
     */
    'type': string;
}

/**
 * Immutable X API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @interface MintFee
 */
interface MintFee {
    /**
     * Fee percentage
     * @type {number}
     * @memberof MintFee
     */
    'percentage': number;
    /**
     * Recipient wallet address
     * @type {string}
     * @memberof MintFee
     */
    'recipient': string;
}

/**
 * Immutable X API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface MintTokenDataV2
 */
interface MintTokenDataV2 {
    /**
     * Token metadata blueprint
     * @type {string}
     * @memberof MintTokenDataV2
     */
    'blueprint': string;
    /**
     * Token ID Note: While the Token ID is required to be a string, it still needs to be a valid uint256 as per the ERC-721 token standard.
     * @type {string}
     * @memberof MintTokenDataV2
     */
    'id': string;
    /**
     * List of mint fees
     * @type {Array<MintFee>}
     * @memberof MintTokenDataV2
     */
    'royalties'?: Array<MintFee>;
}

/**
 * Immutable X API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface MintUser
 */
interface MintUser {
    /**
     * List of Mint tokens
     * @type {Array<MintTokenDataV2>}
     * @memberof MintUser
     */
    'tokens': Array<MintTokenDataV2>;
    /**
     * User wallet address
     * @type {string}
     * @memberof MintUser
     */
    'user': string;
}

/**
 * Immutable X API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface MintRequest
 */
interface MintRequest {
    /**
     * Signature from authorised minter
     * @type {string}
     * @memberof MintRequest
     */
    'auth_signature': string;
    /**
     * minting contract
     * @type {string}
     * @memberof MintRequest
     */
    'contract_address': string;
    /**
     * Global contract-level royalty fees
     * @type {Array<MintFee>}
     * @memberof MintRequest
     */
    'royalties'?: Array<MintFee>;
    /**
     * Users to mint to
     * @type {Array<MintUser>}
     * @memberof MintRequest
     */
    'users': Array<MintUser>;
}

/**
 * Immutable X API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @interface MintResultDetails
 */
interface MintResultDetails {
    /**
     * Contract address of this token
     * @type {string}
     * @memberof MintResultDetails
     */
    'contract_address': string;
    /**
     * IMX ID of this token
     * @type {string}
     * @memberof MintResultDetails
     */
    'token_id': string;
    /**
     * Mint Transaction ID
     * @type {number}
     * @memberof MintResultDetails
     */
    'tx_id': number;
}

/**
 * Immutable X API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface MintTokensResponse
 */
interface MintTokensResponse {
    /**
     * List of mint result details
     * @type {Array<MintResultDetails>}
     * @memberof MintTokensResponse
     */
    'results': Array<MintResultDetails>;
}

/**
 * Immutable X API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @interface MintableTokenDetails
 */
interface MintableTokenDetails {
    /**
     * Blueprint of this token
     * @type {string}
     * @memberof MintableTokenDetails
     */
    'blueprint': string;
    /**
     * ID provided by the client for this token
     * @type {string}
     * @memberof MintableTokenDetails
     */
    'client_token_id': string;
    /**
     * IMX Id of this token
     * @type {string}
     * @memberof MintableTokenDetails
     */
    'token_id': string;
}

/**
 * Immutable X API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @interface NftprimarytransactionWidgetParams
 */
interface NftprimarytransactionWidgetParams {
    /**
     * enums(light, dark)
     * @type {string}
     * @memberof NftprimarytransactionWidgetParams
     */
    'theme'?: string;
}

/**
 * Immutable X API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface NftprimarytransactionCreateAPIRequest
 */
interface NftprimarytransactionCreateAPIRequest {
    /**
     * Contract address of the asset to be created
     * @type {string}
     * @memberof NftprimarytransactionCreateAPIRequest
     */
    'contract_address'?: string;
    /**
     * Temporary asset id
     * @type {string}
     * @memberof NftprimarytransactionCreateAPIRequest
     */
    'offer_id'?: string;
    /**
     * Provider name
     * @type {string}
     * @memberof NftprimarytransactionCreateAPIRequest
     */
    'provider'?: string;
    /**
     * Ethereum address of the user who wants to create transaction
     * @type {string}
     * @memberof NftprimarytransactionCreateAPIRequest
     */
    'user_wallet_address'?: string;
    /**
     *
     * @type {NftprimarytransactionWidgetParams}
     * @memberof NftprimarytransactionCreateAPIRequest
     */
    'widget'?: NftprimarytransactionWidgetParams;
}

/**
 * Immutable X API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @interface NftprimarytransactionCreateResponse
 */
interface NftprimarytransactionCreateResponse {
    /**
     * Contract address of the asset to be created
     * @type {string}
     * @memberof NftprimarytransactionCreateResponse
     */
    'contract_address'?: string;
    /**
     * Temporary asset id. Might be a token id if the token id is known or a generic description if it\'s not
     * @type {string}
     * @memberof NftprimarytransactionCreateResponse
     */
    'offer_id'?: string;
    /**
     * Provider name
     * @type {string}
     * @memberof NftprimarytransactionCreateResponse
     */
    'provider'?: string;
    /**
     * Wallet address that will receive the payment (in crypto) from the checkout provider for the minted NFT
     * @type {string}
     * @memberof NftprimarytransactionCreateResponse
     */
    'seller_wallet_address'?: string;
    /**
     * ID of the token that has been successfully minted - should be the same as `offer_id`
     * @type {string}
     * @memberof NftprimarytransactionCreateResponse
     */
    'token_id'?: string;
    /**
     * Transaction id
     * @type {string}
     * @memberof NftprimarytransactionCreateResponse
     */
    'transaction_id'?: string;
    /**
     * NFT purchase URL given by the checkout provider that the user can use to complete payment
     * @type {string}
     * @memberof NftprimarytransactionCreateResponse
     */
    'url'?: string;
    /**
     * Ethereum address of the user who wants to create transaction
     * @type {string}
     * @memberof NftprimarytransactionCreateResponse
     */
    'user_wallet_address'?: string;
}

/**
 * Immutable X API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @interface NftprimarytransactionGetResponse
 */
interface NftprimarytransactionGetResponse {
    /**
     * Contract address of the asset
     * @type {string}
     * @memberof NftprimarytransactionGetResponse
     */
    'contract_address'?: string;
    /**
     * Temporary asset id. Might be a token id if the token id is known or a generic description if it\'s not
     * @type {string}
     * @memberof NftprimarytransactionGetResponse
     */
    'offer_id'?: string;
    /**
     * Provider name
     * @type {string}
     * @memberof NftprimarytransactionGetResponse
     */
    'provider'?: string;
    /**
     * Ethereum address of the seller
     * @type {string}
     * @memberof NftprimarytransactionGetResponse
     */
    'seller_wallet_address'?: string;
    /**
     * Transaction status enums(created, waitingPayment, pending, completed, failed)
     * @type {string}
     * @memberof NftprimarytransactionGetResponse
     */
    'status'?: string;
    /**
     * ID of the token that has been successfully minted - might or not be the same as `offer_id`
     * @type {string}
     * @memberof NftprimarytransactionGetResponse
     */
    'token_id'?: string;
    /**
     * Transaction id
     * @type {string}
     * @memberof NftprimarytransactionGetResponse
     */
    'transaction_id'?: string;
    /**
     * Wallet address that receives the minted NFT
     * @type {string}
     * @memberof NftprimarytransactionGetResponse
     */
    'user_wallet_address'?: string;
}

/**
 * Immutable X API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @interface NftprimarytransactionTransactionData
 */
interface NftprimarytransactionTransactionData {
    /**
     * Contract address of the asset
     * @type {string}
     * @memberof NftprimarytransactionTransactionData
     */
    'contract_address'?: string;
    /**
     * Timestamp when the transaction was created
     * @type {string}
     * @memberof NftprimarytransactionTransactionData
     */
    'created_at'?: string;
    /**
     * External transaction id
     * @type {string}
     * @memberof NftprimarytransactionTransactionData
     */
    'external_id'?: string;
    /**
     * Fees to pay on this transaction
     * @type {number}
     * @memberof NftprimarytransactionTransactionData
     */
    'fees_amount'?: number;
    /**
     * Amount of the currency specified in `from_currency` that the buyer paid for the transaction
     * @type {number}
     * @memberof NftprimarytransactionTransactionData
     */
    'from_amount'?: number;
    /**
     * Currency that the buyer used for the transaction
     * @type {string}
     * @memberof NftprimarytransactionTransactionData
     */
    'from_currency'?: string;
    /**
     * Minting transaction ID - see mintTokens response
     * @type {string}
     * @memberof NftprimarytransactionTransactionData
     */
    'mint_id'?: string;
    /**
     * Mint status
     * @type {string}
     * @memberof NftprimarytransactionTransactionData
     */
    'mint_status'?: string;
    /**
     * Temporary asset id. Might be a token id if the token id is known or a generic description if it\'s not
     * @type {string}
     * @memberof NftprimarytransactionTransactionData
     */
    'offer_id'?: string;
    /**
     * Provider name
     * @type {string}
     * @memberof NftprimarytransactionTransactionData
     */
    'provider'?: string;
    /**
     * Ethereum address of the seller
     * @type {string}
     * @memberof NftprimarytransactionTransactionData
     */
    'seller_wallet_address'?: string;
    /**
     * Transaction status enums(created, waitingPayment, pending, completed, failed)
     * @type {string}
     * @memberof NftprimarytransactionTransactionData
     */
    'status'?: string;
    /**
     * Amount of the currency specified in `to_currency` that the seller received from the checkout provider for the transaction
     * @type {number}
     * @memberof NftprimarytransactionTransactionData
     */
    'to_amount'?: number;
    /**
     * Currency (crypto) that the checkout provider sent to the seller for the transaction
     * @type {string}
     * @memberof NftprimarytransactionTransactionData
     */
    'to_currency'?: string;
    /**
     * ID of the token that has been successfully minted - should be the same as `offer_id`
     * @type {string}
     * @memberof NftprimarytransactionTransactionData
     */
    'token_id'?: string;
    /**
     * Transaction id
     * @type {string}
     * @memberof NftprimarytransactionTransactionData
     */
    'transaction_id'?: string;
    /**
     * Timestamp when the transaction was updated
     * @type {string}
     * @memberof NftprimarytransactionTransactionData
     */
    'updated_at'?: string;
    /**
     * Wallet address that receives the minted NFT
     * @type {string}
     * @memberof NftprimarytransactionTransactionData
     */
    'user_wallet_address'?: string;
}

/**
 * Immutable X API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface NftprimarytransactionListTransactionsResponse
 */
interface NftprimarytransactionListTransactionsResponse {
    /**
     * Generated cursor returned by previous query
     * @type {string}
     * @memberof NftprimarytransactionListTransactionsResponse
     */
    'cursor'?: string;
    /**
     * Remaining results flag. 1: there are remaining results matching this query, 0: no remaining results
     * @type {number}
     * @memberof NftprimarytransactionListTransactionsResponse
     */
    'remaining'?: number;
    /**
     * Transactions matching query parameters
     * @type {Array<NftprimarytransactionTransactionData>}
     * @memberof NftprimarytransactionListTransactionsResponse
     */
    'result'?: Array<NftprimarytransactionTransactionData>;
}

/**
 * Immutable X API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @interface RegisterUserRequest
 */
interface RegisterUserRequest {
    /**
     * User email
     * @type {string}
     * @memberof RegisterUserRequest
     */
    'email'?: string;
    /**
     * Eth signature
     * @type {string}
     * @memberof RegisterUserRequest
     */
    'eth_signature': string;
    /**
     * The ether key of the user
     * @type {string}
     * @memberof RegisterUserRequest
     */
    'ether_key': string;
    /**
     * Public stark key of the user
     * @type {string}
     * @memberof RegisterUserRequest
     */
    'stark_key': string;
    /**
     * Payload signature
     * @type {string}
     * @memberof RegisterUserRequest
     */
    'stark_signature': string;
}

/**
 * Immutable X API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @interface RegisterUserResponse
 */
interface RegisterUserResponse {
    /**
     * Immutable signature authorising registration
     * @type {string}
     * @memberof RegisterUserResponse
     */
    'tx_hash': string;
}

/**
 * Immutable X API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @interface SuccessResponse
 */
interface SuccessResponse {
    /**
     *
     * @type {string}
     * @memberof SuccessResponse
     */
    'result': string;
}

/**
 * Immutable X API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 * @type TradesCreateTradeRequestFeeInfo
 * Fee details
 * @export
 */
declare type TradesCreateTradeRequestFeeInfo = FeeInfo;

/**
 * Immutable X API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface TradesCreateTradeRequest
 */
interface TradesCreateTradeRequest {
    /**
     * Amount to buy
     * @type {string}
     * @memberof TradesCreateTradeRequest
     */
    'amount_buy': string;
    /**
     * Amount to sell
     * @type {string}
     * @memberof TradesCreateTradeRequest
     */
    'amount_sell': string;
    /**
     * ID of the asset to buy
     * @type {string}
     * @memberof TradesCreateTradeRequest
     */
    'asset_id_buy': string;
    /**
     * ID of the asset to sell
     * @type {string}
     * @memberof TradesCreateTradeRequest
     */
    'asset_id_sell': string;
    /**
     * Expiration timestamp for this trade
     * @type {number}
     * @memberof TradesCreateTradeRequest
     */
    'expiration_timestamp': number;
    /**
     *
     * @type {TradesCreateTradeRequestFeeInfo}
     * @memberof TradesCreateTradeRequest
     */
    'fee_info'?: TradesCreateTradeRequestFeeInfo;
    /**
     * Fee information
     * @type {Array<FeeEntry>}
     * @memberof TradesCreateTradeRequest
     */
    'fees'?: Array<FeeEntry>;
    /**
     * [deprecated] All orders include fees since the introduction of protocol fees
     * @type {boolean}
     * @memberof TradesCreateTradeRequest
     */
    'include_fees'?: boolean;
    /**
     * Nonce of the trade
     * @type {number}
     * @memberof TradesCreateTradeRequest
     */
    'nonce': number;
    /**
     * ID of the order
     * @type {number}
     * @memberof TradesCreateTradeRequest
     */
    'order_id': number;
    /**
     * Public stark key of the user creating trade
     * @type {string}
     * @memberof TradesCreateTradeRequest
     */
    'stark_key': string;
    /**
     * Payload signature
     * @type {string}
     * @memberof TradesCreateTradeRequest
     */
    'stark_signature': string;
    /**
     * ID of the vault into which the traded asset will be placed
     * @type {number}
     * @memberof TradesCreateTradeRequest
     */
    'vault_id_buy': number;
    /**
     * ID of the vault to sell from
     * @type {number}
     * @memberof TradesCreateTradeRequest
     */
    'vault_id_sell': number;
}

/**
 * Immutable X API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @interface UpdateCollectionRequest
 */
interface UpdateCollectionRequest {
    /**
     * URL of the tile image for this collection
     * @type {string}
     * @memberof UpdateCollectionRequest
     */
    'collection_image_url'?: string;
    /**
     * Description of the collection
     * @type {string}
     * @memberof UpdateCollectionRequest
     */
    'description'?: string;
    /**
     * URL of the icon for this collection
     * @type {string}
     * @memberof UpdateCollectionRequest
     */
    'icon_url'?: string;
    /**
     * URL of the metadata for this collection
     * @type {string}
     * @memberof UpdateCollectionRequest
     */
    'metadata_api_url'?: string;
    /**
     * Name of the collection
     * @type {string}
     * @memberof UpdateCollectionRequest
     */
    'name'?: string;
}
/**
 * Request parameters for getAsset operation in AssetsApi.
 * @export
 * @interface AssetsApiGetAssetRequest
 */
interface AssetsApiGetAssetRequest {
    /**
     * Address of the ERC721 contract
     * @type {string}
     * @memberof AssetsApiGetAsset
     */
    readonly tokenAddress: string;
    /**
     * Either ERC721 token ID or internal IMX ID
     * @type {string}
     * @memberof AssetsApiGetAsset
     */
    readonly tokenId: string;
    /**
     * Set flag to include fees associated with the asset
     * @type {boolean}
     * @memberof AssetsApiGetAsset
     */
    readonly includeFees?: boolean;
}
/**
 * Request parameters for listAssets operation in AssetsApi.
 * @export
 * @interface AssetsApiListAssetsRequest
 */
interface AssetsApiListAssetsRequest {
    /**
     * Page size of the result
     * @type {number}
     * @memberof AssetsApiListAssets
     */
    readonly pageSize?: number;
    /**
     * Cursor
     * @type {string}
     * @memberof AssetsApiListAssets
     */
    readonly cursor?: string;
    /**
     * Property to sort by
     * @type {'updated_at' | 'name'}
     * @memberof AssetsApiListAssets
     */
    readonly orderBy?: 'updated_at' | 'name';
    /**
     * Direction to sort (asc/desc)
     * @type {string}
     * @memberof AssetsApiListAssets
     */
    readonly direction?: string;
    /**
     * Ethereum address of the user who owns these assets
     * @type {string}
     * @memberof AssetsApiListAssets
     */
    readonly user?: string;
    /**
     * Status of these assets
     * @type {'eth' | 'imx' | 'preparing_withdrawal' | 'withdrawable' | 'burned'}
     * @memberof AssetsApiListAssets
     */
    readonly status?: 'eth' | 'imx' | 'preparing_withdrawal' | 'withdrawable' | 'burned';
    /**
     * Name of the asset to search
     * @type {string}
     * @memberof AssetsApiListAssets
     */
    readonly name?: string;
    /**
     * URL JSON-encoded metadata filters for these assets. Javascript example: encodeURI(JSON.stringify({\&#39;proto\&#39;:[\&#39;1147\&#39;],\&#39;quality\&#39;:[\&#39;Meteorite\&#39;]}))
     * @type {string}
     * @memberof AssetsApiListAssets
     */
    readonly metadata?: string;
    /**
     * Set flag to true to fetch an array of sell order details with accepted status associated with the asset
     * @type {boolean}
     * @memberof AssetsApiListAssets
     */
    readonly sellOrders?: boolean;
    /**
     * Set flag to true to fetch an array of buy order details  with accepted status associated with the asset
     * @type {boolean}
     * @memberof AssetsApiListAssets
     */
    readonly buyOrders?: boolean;
    /**
     * Set flag to include fees associated with the asset
     * @type {boolean}
     * @memberof AssetsApiListAssets
     */
    readonly includeFees?: boolean;
    /**
     * Collection contract address
     * @type {string}
     * @memberof AssetsApiListAssets
     */
    readonly collection?: string;
    /**
     * Minimum timestamp for when these assets were last updated, in ISO 8601 UTC format. Example: \&#39;2022-05-27T00:10:22Z\&#39;
     * @type {string}
     * @memberof AssetsApiListAssets
     */
    readonly updatedMinTimestamp?: string;
    /**
     * Maximum timestamp for when these assets were last updated, in ISO 8601 UTC format. Example: \&#39;2022-05-27T00:10:22Z\&#39;
     * @type {string}
     * @memberof AssetsApiListAssets
     */
    readonly updatedMaxTimestamp?: string;
    /**
     * Comma separated string of fee percentages that are to be paired with auxiliary_fee_recipients
     * @type {string}
     * @memberof AssetsApiListAssets
     */
    readonly auxiliaryFeePercentages?: string;
    /**
     * Comma separated string of fee recipients that are to be paired with auxiliary_fee_percentages
     * @type {string}
     * @memberof AssetsApiListAssets
     */
    readonly auxiliaryFeeRecipients?: string;
}
/**
 * AssetsApi - object-oriented interface
 * @export
 * @class AssetsApi
 * @extends {BaseAPI}
 */
declare class AssetsApi extends BaseAPI {
    /**
     * Get details of an asset
     * @summary Get details of an asset
     * @param {AssetsApiGetAssetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetsApi
     */
    getAsset(requestParameters: AssetsApiGetAssetRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<Asset, any>>;
    /**
     * Get a list of assets
     * @summary Get a list of assets
     * @param {AssetsApiListAssetsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetsApi
     */
    listAssets(requestParameters?: AssetsApiListAssetsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<ListAssetsResponse, any>>;
}
/**
 * Request parameters for getBalance operation in BalancesApi.
 * @export
 * @interface BalancesApiGetBalanceRequest
 */
interface BalancesApiGetBalanceRequest {
    /**
     * Address of the owner/user
     * @type {string}
     * @memberof BalancesApiGetBalance
     */
    readonly owner: string;
    /**
     * Token address or \&#39;eth\&#39;
     * @type {string}
     * @memberof BalancesApiGetBalance
     */
    readonly address: string;
}
/**
 * Request parameters for listBalances operation in BalancesApi.
 * @export
 * @interface BalancesApiListBalancesRequest
 */
interface BalancesApiListBalancesRequest {
    /**
     * Ethereum wallet address for user
     * @type {string}
     * @memberof BalancesApiListBalances
     */
    readonly owner: string;
    /**
     * Page size of the result
     * @type {number}
     * @memberof BalancesApiListBalances
     */
    readonly pageSize?: number;
    /**
     * Cursor
     * @type {string}
     * @memberof BalancesApiListBalances
     */
    readonly cursor?: string;
    /**
     * Property to sort by
     * @type {string}
     * @memberof BalancesApiListBalances
     */
    readonly orderBy?: string;
    /**
     * Direction to sort (asc/desc)
     * @type {string}
     * @memberof BalancesApiListBalances
     */
    readonly direction?: string;
}
/**
 * BalancesApi - object-oriented interface
 * @export
 * @class BalancesApi
 * @extends {BaseAPI}
 */
declare class BalancesApi extends BaseAPI {
    /**
     * Fetches the token balances of the user
     * @summary Fetches the token balances of the user
     * @param {BalancesApiGetBalanceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BalancesApi
     */
    getBalance(requestParameters: BalancesApiGetBalanceRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<Balance, any>>;
    /**
     * Get a list of balances for given user
     * @summary Get a list of balances for given user
     * @param {BalancesApiListBalancesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BalancesApi
     */
    listBalances(requestParameters: BalancesApiListBalancesRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<ListBalancesResponse, any>>;
}
/**
 * Request parameters for createCollection operation in CollectionsApi.
 * @export
 * @interface CollectionsApiCreateCollectionRequest
 */
interface CollectionsApiCreateCollectionRequest {
    /**
     * String created by signing wallet address and timestamp. See https://docs.x.immutable.com/docs/generate-imx-signature
     * @type {string}
     * @memberof CollectionsApiCreateCollection
     */
    readonly iMXSignature: string;
    /**
     * Unix Epoc timestamp
     * @type {string}
     * @memberof CollectionsApiCreateCollection
     */
    readonly iMXTimestamp: string;
    /**
     * create a collection
     * @type {CreateCollectionRequest}
     * @memberof CollectionsApiCreateCollection
     */
    readonly createCollectionRequest: CreateCollectionRequest;
}
/**
 * Request parameters for getCollection operation in CollectionsApi.
 * @export
 * @interface CollectionsApiGetCollectionRequest
 */
interface CollectionsApiGetCollectionRequest {
    /**
     * Collection contract address
     * @type {string}
     * @memberof CollectionsApiGetCollection
     */
    readonly address: string;
}
/**
 * Request parameters for listCollectionFilters operation in CollectionsApi.
 * @export
 * @interface CollectionsApiListCollectionFiltersRequest
 */
interface CollectionsApiListCollectionFiltersRequest {
    /**
     * Collection contract address
     * @type {string}
     * @memberof CollectionsApiListCollectionFilters
     */
    readonly address: string;
    /**
     * Page size of the result
     * @type {number}
     * @memberof CollectionsApiListCollectionFilters
     */
    readonly pageSize?: number;
    /**
     * Next page token
     * @type {string}
     * @memberof CollectionsApiListCollectionFilters
     */
    readonly nextPageToken?: string;
}
/**
 * Request parameters for listCollections operation in CollectionsApi.
 * @export
 * @interface CollectionsApiListCollectionsRequest
 */
interface CollectionsApiListCollectionsRequest {
    /**
     * Page size of the result
     * @type {number}
     * @memberof CollectionsApiListCollections
     */
    readonly pageSize?: number;
    /**
     * Cursor
     * @type {string}
     * @memberof CollectionsApiListCollections
     */
    readonly cursor?: string;
    /**
     * Property to sort by
     * @type {'name' | 'address' | 'project_id' | 'created_at' | 'updated_at'}
     * @memberof CollectionsApiListCollections
     */
    readonly orderBy?: 'name' | 'address' | 'project_id' | 'created_at' | 'updated_at';
    /**
     * Direction to sort (asc/desc)
     * @type {string}
     * @memberof CollectionsApiListCollections
     */
    readonly direction?: string;
    /**
     * List of collections not to be included, separated by commas
     * @type {string}
     * @memberof CollectionsApiListCollections
     */
    readonly blacklist?: string;
    /**
     * List of collections to be included, separated by commas
     * @type {string}
     * @memberof CollectionsApiListCollections
     */
    readonly whitelist?: string;
    /**
     * Keyword to search in collection name and description
     * @type {string}
     * @memberof CollectionsApiListCollections
     */
    readonly keyword?: string;
}
/**
 * Request parameters for updateCollection operation in CollectionsApi.
 * @export
 * @interface CollectionsApiUpdateCollectionRequest
 */
interface CollectionsApiUpdateCollectionRequest {
    /**
     * Collection contract address
     * @type {string}
     * @memberof CollectionsApiUpdateCollection
     */
    readonly address: string;
    /**
     * String created by signing wallet address and timestamp
     * @type {string}
     * @memberof CollectionsApiUpdateCollection
     */
    readonly iMXSignature: string;
    /**
     * Unix Epoc timestamp
     * @type {string}
     * @memberof CollectionsApiUpdateCollection
     */
    readonly iMXTimestamp: string;
    /**
     * update a collection
     * @type {UpdateCollectionRequest}
     * @memberof CollectionsApiUpdateCollection
     */
    readonly updateCollectionRequest: UpdateCollectionRequest;
}
/**
 * CollectionsApi - object-oriented interface
 * @export
 * @class CollectionsApi
 * @extends {BaseAPI}
 */
declare class CollectionsApi extends BaseAPI {
    /**
     * Create collection
     * @summary Create collection
     * @param {CollectionsApiCreateCollectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollectionsApi
     */
    createCollection(requestParameters: CollectionsApiCreateCollectionRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<Collection, any>>;
    /**
     * Get details of a collection at the given address
     * @summary Get details of a collection at the given address
     * @param {CollectionsApiGetCollectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollectionsApi
     */
    getCollection(requestParameters: CollectionsApiGetCollectionRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<Collection, any>>;
    /**
     * Get a list of collection filters
     * @summary Get a list of collection filters
     * @param {CollectionsApiListCollectionFiltersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollectionsApi
     */
    listCollectionFilters(requestParameters: CollectionsApiListCollectionFiltersRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<CollectionFilter, any>>;
    /**
     * Get a list of collections
     * @summary Get a list of collections
     * @param {CollectionsApiListCollectionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollectionsApi
     */
    listCollections(requestParameters?: CollectionsApiListCollectionsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<ListCollectionsResponse, any>>;
    /**
     * Update collection
     * @summary Update collection
     * @param {CollectionsApiUpdateCollectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollectionsApi
     */
    updateCollection(requestParameters: CollectionsApiUpdateCollectionRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<Collection, any>>;
}
/**
 * Request parameters for getDeposit operation in DepositsApi.
 * @export
 * @interface DepositsApiGetDepositRequest
 */
interface DepositsApiGetDepositRequest {
    /**
     * Deposit ID
     * @type {string}
     * @memberof DepositsApiGetDeposit
     */
    readonly id: string;
}
/**
 * Request parameters for getSignableDeposit operation in DepositsApi.
 * @export
 * @interface DepositsApiGetSignableDepositRequest
 */
interface DepositsApiGetSignableDepositRequest {
    /**
     * Get details of signable deposit
     * @type {GetSignableDepositRequest}
     * @memberof DepositsApiGetSignableDeposit
     */
    readonly getSignableDepositRequest: GetSignableDepositRequest;
}
/**
 * Request parameters for listDeposits operation in DepositsApi.
 * @export
 * @interface DepositsApiListDepositsRequest
 */
interface DepositsApiListDepositsRequest {
    /**
     * Page size of the result
     * @type {number}
     * @memberof DepositsApiListDeposits
     */
    readonly pageSize?: number;
    /**
     * Cursor
     * @type {string}
     * @memberof DepositsApiListDeposits
     */
    readonly cursor?: string;
    /**
     * Property to sort by
     * @type {string}
     * @memberof DepositsApiListDeposits
     */
    readonly orderBy?: string;
    /**
     * Direction to sort (asc/desc)
     * @type {string}
     * @memberof DepositsApiListDeposits
     */
    readonly direction?: string;
    /**
     * Ethereum address of the user who submitted this deposit
     * @type {string}
     * @memberof DepositsApiListDeposits
     */
    readonly user?: string;
    /**
     * Status of this deposit
     * @type {string}
     * @memberof DepositsApiListDeposits
     */
    readonly status?: string;
    /**
     * Minimum timestamp for this deposit, in ISO 8601 UTC format. Example: \&#39;2022-05-27T00:10:22Z\&#39;
     * @type {string}
     * @memberof DepositsApiListDeposits
     */
    readonly minTimestamp?: string;
    /**
     * Maximum timestamp for this deposit, in ISO 8601 UTC format. Example: \&#39;2022-05-27T00:10:22Z\&#39;
     * @type {string}
     * @memberof DepositsApiListDeposits
     */
    readonly maxTimestamp?: string;
    /**
     * Token type of the deposited asset
     * @type {string}
     * @memberof DepositsApiListDeposits
     */
    readonly tokenType?: string;
    /**
     * ERC721 Token ID of the minted asset
     * @type {string}
     * @memberof DepositsApiListDeposits
     */
    readonly tokenId?: string;
    /**
     * Internal IMX ID of the minted asset
     * @type {string}
     * @memberof DepositsApiListDeposits
     */
    readonly assetId?: string;
    /**
     * Token address of the deposited asset
     * @type {string}
     * @memberof DepositsApiListDeposits
     */
    readonly tokenAddress?: string;
    /**
     * Token name of the deposited asset
     * @type {string}
     * @memberof DepositsApiListDeposits
     */
    readonly tokenName?: string;
    /**
     * Min quantity for the deposited asset
     * @type {string}
     * @memberof DepositsApiListDeposits
     */
    readonly minQuantity?: string;
    /**
     * Max quantity for the deposited asset
     * @type {string}
     * @memberof DepositsApiListDeposits
     */
    readonly maxQuantity?: string;
    /**
     * JSON-encoded metadata filters for the deposited asset
     * @type {string}
     * @memberof DepositsApiListDeposits
     */
    readonly metadata?: string;
}
/**
 * DepositsApi - object-oriented interface
 * @export
 * @class DepositsApi
 * @extends {BaseAPI}
 */
declare class DepositsApi extends BaseAPI {
    /**
     * Get details of a deposit with the given ID
     * @summary Get details of a deposit with the given ID
     * @param {DepositsApiGetDepositRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DepositsApi
     */
    getDeposit(requestParameters: DepositsApiGetDepositRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<Deposit, any>>;
    /**
     * Gets details of a signable deposit
     * @summary Gets details of a signable deposit
     * @param {DepositsApiGetSignableDepositRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DepositsApi
     */
    getSignableDeposit(requestParameters: DepositsApiGetSignableDepositRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<GetSignableDepositResponse, any>>;
    /**
     * Get a list of deposits
     * @summary Get a list of deposits
     * @param {DepositsApiListDepositsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DepositsApi
     */
    listDeposits(requestParameters?: DepositsApiListDepositsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<ListDepositsResponse, any>>;
}
/**
 * Request parameters for createExchange operation in ExchangesApi.
 * @export
 * @interface ExchangesApiCreateExchangeRequest
 */
interface ExchangesApiCreateExchangeRequest {
    /**
     * req
     * @type {CreateExchangeAndURLAPIRequest}
     * @memberof ExchangesApiCreateExchange
     */
    readonly createExchangeAPIRequest: CreateExchangeAndURLAPIRequest;
}
/**
 * Request parameters for createExchangeTransfer operation in ExchangesApi.
 * @export
 * @interface ExchangesApiCreateExchangeTransferRequest
 */
interface ExchangesApiCreateExchangeTransferRequest {
    /**
     * Transaction ID
     * @type {string}
     * @memberof ExchangesApiCreateExchangeTransfer
     */
    readonly id: string;
    /**
     * Create a transfer
     * @type {CreateTransferRequestV1}
     * @memberof ExchangesApiCreateExchangeTransfer
     */
    readonly createTransferRequest: CreateTransferRequestV1;
    /**
     * eth address
     * @type {string}
     * @memberof ExchangesApiCreateExchangeTransfer
     */
    readonly xImxEthAddress?: string;
    /**
     * eth signature
     * @type {string}
     * @memberof ExchangesApiCreateExchangeTransfer
     */
    readonly xImxEthSignature?: string;
    /**
     * Authorization header
     * @type {string}
     * @memberof ExchangesApiCreateExchangeTransfer
     */
    readonly authorization?: string;
}
/**
 * Request parameters for getExchange operation in ExchangesApi.
 * @export
 * @interface ExchangesApiGetExchangeRequest
 */
interface ExchangesApiGetExchangeRequest {
    /**
     * Exchange ID
     * @type {string}
     * @memberof ExchangesApiGetExchange
     */
    readonly id: string;
}
/**
 * Request parameters for getExchangeSignableTransfer operation in ExchangesApi.
 * @export
 * @interface ExchangesApiGetExchangeSignableTransferRequest
 */
interface ExchangesApiGetExchangeSignableTransferRequest {
    /**
     * Transaction ID
     * @type {string}
     * @memberof ExchangesApiGetExchangeSignableTransfer
     */
    readonly id: string;
    /**
     * get details of signable transfer
     * @type {GetSignableTransferRequestV1}
     * @memberof ExchangesApiGetExchangeSignableTransfer
     */
    readonly getSignableTransferRequest: GetSignableTransferRequestV1;
}
/**
 * Request parameters for getExchanges operation in ExchangesApi.
 * @export
 * @interface ExchangesApiGetExchangesRequest
 */
interface ExchangesApiGetExchangesRequest {
    /**
     * Page size of the result
     * @type {number}
     * @memberof ExchangesApiGetExchanges
     */
    readonly pageSize?: number;
    /**
     * Cursor
     * @type {string}
     * @memberof ExchangesApiGetExchanges
     */
    readonly cursor?: string;
    /**
     * Property to sort by
     * @type {'id' | 'status' | 'exchange' | 'amount' | 'transfer_id'}
     * @memberof ExchangesApiGetExchanges
     */
    readonly orderBy?: 'id' | 'status' | 'exchange' | 'amount' | 'transfer_id';
    /**
     * Direction to sort
     * @type {'asc' | 'desc'}
     * @memberof ExchangesApiGetExchanges
     */
    readonly direction?: 'asc' | 'desc';
    /**
     * Transaction ID
     * @type {number}
     * @memberof ExchangesApiGetExchanges
     */
    readonly id?: number;
    /**
     * Ethereum address of the user who created transaction
     * @type {string}
     * @memberof ExchangesApiGetExchanges
     */
    readonly walletAddress?: string;
    /**
     * Transaction status
     * @type {'created' | 'pending' | 'completed' | 'failed' | 'waitingPayment' | 'timedOut'}
     * @memberof ExchangesApiGetExchanges
     */
    readonly status?: 'created' | 'pending' | 'completed' | 'failed' | 'waitingPayment' | 'timedOut';
    /**
     * Provider name
     * @type {'moonpay' | 'layerswap'}
     * @memberof ExchangesApiGetExchanges
     */
    readonly provider?: 'moonpay' | 'layerswap';
    /**
     * Transfer ID
     * @type {string}
     * @memberof ExchangesApiGetExchanges
     */
    readonly transferId?: string;
}
/**
 * ExchangesApi - object-oriented interface
 * @export
 * @class ExchangesApi
 * @extends {BaseAPI}
 */
declare class ExchangesApi extends BaseAPI {
    /**
     * Receive wallet_address, provider, type and widget information to create a base exchange transaction and return widget URL
     * @summary Create an exchange with URL
     * @param {ExchangesApiCreateExchangeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExchangesApi
     */
    createExchange(requestParameters: ExchangesApiCreateExchangeRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<ExchangeCreateExchangeAndURLResponse, any>>;
    /**
     * Accepts a transfer request and updates the transfer_status after processing transfer (offramp)
     * @summary Accepts a transfer request and updates the transfer_status after processing transfer (offramp)
     * @param {ExchangesApiCreateExchangeTransferRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExchangesApi
     */
    createExchangeTransfer(requestParameters: ExchangesApiCreateExchangeTransferRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<CreateTransferResponseV1, any>>;
    /**
     * Get an exchange by ID
     * @summary Get an exchange by ID
     * @param {ExchangesApiGetExchangeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExchangesApi
     */
    getExchange(requestParameters: ExchangesApiGetExchangeRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<Exchange, any>>;
    /**
     * Send a request for signable-transfer-details (offramp)
     * @summary Send a request for signable-transfer-details (offramp)
     * @param {ExchangesApiGetExchangeSignableTransferRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExchangesApi
     */
    getExchangeSignableTransfer(requestParameters: ExchangesApiGetExchangeSignableTransferRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<GetSignableTransferResponseV1, any>>;
    /**
     * Returns a list of exchanges based on the request
     * @summary Returns a list of exchanges based on the request
     * @param {ExchangesApiGetExchangesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExchangesApi
     */
    getExchanges(requestParameters?: ExchangesApiGetExchangesRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<GetTransactionsResponse, any>>;
}
/**
 * Request parameters for addMetadataSchemaToCollection operation in MetadataApi.
 * @export
 * @interface MetadataApiAddMetadataSchemaToCollectionRequest
 */
interface MetadataApiAddMetadataSchemaToCollectionRequest {
    /**
     * Collection contract address
     * @type {string}
     * @memberof MetadataApiAddMetadataSchemaToCollection
     */
    readonly address: string;
    /**
     * String created by signing wallet address and timestamp
     * @type {string}
     * @memberof MetadataApiAddMetadataSchemaToCollection
     */
    readonly iMXSignature: string;
    /**
     * Unix Epoc timestamp
     * @type {string}
     * @memberof MetadataApiAddMetadataSchemaToCollection
     */
    readonly iMXTimestamp: string;
    /**
     * add metadata schema to a collection
     * @type {AddMetadataSchemaToCollectionRequest}
     * @memberof MetadataApiAddMetadataSchemaToCollection
     */
    readonly addMetadataSchemaToCollectionRequest: AddMetadataSchemaToCollectionRequest;
}
/**
 * Request parameters for getMetadataSchema operation in MetadataApi.
 * @export
 * @interface MetadataApiGetMetadataSchemaRequest
 */
interface MetadataApiGetMetadataSchemaRequest {
    /**
     * Collection contract address
     * @type {string}
     * @memberof MetadataApiGetMetadataSchema
     */
    readonly address: string;
}
/**
 * Request parameters for updateMetadataSchemaByName operation in MetadataApi.
 * @export
 * @interface MetadataApiUpdateMetadataSchemaByNameRequest
 */
interface MetadataApiUpdateMetadataSchemaByNameRequest {
    /**
     * Collection contract address
     * @type {string}
     * @memberof MetadataApiUpdateMetadataSchemaByName
     */
    readonly address: string;
    /**
     * Metadata schema name
     * @type {string}
     * @memberof MetadataApiUpdateMetadataSchemaByName
     */
    readonly name: string;
    /**
     * String created by signing wallet address and timestamp
     * @type {string}
     * @memberof MetadataApiUpdateMetadataSchemaByName
     */
    readonly iMXSignature: string;
    /**
     * Unix Epoc timestamp
     * @type {string}
     * @memberof MetadataApiUpdateMetadataSchemaByName
     */
    readonly iMXTimestamp: string;
    /**
     * update metadata schema
     * @type {MetadataSchemaRequest}
     * @memberof MetadataApiUpdateMetadataSchemaByName
     */
    readonly metadataSchemaRequest: MetadataSchemaRequest;
}
/**
 * MetadataApi - object-oriented interface
 * @export
 * @class MetadataApi
 * @extends {BaseAPI}
 */
declare class MetadataApi extends BaseAPI {
    /**
     * Add metadata schema to collection
     * @summary Add metadata schema to collection
     * @param {MetadataApiAddMetadataSchemaToCollectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetadataApi
     */
    addMetadataSchemaToCollection(requestParameters: MetadataApiAddMetadataSchemaToCollectionRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<SuccessResponse, any>>;
    /**
     * Get collection metadata schema
     * @summary Get collection metadata schema
     * @param {MetadataApiGetMetadataSchemaRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetadataApi
     */
    getMetadataSchema(requestParameters: MetadataApiGetMetadataSchemaRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<MetadataSchemaProperty[], any>>;
    /**
     * Update metadata schema by name
     * @summary Update metadata schema by name
     * @param {MetadataApiUpdateMetadataSchemaByNameRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetadataApi
     */
    updateMetadataSchemaByName(requestParameters: MetadataApiUpdateMetadataSchemaByNameRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<SuccessResponse, any>>;
}
/**
 * Request parameters for getAListOfMetadataRefreshes operation in MetadataRefreshesApi.
 * @export
 * @interface MetadataRefreshesApiGetAListOfMetadataRefreshesRequest
 */
interface MetadataRefreshesApiGetAListOfMetadataRefreshesRequest {
    /**
     * String created by signing wallet address and timestamp. See https://docs.x.immutable.com/docs/generate-imx-signature
     * @type {string}
     * @memberof MetadataRefreshesApiGetAListOfMetadataRefreshes
     */
    readonly xImxEthSignature: string;
    /**
     * Unix Epoc timestamp
     * @type {string}
     * @memberof MetadataRefreshesApiGetAListOfMetadataRefreshes
     */
    readonly xImxEthTimestamp: string;
    /**
     * Wallet Address that signed the signature
     * @type {string}
     * @memberof MetadataRefreshesApiGetAListOfMetadataRefreshes
     */
    readonly xImxEthAddress: string;
    /**
     * Page size of the result
     * @type {number}
     * @memberof MetadataRefreshesApiGetAListOfMetadataRefreshes
     */
    readonly pageSize?: number;
    /**
     * Cursor
     * @type {string}
     * @memberof MetadataRefreshesApiGetAListOfMetadataRefreshes
     */
    readonly cursor?: string;
    /**
     * Collection address
     * @type {string}
     * @memberof MetadataRefreshesApiGetAListOfMetadataRefreshes
     */
    readonly collectionAddress?: string;
}
/**
 * Request parameters for getMetadataRefreshErrors operation in MetadataRefreshesApi.
 * @export
 * @interface MetadataRefreshesApiGetMetadataRefreshErrorsRequest
 */
interface MetadataRefreshesApiGetMetadataRefreshErrorsRequest {
    /**
     * The metadata refresh ID
     * @type {string}
     * @memberof MetadataRefreshesApiGetMetadataRefreshErrors
     */
    readonly refreshId: string;
    /**
     * String created by signing wallet address and timestamp. See https://docs.x.immutable.com/docs/generate-imx-signature
     * @type {string}
     * @memberof MetadataRefreshesApiGetMetadataRefreshErrors
     */
    readonly xImxEthSignature: string;
    /**
     * Unix Epoc timestamp
     * @type {string}
     * @memberof MetadataRefreshesApiGetMetadataRefreshErrors
     */
    readonly xImxEthTimestamp: string;
    /**
     * Wallet Address that signed the signature
     * @type {string}
     * @memberof MetadataRefreshesApiGetMetadataRefreshErrors
     */
    readonly xImxEthAddress: string;
    /**
     * Page size of the result
     * @type {number}
     * @memberof MetadataRefreshesApiGetMetadataRefreshErrors
     */
    readonly pageSize?: number;
    /**
     * Cursor
     * @type {string}
     * @memberof MetadataRefreshesApiGetMetadataRefreshErrors
     */
    readonly cursor?: string;
}
/**
 * Request parameters for getMetadataRefreshResults operation in MetadataRefreshesApi.
 * @export
 * @interface MetadataRefreshesApiGetMetadataRefreshResultsRequest
 */
interface MetadataRefreshesApiGetMetadataRefreshResultsRequest {
    /**
     * The metadata refresh ID
     * @type {string}
     * @memberof MetadataRefreshesApiGetMetadataRefreshResults
     */
    readonly refreshId: string;
    /**
     * String created by signing wallet address and timestamp. See https://docs.x.immutable.com/docs/generate-imx-signature
     * @type {string}
     * @memberof MetadataRefreshesApiGetMetadataRefreshResults
     */
    readonly xImxEthSignature: string;
    /**
     * Unix Epoc timestamp
     * @type {string}
     * @memberof MetadataRefreshesApiGetMetadataRefreshResults
     */
    readonly xImxEthTimestamp: string;
    /**
     * Wallet Address that signed the signature
     * @type {string}
     * @memberof MetadataRefreshesApiGetMetadataRefreshResults
     */
    readonly xImxEthAddress: string;
}
/**
 * Request parameters for requestAMetadataRefresh operation in MetadataRefreshesApi.
 * @export
 * @interface MetadataRefreshesApiRequestAMetadataRefreshRequest
 */
interface MetadataRefreshesApiRequestAMetadataRefreshRequest {
    /**
     * String created by signing wallet address and timestamp. See https://docs.x.immutable.com/docs/generate-imx-signature
     * @type {string}
     * @memberof MetadataRefreshesApiRequestAMetadataRefresh
     */
    readonly xImxEthSignature: string;
    /**
     * Unix Epoc timestamp
     * @type {string}
     * @memberof MetadataRefreshesApiRequestAMetadataRefresh
     */
    readonly xImxEthTimestamp: string;
    /**
     * Wallet Address that signed the signature
     * @type {string}
     * @memberof MetadataRefreshesApiRequestAMetadataRefresh
     */
    readonly xImxEthAddress: string;
    /**
     * Create metadata refresh request
     * @type {CreateMetadataRefreshRequest}
     * @memberof MetadataRefreshesApiRequestAMetadataRefresh
     */
    readonly createMetadataRefreshRequest: CreateMetadataRefreshRequest;
}
/**
 * MetadataRefreshesApi - object-oriented interface
 * @export
 * @class MetadataRefreshesApi
 * @extends {BaseAPI}
 */
declare class MetadataRefreshesApi extends BaseAPI {
    /**
     * Get a list of metadata refreshes
     * @param {MetadataRefreshesApiGetAListOfMetadataRefreshesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetadataRefreshesApi
     */
    getAListOfMetadataRefreshes(requestParameters: MetadataRefreshesApiGetAListOfMetadataRefreshesRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<GetMetadataRefreshes, any>>;
    /**
     * Get metadata refresh errors
     * @param {MetadataRefreshesApiGetMetadataRefreshErrorsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetadataRefreshesApi
     */
    getMetadataRefreshErrors(requestParameters: MetadataRefreshesApiGetMetadataRefreshErrorsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<GetMetadataRefreshErrorsResponse, any>>;
    /**
     * Get metadata refresh results
     * @param {MetadataRefreshesApiGetMetadataRefreshResultsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetadataRefreshesApi
     */
    getMetadataRefreshResults(requestParameters: MetadataRefreshesApiGetMetadataRefreshResultsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<GetMetadataRefreshResponse, any>>;
    /**
     * Request metadata refresh for provided tokens
     * @param {MetadataRefreshesApiRequestAMetadataRefreshRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetadataRefreshesApi
     */
    requestAMetadataRefresh(requestParameters: MetadataRefreshesApiRequestAMetadataRefreshRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<CreateMetadataRefreshResponse, any>>;
}
/**
 * Request parameters for getMint operation in MintsApi.
 * @export
 * @interface MintsApiGetMintRequest
 */
interface MintsApiGetMintRequest {
    /**
     * Mint ID. This is the transaction_id returned from listMints
     * @type {string}
     * @memberof MintsApiGetMint
     */
    readonly id: string;
}
/**
 * Request parameters for getMintableTokenDetailsByClientTokenId operation in MintsApi.
 * @export
 * @interface MintsApiGetMintableTokenDetailsByClientTokenIdRequest
 */
interface MintsApiGetMintableTokenDetailsByClientTokenIdRequest {
    /**
     * Address of the ERC721 contract
     * @type {string}
     * @memberof MintsApiGetMintableTokenDetailsByClientTokenId
     */
    readonly tokenAddress: string;
    /**
     * ERC721 token ID
     * @type {string}
     * @memberof MintsApiGetMintableTokenDetailsByClientTokenId
     */
    readonly tokenId: string;
}
/**
 * Request parameters for listMints operation in MintsApi.
 * @export
 * @interface MintsApiListMintsRequest
 */
interface MintsApiListMintsRequest {
    /**
     * Page size of the result
     * @type {number}
     * @memberof MintsApiListMints
     */
    readonly pageSize?: number;
    /**
     * Cursor
     * @type {string}
     * @memberof MintsApiListMints
     */
    readonly cursor?: string;
    /**
     * Property to sort by
     * @type {'transaction_id' | 'token_id' | 'created_at' | 'updated_at'}
     * @memberof MintsApiListMints
     */
    readonly orderBy?: 'transaction_id' | 'token_id' | 'created_at' | 'updated_at';
    /**
     * Direction to sort (asc/desc)
     * @type {string}
     * @memberof MintsApiListMints
     */
    readonly direction?: string;
    /**
     * Ethereum address of the user who submitted this mint
     * @type {string}
     * @memberof MintsApiListMints
     */
    readonly user?: string;
    /**
     * Status of this mint
     * @type {string}
     * @memberof MintsApiListMints
     */
    readonly status?: string;
    /**
     * Minimum timestamp for this mint, in ISO 8601 UTC format. Example: \&#39;2022-05-27T00:10:22Z\&#39;
     * @type {string}
     * @memberof MintsApiListMints
     */
    readonly minTimestamp?: string;
    /**
     * Maximum timestamp for this mint, in ISO 8601 UTC format. Example: \&#39;2022-05-27T00:10:22Z\&#39;
     * @type {string}
     * @memberof MintsApiListMints
     */
    readonly maxTimestamp?: string;
    /**
     * Token type of the minted asset
     * @type {string}
     * @memberof MintsApiListMints
     */
    readonly tokenType?: string;
    /**
     * ERC721 Token ID of the minted asset
     * @type {string}
     * @memberof MintsApiListMints
     */
    readonly tokenId?: string;
    /**
     * Token Name of the minted asset
     * @type {string}
     * @memberof MintsApiListMints
     */
    readonly tokenName?: string;
    /**
     * Token address of the minted asset
     * @type {string}
     * @memberof MintsApiListMints
     */
    readonly tokenAddress?: string;
    /**
     * Min quantity for the minted asset
     * @type {string}
     * @memberof MintsApiListMints
     */
    readonly minQuantity?: string;
    /**
     * Max quantity for the minted asset
     * @type {string}
     * @memberof MintsApiListMints
     */
    readonly maxQuantity?: string;
    /**
     * JSON-encoded metadata filters for the minted asset
     * @type {string}
     * @memberof MintsApiListMints
     */
    readonly metadata?: string;
}
/**
 * Request parameters for mintTokens operation in MintsApi.
 * @export
 * @interface MintsApiMintTokensRequest
 */
interface MintsApiMintTokensRequest {
    /**
     * details of tokens to mint
     * @type {Array<MintRequest>}
     * @memberof MintsApiMintTokens
     */
    readonly mintTokensRequestV2: Array<MintRequest>;
}
/**
 * MintsApi - object-oriented interface
 * @export
 * @class MintsApi
 * @extends {BaseAPI}
 */
declare class MintsApi extends BaseAPI {
    /**
     * Get details of a mint with the given ID
     * @summary Get details of a mint with the given ID
     * @param {MintsApiGetMintRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MintsApi
     */
    getMint(requestParameters: MintsApiGetMintRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<Mint[], any>>;
    /**
     * Get details of a mintable token with the given token address and token ID
     * @summary Get details of a mintable token with the given token address and token ID
     * @param {MintsApiGetMintableTokenDetailsByClientTokenIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MintsApi
     */
    getMintableTokenDetailsByClientTokenId(requestParameters: MintsApiGetMintableTokenDetailsByClientTokenIdRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<MintableTokenDetails, any>>;
    /**
     * Get information about token mints. If you want to get information about tokens that have already been minted, use the listAssets endpoint.
     * @summary Get a list of mints
     * @param {MintsApiListMintsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MintsApi
     */
    listMints(requestParameters?: MintsApiListMintsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<ListMintsResponse, any>>;
    /**
     * Mint tokens in a batch with fees
     * @summary Mint Tokens V2
     * @param {MintsApiMintTokensRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MintsApi
     */
    mintTokens(requestParameters: MintsApiMintTokensRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<MintTokensResponse, any>>;
}
/**
 * Request parameters for createNftPrimary operation in NftCheckoutPrimaryApi.
 * @export
 * @interface NftCheckoutPrimaryApiCreateNftPrimaryRequest
 */
interface NftCheckoutPrimaryApiCreateNftPrimaryRequest {
    /**
     * req
     * @type {NftprimarytransactionCreateAPIRequest}
     * @memberof NftCheckoutPrimaryApiCreateNftPrimary
     */
    readonly createAPIRequest: NftprimarytransactionCreateAPIRequest;
}
/**
 * Request parameters for getCurrenciesNFTCheckoutPrimary operation in NftCheckoutPrimaryApi.
 * @export
 * @interface NftCheckoutPrimaryApiGetCurrenciesNFTCheckoutPrimaryRequest
 */
interface NftCheckoutPrimaryApiGetCurrenciesNFTCheckoutPrimaryRequest {
    /**
     * Provider name
     * @type {'moonpay'}
     * @memberof NftCheckoutPrimaryApiGetCurrenciesNFTCheckoutPrimary
     */
    readonly provider?: 'moonpay';
    /**
     * Flag if limits should be included in the response or not
     * @type {boolean}
     * @memberof NftCheckoutPrimaryApiGetCurrenciesNFTCheckoutPrimary
     */
    readonly includeLimits?: boolean;
}
/**
 * Request parameters for getNftPrimaryTransaction operation in NftCheckoutPrimaryApi.
 * @export
 * @interface NftCheckoutPrimaryApiGetNftPrimaryTransactionRequest
 */
interface NftCheckoutPrimaryApiGetNftPrimaryTransactionRequest {
    /**
     * Transaction id
     * @type {string}
     * @memberof NftCheckoutPrimaryApiGetNftPrimaryTransaction
     */
    readonly transactionId: string;
}
/**
 * Request parameters for getNftPrimaryTransactions operation in NftCheckoutPrimaryApi.
 * @export
 * @interface NftCheckoutPrimaryApiGetNftPrimaryTransactionsRequest
 */
interface NftCheckoutPrimaryApiGetNftPrimaryTransactionsRequest {
    /**
     * Page size of the result
     * @type {number}
     * @memberof NftCheckoutPrimaryApiGetNftPrimaryTransactions
     */
    readonly pageSize?: number;
    /**
     * Cursor
     * @type {string}
     * @memberof NftCheckoutPrimaryApiGetNftPrimaryTransactions
     */
    readonly cursor?: string;
    /**
     * Property to sort by
     * @type {'transaction_id' | 'status' | 'amount' | 'mint_id'}
     * @memberof NftCheckoutPrimaryApiGetNftPrimaryTransactions
     */
    readonly orderBy?: 'transaction_id' | 'status' | 'amount' | 'mint_id';
    /**
     * Direction to sort (asc/desc)
     * @type {string}
     * @memberof NftCheckoutPrimaryApiGetNftPrimaryTransactions
     */
    readonly direction?: string;
    /**
     * Transaction id
     * @type {string}
     * @memberof NftCheckoutPrimaryApiGetNftPrimaryTransactions
     */
    readonly transactionId?: string;
    /**
     * Contract address of the asset
     * @type {string}
     * @memberof NftCheckoutPrimaryApiGetNftPrimaryTransactions
     */
    readonly contractAddress?: string;
    /**
     * Ethereum address of the seller
     * @type {string}
     * @memberof NftCheckoutPrimaryApiGetNftPrimaryTransactions
     */
    readonly sellerWalletAddress?: string;
    /**
     * Ethereum address of the user who wants to create transaction
     * @type {string}
     * @memberof NftCheckoutPrimaryApiGetNftPrimaryTransactions
     */
    readonly userWalletAddress?: string;
    /**
     * Transaction status
     * @type {'created' | 'waitingPayment' | 'pending' | 'completed' | 'failed'}
     * @memberof NftCheckoutPrimaryApiGetNftPrimaryTransactions
     */
    readonly status?: 'created' | 'waitingPayment' | 'pending' | 'completed' | 'failed';
    /**
     * Checkout provider name
     * @type {'moonpay'}
     * @memberof NftCheckoutPrimaryApiGetNftPrimaryTransactions
     */
    readonly provider?: 'moonpay';
    /**
     * Minting transaction ID - see mintTokens response
     * @type {string}
     * @memberof NftCheckoutPrimaryApiGetNftPrimaryTransactions
     */
    readonly mintId?: string;
}
/**
 * Request parameters for registerNftPrimarySalesContract operation in NftCheckoutPrimaryApi.
 * @export
 * @interface NftCheckoutPrimaryApiRegisterNftPrimarySalesContractRequest
 */
interface NftCheckoutPrimaryApiRegisterNftPrimarySalesContractRequest {
    /**
     * req
     * @type {ContractCreateAPIRequest}
     * @memberof NftCheckoutPrimaryApiRegisterNftPrimarySalesContract
     */
    readonly createAPIRequest: ContractCreateAPIRequest;
}
/**
 * NftCheckoutPrimaryApi - object-oriented interface
 * @export
 * @class NftCheckoutPrimaryApi
 * @extends {BaseAPI}
 */
declare class NftCheckoutPrimaryApi extends BaseAPI {
    /**
     * Creates a transaction representing minting an NFT with a card payment.
     * @summary Create NFT primary sale transaction
     * @param {NftCheckoutPrimaryApiCreateNftPrimaryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NftCheckoutPrimaryApi
     */
    createNftPrimary(requestParameters: NftCheckoutPrimaryApiCreateNftPrimaryRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<NftprimarytransactionCreateResponse, any>>;
    /**
     * Returns a list of supported currencies and their limits
     * @summary Get currencies with limits
     * @param {NftCheckoutPrimaryApiGetCurrenciesNFTCheckoutPrimaryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NftCheckoutPrimaryApi
     */
    getCurrenciesNFTCheckoutPrimary(requestParameters?: NftCheckoutPrimaryApiGetCurrenciesNFTCheckoutPrimaryRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<CurrencyWithLimits, any>>;
    /**
     * given a transaction id, returns the corresponding transaction representing a mint executed from a card payment
     * @summary Get NFT primary sale transaction by id
     * @param {NftCheckoutPrimaryApiGetNftPrimaryTransactionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NftCheckoutPrimaryApi
     */
    getNftPrimaryTransaction(requestParameters: NftCheckoutPrimaryApiGetNftPrimaryTransactionRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<NftprimarytransactionGetResponse, any>>;
    /**
     * Returns a list of NFT primary sales transactions
     * @summary Get a list of NFT primary sales transactions
     * @param {NftCheckoutPrimaryApiGetNftPrimaryTransactionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NftCheckoutPrimaryApi
     */
    getNftPrimaryTransactions(requestParameters?: NftCheckoutPrimaryApiGetNftPrimaryTransactionsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<NftprimarytransactionListTransactionsResponse, any>>;
    /**
     * Registers a new contract for use in the minting with fiat card flow
     * @summary Executes NFT primary sales contract registration
     * @param {NftCheckoutPrimaryApiRegisterNftPrimarySalesContractRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NftCheckoutPrimaryApi
     */
    registerNftPrimarySalesContract(requestParameters: NftCheckoutPrimaryApiRegisterNftPrimarySalesContractRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<ContractCreateResponse, any>>;
}
/**
 * Request parameters for cancelOrder operation in OrdersApi.
 * @export
 * @interface OrdersApiCancelOrderRequest
 */
interface OrdersApiCancelOrderRequest {
    /**
     * Order ID to cancel
     * @type {string}
     * @memberof OrdersApiCancelOrder
     */
    readonly id: string;
    /**
     * cancel an order
     * @type {CancelOrderRequest}
     * @memberof OrdersApiCancelOrder
     */
    readonly cancelOrderRequest: CancelOrderRequest;
    /**
     * eth address
     * @type {string}
     * @memberof OrdersApiCancelOrder
     */
    readonly xImxEthAddress?: string;
    /**
     * eth signature
     * @type {string}
     * @memberof OrdersApiCancelOrder
     */
    readonly xImxEthSignature?: string;
    /**
     * Authorization header
     * @type {string}
     * @memberof OrdersApiCancelOrder
     */
    readonly authorization?: string;
}
/**
 * Request parameters for cancelOrderV3 operation in OrdersApi.
 * @export
 * @interface OrdersApiCancelOrderV3Request
 */
interface OrdersApiCancelOrderV3Request {
    /**
     * Order ID to cancel
     * @type {string}
     * @memberof OrdersApiCancelOrderV3
     */
    readonly id: string;
    /**
     * cancel an order
     * @type {CancelOrderRequest}
     * @memberof OrdersApiCancelOrderV3
     */
    readonly cancelOrderRequest: CancelOrderRequest;
    /**
     * eth address
     * @type {string}
     * @memberof OrdersApiCancelOrderV3
     */
    readonly xImxEthAddress?: string;
    /**
     * eth signature
     * @type {string}
     * @memberof OrdersApiCancelOrderV3
     */
    readonly xImxEthSignature?: string;
    /**
     * Authorization header
     * @type {string}
     * @memberof OrdersApiCancelOrderV3
     */
    readonly authorization?: string;
}
/**
 * Request parameters for createOrder operation in OrdersApi.
 * @export
 * @interface OrdersApiCreateOrderRequest
 */
interface OrdersApiCreateOrderRequest {
    /**
     * create an order
     * @type {CreateOrderRequest}
     * @memberof OrdersApiCreateOrder
     */
    readonly createOrderRequest: CreateOrderRequest;
    /**
     * eth address
     * @type {string}
     * @memberof OrdersApiCreateOrder
     */
    readonly xImxEthAddress?: string;
    /**
     * eth signature
     * @type {string}
     * @memberof OrdersApiCreateOrder
     */
    readonly xImxEthSignature?: string;
    /**
     * Authorization header
     * @type {string}
     * @memberof OrdersApiCreateOrder
     */
    readonly authorization?: string;
}
/**
 * Request parameters for createOrderV3 operation in OrdersApi.
 * @export
 * @interface OrdersApiCreateOrderV3Request
 */
interface OrdersApiCreateOrderV3Request {
    /**
     * create an order
     * @type {CreateOrderRequestV3}
     * @memberof OrdersApiCreateOrderV3
     */
    readonly createOrderRequest: CreateOrderRequestV3;
    /**
     * eth address
     * @type {string}
     * @memberof OrdersApiCreateOrderV3
     */
    readonly xImxEthAddress?: string;
    /**
     * eth signature
     * @type {string}
     * @memberof OrdersApiCreateOrderV3
     */
    readonly xImxEthSignature?: string;
    /**
     * Authorization header
     * @type {string}
     * @memberof OrdersApiCreateOrderV3
     */
    readonly authorization?: string;
}
/**
 * Request parameters for getOrder operation in OrdersApi.
 * @export
 * @interface OrdersApiGetOrderRequest
 */
interface OrdersApiGetOrderRequest {
    /**
     * Order ID
     * @type {string}
     * @memberof OrdersApiGetOrder
     */
    readonly id: string;
    /**
     * Set flag to true to include fee body for the order
     * @type {boolean}
     * @memberof OrdersApiGetOrder
     */
    readonly includeFees?: boolean;
    /**
     * Comma separated string of fee percentages that are to be paired with auxiliary_fee_recipients
     * @type {string}
     * @memberof OrdersApiGetOrder
     */
    readonly auxiliaryFeePercentages?: string;
    /**
     * Comma separated string of fee recipients that are to be paired with auxiliary_fee_percentages
     * @type {string}
     * @memberof OrdersApiGetOrder
     */
    readonly auxiliaryFeeRecipients?: string;
}
/**
 * Request parameters for getOrderV3 operation in OrdersApi.
 * @export
 * @interface OrdersApiGetOrderV3Request
 */
interface OrdersApiGetOrderV3Request {
    /**
     * Order ID
     * @type {string}
     * @memberof OrdersApiGetOrderV3
     */
    readonly id: string;
    /**
     * Set flag to true to include fee body for the order
     * @type {boolean}
     * @memberof OrdersApiGetOrderV3
     */
    readonly includeFees?: boolean;
    /**
     * Comma separated string of fee percentages that are to be paired with auxiliary_fee_recipients
     * @type {string}
     * @memberof OrdersApiGetOrderV3
     */
    readonly auxiliaryFeePercentages?: string;
    /**
     * Comma separated string of fee recipients that are to be paired with auxiliary_fee_percentages
     * @type {string}
     * @memberof OrdersApiGetOrderV3
     */
    readonly auxiliaryFeeRecipients?: string;
}
/**
 * Request parameters for getSignableCancelOrder operation in OrdersApi.
 * @export
 * @interface OrdersApiGetSignableCancelOrderRequest
 */
interface OrdersApiGetSignableCancelOrderRequest {
    /**
     * get a signable cancel order
     * @type {GetSignableCancelOrderRequest}
     * @memberof OrdersApiGetSignableCancelOrder
     */
    readonly getSignableCancelOrderRequest: GetSignableCancelOrderRequest;
}
/**
 * Request parameters for getSignableCancelOrderV3 operation in OrdersApi.
 * @export
 * @interface OrdersApiGetSignableCancelOrderV3Request
 */
interface OrdersApiGetSignableCancelOrderV3Request {
    /**
     * get a signable cancel order
     * @type {GetSignableCancelOrderRequest}
     * @memberof OrdersApiGetSignableCancelOrderV3
     */
    readonly getSignableCancelOrderRequest: GetSignableCancelOrderRequest;
}
/**
 * Request parameters for getSignableOrder operation in OrdersApi.
 * @export
 * @interface OrdersApiGetSignableOrderRequest
 */
interface OrdersApiGetSignableOrderRequest {
    /**
     * get a signable order v3
     * @type {GetSignableOrderRequestV3}
     * @memberof OrdersApiGetSignableOrder
     */
    readonly getSignableOrderRequestV3: GetSignableOrderRequestV3;
}
/**
 * Request parameters for listOrders operation in OrdersApi.
 * @export
 * @interface OrdersApiListOrdersRequest
 */
interface OrdersApiListOrdersRequest {
    /**
     * Page size of the result
     * @type {number}
     * @memberof OrdersApiListOrders
     */
    readonly pageSize?: number;
    /**
     * Cursor
     * @type {string}
     * @memberof OrdersApiListOrders
     */
    readonly cursor?: string;
    /**
     * Property to sort by
     * @type {'created_at' | 'expired_at' | 'sell_quantity' | 'buy_quantity' | 'buy_quantity_with_fees' | 'updated_at'}
     * @memberof OrdersApiListOrders
     */
    readonly orderBy?: 'created_at' | 'expired_at' | 'sell_quantity' | 'buy_quantity' | 'buy_quantity_with_fees' | 'updated_at';
    /**
     * Direction to sort (asc/desc)
     * @type {string}
     * @memberof OrdersApiListOrders
     */
    readonly direction?: string;
    /**
     * Ethereum address of the user who submitted this order
     * @type {string}
     * @memberof OrdersApiListOrders
     */
    readonly user?: string;
    /**
     * Status of this order
     * @type {'active' | 'filled' | 'cancelled' | 'expired' | 'inactive'}
     * @memberof OrdersApiListOrders
     */
    readonly status?: 'active' | 'filled' | 'cancelled' | 'expired' | 'inactive';
    /**
     * Filter orders to include those with created_at timestamps after this time, in ISO 8601 UTC format. Example: \&#39;2022-05-27T00:10:22Z\&#39;
     * @type {string}
     * @memberof OrdersApiListOrders
     */
    readonly minTimestamp?: string;
    /**
     * Filter orders to include those with created_at timestamps before this time, in ISO 8601 UTC format. Example: \&#39;2022-05-27T00:10:22Z\&#39;
     * @type {string}
     * @memberof OrdersApiListOrders
     */
    readonly maxTimestamp?: string;
    /**
     * Filter orders to include those with updated_at timestamps after this time, in ISO 8601 UTC format. Example: \&#39;2022-05-27T00:10:22Z\&#39;
     * @type {string}
     * @memberof OrdersApiListOrders
     */
    readonly updatedMinTimestamp?: string;
    /**
     * Filter orders to include those with updated_at timestamps before this time, in ISO 8601 UTC format. Example: \&#39;2022-05-27T00:10:22Z\&#39;
     * @type {string}
     * @memberof OrdersApiListOrders
     */
    readonly updatedMaxTimestamp?: string;
    /**
     * Token type of the asset this order buys
     * @type {string}
     * @memberof OrdersApiListOrders
     */
    readonly buyTokenType?: string;
    /**
     * ERC721 Token ID of the asset this order buys
     * @type {string}
     * @memberof OrdersApiListOrders
     */
    readonly buyTokenId?: string;
    /**
     * Internal IMX ID of the asset this order buys
     * @type {string}
     * @memberof OrdersApiListOrders
     */
    readonly buyAssetId?: string;
    /**
     * Token address of the asset this order buys
     * @type {string}
     * @memberof OrdersApiListOrders
     */
    readonly buyTokenAddress?: string;
    /**
     * Token name of the asset this order buys
     * @type {string}
     * @memberof OrdersApiListOrders
     */
    readonly buyTokenName?: string;
    /**
     * Min quantity for the asset this order buys
     * @type {string}
     * @memberof OrdersApiListOrders
     */
    readonly buyMinQuantity?: string;
    /**
     * Max quantity for the asset this order buys
     * @type {string}
     * @memberof OrdersApiListOrders
     */
    readonly buyMaxQuantity?: string;
    /**
     * JSON-encoded metadata filters for the asset this order buys
     * @type {string}
     * @memberof OrdersApiListOrders
     */
    readonly buyMetadata?: string;
    /**
     * Token type of the asset this order sells
     * @type {string}
     * @memberof OrdersApiListOrders
     */
    readonly sellTokenType?: string;
    /**
     * ERC721 Token ID of the asset this order sells
     * @type {string}
     * @memberof OrdersApiListOrders
     */
    readonly sellTokenId?: string;
    /**
     * Internal IMX ID of the asset this order sells
     * @type {string}
     * @memberof OrdersApiListOrders
     */
    readonly sellAssetId?: string;
    /**
     * Token address of the asset this order sells
     * @type {string}
     * @memberof OrdersApiListOrders
     */
    readonly sellTokenAddress?: string;
    /**
     * Token name of the asset this order sells
     * @type {string}
     * @memberof OrdersApiListOrders
     */
    readonly sellTokenName?: string;
    /**
     * Min quantity for the asset this order sells
     * @type {string}
     * @memberof OrdersApiListOrders
     */
    readonly sellMinQuantity?: string;
    /**
     * Max quantity for the asset this order sells
     * @type {string}
     * @memberof OrdersApiListOrders
     */
    readonly sellMaxQuantity?: string;
    /**
     * JSON-encoded metadata filters for the asset this order sells
     * @type {string}
     * @memberof OrdersApiListOrders
     */
    readonly sellMetadata?: string;
    /**
     * Comma separated string of fee percentages that are to be paired with auxiliary_fee_recipients
     * @type {string}
     * @memberof OrdersApiListOrders
     */
    readonly auxiliaryFeePercentages?: string;
    /**
     * Comma separated string of fee recipients that are to be paired with auxiliary_fee_percentages
     * @type {string}
     * @memberof OrdersApiListOrders
     */
    readonly auxiliaryFeeRecipients?: string;
    /**
     * Set flag to true to include fee object for orders
     * @type {boolean}
     * @memberof OrdersApiListOrders
     */
    readonly includeFees?: boolean;
}
/**
 * Request parameters for listOrdersV3 operation in OrdersApi.
 * @export
 * @interface OrdersApiListOrdersV3Request
 */
interface OrdersApiListOrdersV3Request {
    /**
     * Page size of the result
     * @type {number}
     * @memberof OrdersApiListOrdersV3
     */
    readonly pageSize?: number;
    /**
     * Cursor
     * @type {string}
     * @memberof OrdersApiListOrdersV3
     */
    readonly cursor?: string;
    /**
     * Property to sort by
     * @type {'created_at' | 'expired_at' | 'sell_quantity' | 'buy_quantity' | 'buy_quantity_with_fees' | 'updated_at'}
     * @memberof OrdersApiListOrdersV3
     */
    readonly orderBy?: 'created_at' | 'expired_at' | 'sell_quantity' | 'buy_quantity' | 'buy_quantity_with_fees' | 'updated_at';
    /**
     * Direction to sort (asc/desc)
     * @type {string}
     * @memberof OrdersApiListOrdersV3
     */
    readonly direction?: string;
    /**
     * Ethereum address of the user who submitted this order
     * @type {string}
     * @memberof OrdersApiListOrdersV3
     */
    readonly user?: string;
    /**
     * Status of this order
     * @type {'active' | 'filled' | 'cancelled' | 'expired' | 'inactive'}
     * @memberof OrdersApiListOrdersV3
     */
    readonly status?: 'active' | 'filled' | 'cancelled' | 'expired' | 'inactive';
    /**
     * Filter orders to include those with created_at timestamps after this time, in ISO 8601 UTC format. Example: \&#39;2022-05-27T00:10:22Z\&#39;
     * @type {string}
     * @memberof OrdersApiListOrdersV3
     */
    readonly minTimestamp?: string;
    /**
     * Filter orders to include those with created_at timestamps before this time, in ISO 8601 UTC format. Example: \&#39;2022-05-27T00:10:22Z\&#39;
     * @type {string}
     * @memberof OrdersApiListOrdersV3
     */
    readonly maxTimestamp?: string;
    /**
     * Filter orders to include those with updated_at timestamps after this time, in ISO 8601 UTC format. Example: \&#39;2022-05-27T00:10:22Z\&#39;
     * @type {string}
     * @memberof OrdersApiListOrdersV3
     */
    readonly updatedMinTimestamp?: string;
    /**
     * Filter orders to include those with updated_at timestamps before this time, in ISO 8601 UTC format. Example: \&#39;2022-05-27T00:10:22Z\&#39;
     * @type {string}
     * @memberof OrdersApiListOrdersV3
     */
    readonly updatedMaxTimestamp?: string;
    /**
     * Token type of the asset this order buys
     * @type {string}
     * @memberof OrdersApiListOrdersV3
     */
    readonly buyTokenType?: string;
    /**
     * ERC721 Token ID of the asset this order buys
     * @type {string}
     * @memberof OrdersApiListOrdersV3
     */
    readonly buyTokenId?: string;
    /**
     * Internal IMX ID of the asset this order buys
     * @type {string}
     * @memberof OrdersApiListOrdersV3
     */
    readonly buyAssetId?: string;
    /**
     * Token address of the asset this order buys
     * @type {string}
     * @memberof OrdersApiListOrdersV3
     */
    readonly buyTokenAddress?: string;
    /**
     * Token name of the asset this order buys
     * @type {string}
     * @memberof OrdersApiListOrdersV3
     */
    readonly buyTokenName?: string;
    /**
     * Min quantity for the asset this order buys
     * @type {string}
     * @memberof OrdersApiListOrdersV3
     */
    readonly buyMinQuantity?: string;
    /**
     * Max quantity for the asset this order buys
     * @type {string}
     * @memberof OrdersApiListOrdersV3
     */
    readonly buyMaxQuantity?: string;
    /**
     * JSON-encoded metadata filters for the asset this order buys
     * @type {string}
     * @memberof OrdersApiListOrdersV3
     */
    readonly buyMetadata?: string;
    /**
     * Token type of the asset this order sells
     * @type {string}
     * @memberof OrdersApiListOrdersV3
     */
    readonly sellTokenType?: string;
    /**
     * ERC721 Token ID of the asset this order sells
     * @type {string}
     * @memberof OrdersApiListOrdersV3
     */
    readonly sellTokenId?: string;
    /**
     * Internal IMX ID of the asset this order sells
     * @type {string}
     * @memberof OrdersApiListOrdersV3
     */
    readonly sellAssetId?: string;
    /**
     * Token address of the asset this order sells
     * @type {string}
     * @memberof OrdersApiListOrdersV3
     */
    readonly sellTokenAddress?: string;
    /**
     * Token name of the asset this order sells
     * @type {string}
     * @memberof OrdersApiListOrdersV3
     */
    readonly sellTokenName?: string;
    /**
     * Min quantity for the asset this order sells
     * @type {string}
     * @memberof OrdersApiListOrdersV3
     */
    readonly sellMinQuantity?: string;
    /**
     * Max quantity for the asset this order sells
     * @type {string}
     * @memberof OrdersApiListOrdersV3
     */
    readonly sellMaxQuantity?: string;
    /**
     * JSON-encoded metadata filters for the asset this order sells
     * @type {string}
     * @memberof OrdersApiListOrdersV3
     */
    readonly sellMetadata?: string;
    /**
     * Comma separated string of fee percentages that are to be paired with auxiliary_fee_recipients
     * @type {string}
     * @memberof OrdersApiListOrdersV3
     */
    readonly auxiliaryFeePercentages?: string;
    /**
     * Comma separated string of fee recipients that are to be paired with auxiliary_fee_percentages
     * @type {string}
     * @memberof OrdersApiListOrdersV3
     */
    readonly auxiliaryFeeRecipients?: string;
    /**
     * Set flag to true to include fee object for orders
     * @type {boolean}
     * @memberof OrdersApiListOrdersV3
     */
    readonly includeFees?: boolean;
}
/**
 * OrdersApi - object-oriented interface
 * @export
 * @class OrdersApi
 * @extends {BaseAPI}
 */
declare class OrdersApi extends BaseAPI {
    /**
     * Cancel an order. Use https://docs.x.immutable.com/reference#/operations/getSignableCancelOrder to get request body params.  This version of the endpoint is deprecated, the latest version can be found at https://docs.x.immutable.com/reference/#/operations/cancelOrderV3.  Deprecation date - Mon, 01 May 2023  Sunset date - Fri, 01 Sept 2023
     * @summary Cancel an order
     * @param {OrdersApiCancelOrderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    cancelOrder(requestParameters: OrdersApiCancelOrderRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<CancelOrderResponse, any>>;
    /**
     * Cancel an order (V3)
     * @summary Cancel an order (V3)
     * @param {OrdersApiCancelOrderV3Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    cancelOrderV3(requestParameters: OrdersApiCancelOrderV3Request, options?: AxiosRequestConfig): Promise<AxiosResponse<CancelOrderResponse, any>>;
    /**
     * Create an order. Use https://docs.x.immutable.com/reference#/operations/getSignableOrder to get request body params.  This version of the endpoint is deprecated, the latest version can be found at https://docs.x.immutable.com/reference/#/operations/createOrderV3.  Deprecation date - Mon, 01 May 2023  Sunset date - Fri, 01 Sept 2023
     * @summary Create an order
     * @param {OrdersApiCreateOrderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    createOrder(requestParameters: OrdersApiCreateOrderRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<CreateOrderResponse, any>>;
    /**
     * Create an order using the v3 orderbook. Currently only buy NFT orders are supported.
     * @summary Create an order (V3)
     * @param {OrdersApiCreateOrderV3Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    createOrderV3(requestParameters: OrdersApiCreateOrderV3Request, options?: AxiosRequestConfig): Promise<AxiosResponse<CreateOrderResponse, any>>;
    /**
     * Get an order.  This version of the endpoint is deprecated, the latest version can be found at https://docs.x.immutable.com/reference/#/operations/getOrderV3.  Deprecation date - Mon, 01 May 2023  Sunset date - Fri, 01 Sept 2023
     * @summary Get an order
     * @param {OrdersApiGetOrderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    getOrder(requestParameters: OrdersApiGetOrderRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<Order, any>>;
    /**
     * Get an order (V3)
     * @summary Get an order (V3)
     * @param {OrdersApiGetOrderV3Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    getOrderV3(requestParameters: OrdersApiGetOrderV3Request, options?: AxiosRequestConfig): Promise<AxiosResponse<OrderV3, any>>;
    /**
     * Sign cancel order message.  This version of the endpoint is deprecated, the latest version can be found at https://docs.x.immutable.com/reference/#/operations/getSignableCancelOrderV3.  Deprecation date - Mon, 01 May 2023  Sunset date - Fri, 01 Sept 2023
     * @summary Sign cancel order message
     * @param {OrdersApiGetSignableCancelOrderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    getSignableCancelOrder(requestParameters: OrdersApiGetSignableCancelOrderRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<GetSignableCancelOrderResponse, any>>;
    /**
     * Generate a signable cancel order message (V3)
     * @summary Generate a signable cancel order message (V3)
     * @param {OrdersApiGetSignableCancelOrderV3Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    getSignableCancelOrderV3(requestParameters: OrdersApiGetSignableCancelOrderV3Request, options?: AxiosRequestConfig): Promise<AxiosResponse<GetSignableCancelOrderResponse, any>>;
    /**
     * Generate a signable order request (V3)
     * @summary Generate a signable order request (V3)
     * @param {OrdersApiGetSignableOrderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    getSignableOrder(requestParameters: OrdersApiGetSignableOrderRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<GetSignableOrderResponse, any>>;
    /**
     * Get a list of orders  This version of the endpoint is deprecated, the latest version can be found at https://docs.x.immutable.com/reference/#/operations/listOrdersV3.  Deprecation date - Mon, 01 May 2023  Sunset date - Fri, 01 Sept 2023
     * @summary Get a list of orders.
     * @param {OrdersApiListOrdersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    listOrders(requestParameters?: OrdersApiListOrdersRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<ListOrdersResponse, any>>;
    /**
     * Get a list of orders (V3)
     * @summary Get a list of orders (V3)
     * @param {OrdersApiListOrdersV3Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    listOrdersV3(requestParameters?: OrdersApiListOrdersV3Request, options?: AxiosRequestConfig): Promise<AxiosResponse<ListOrdersResponseV3, any>>;
}
/**
 * Request parameters for createProject operation in ProjectsApi.
 * @export
 * @interface ProjectsApiCreateProjectRequest
 */
interface ProjectsApiCreateProjectRequest {
    /**
     * String created by signing wallet address and timestamp
     * @type {string}
     * @memberof ProjectsApiCreateProject
     */
    readonly iMXSignature: string;
    /**
     * Unix Epoc timestamp
     * @type {string}
     * @memberof ProjectsApiCreateProject
     */
    readonly iMXTimestamp: string;
    /**
     * create a project
     * @type {CreateProjectRequest}
     * @memberof ProjectsApiCreateProject
     */
    readonly createProjectRequest: CreateProjectRequest;
}
/**
 * Request parameters for getProject operation in ProjectsApi.
 * @export
 * @interface ProjectsApiGetProjectRequest
 */
interface ProjectsApiGetProjectRequest {
    /**
     * Project ID
     * @type {string}
     * @memberof ProjectsApiGetProject
     */
    readonly id: string;
    /**
     * String created by signing wallet address and timestamp
     * @type {string}
     * @memberof ProjectsApiGetProject
     */
    readonly iMXSignature: string;
    /**
     * Unix Epoc timestamp
     * @type {string}
     * @memberof ProjectsApiGetProject
     */
    readonly iMXTimestamp: string;
}
/**
 * Request parameters for getProjects operation in ProjectsApi.
 * @export
 * @interface ProjectsApiGetProjectsRequest
 */
interface ProjectsApiGetProjectsRequest {
    /**
     * String created by signing wallet address and timestamp
     * @type {string}
     * @memberof ProjectsApiGetProjects
     */
    readonly iMXSignature: string;
    /**
     * Unix Epoc timestamp
     * @type {string}
     * @memberof ProjectsApiGetProjects
     */
    readonly iMXTimestamp: string;
    /**
     * Page size of the result
     * @type {number}
     * @memberof ProjectsApiGetProjects
     */
    readonly pageSize?: number;
    /**
     * Cursor
     * @type {string}
     * @memberof ProjectsApiGetProjects
     */
    readonly cursor?: string;
    /**
     * Property to sort by
     * @type {string}
     * @memberof ProjectsApiGetProjects
     */
    readonly orderBy?: string;
    /**
     * Direction to sort (asc/desc)
     * @type {string}
     * @memberof ProjectsApiGetProjects
     */
    readonly direction?: string;
}
/**
 * ProjectsApi - object-oriented interface
 * @export
 * @class ProjectsApi
 * @extends {BaseAPI}
 */
declare class ProjectsApi extends BaseAPI {
    /**
     * Create a project
     * @summary Create a project
     * @param {ProjectsApiCreateProjectRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    createProject(requestParameters: ProjectsApiCreateProjectRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<CreateProjectResponse, any>>;
    /**
     * Get a project
     * @summary Get a project
     * @param {ProjectsApiGetProjectRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    getProject(requestParameters: ProjectsApiGetProjectRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<Project, any>>;
    /**
     * Get projects
     * @summary Get projects
     * @param {ProjectsApiGetProjectsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    getProjects(requestParameters: ProjectsApiGetProjectsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<GetProjectsResponse, any>>;
}
/**
 * Request parameters for getToken operation in TokensApi.
 * @export
 * @interface TokensApiGetTokenRequest
 */
interface TokensApiGetTokenRequest {
    /**
     * Token Contract Address
     * @type {string}
     * @memberof TokensApiGetToken
     */
    readonly address: string;
}
/**
 * Request parameters for listTokens operation in TokensApi.
 * @export
 * @interface TokensApiListTokensRequest
 */
interface TokensApiListTokensRequest {
    /**
     * Page size of the result
     * @type {number}
     * @memberof TokensApiListTokens
     */
    readonly pageSize?: number;
    /**
     * Cursor
     * @type {string}
     * @memberof TokensApiListTokens
     */
    readonly cursor?: string;
    /**
     * Property to sort by
     * @type {'contract_address' | 'name' | 'symbol'}
     * @memberof TokensApiListTokens
     */
    readonly orderBy?: 'contract_address' | 'name' | 'symbol';
    /**
     * Direction to sort (asc/desc)
     * @type {string}
     * @memberof TokensApiListTokens
     */
    readonly direction?: string;
    /**
     * Contract address of the token
     * @type {string}
     * @memberof TokensApiListTokens
     */
    readonly address?: string;
    /**
     * Token symbols for the token, e.g. ?symbols&#x3D;IMX,ETH
     * @type {string}
     * @memberof TokensApiListTokens
     */
    readonly symbols?: string;
}
/**
 * TokensApi - object-oriented interface
 * @export
 * @class TokensApi
 * @extends {BaseAPI}
 */
declare class TokensApi extends BaseAPI {
    /**
     * Get details of a token
     * @summary Get details of a token
     * @param {TokensApiGetTokenRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TokensApi
     */
    getToken(requestParameters: TokensApiGetTokenRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<TokenDetails, any>>;
    /**
     * Get a list of tokens
     * @summary Get a list of tokens
     * @param {TokensApiListTokensRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TokensApi
     */
    listTokens(requestParameters?: TokensApiListTokensRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<ListTokensResponse, any>>;
}
/**
 * Request parameters for createTrade operation in TradesApi.
 * @export
 * @interface TradesApiCreateTradeRequest
 */
interface TradesApiCreateTradeRequest {
    /**
     * create a trade
     * @type {CreateTradeRequestV1}
     * @memberof TradesApiCreateTrade
     */
    readonly createTradeRequest: CreateTradeRequestV1;
    /**
     * eth address
     * @type {string}
     * @memberof TradesApiCreateTrade
     */
    readonly xImxEthAddress?: string;
    /**
     * eth signature
     * @type {string}
     * @memberof TradesApiCreateTrade
     */
    readonly xImxEthSignature?: string;
    /**
     * Authorization header
     * @type {string}
     * @memberof TradesApiCreateTrade
     */
    readonly authorization?: string;
}
/**
 * Request parameters for createTradeV3 operation in TradesApi.
 * @export
 * @interface TradesApiCreateTradeV3Request
 */
interface TradesApiCreateTradeV3Request {
    /**
     * create a trade
     * @type {TradesCreateTradeRequest}
     * @memberof TradesApiCreateTradeV3
     */
    readonly createTradeRequest: TradesCreateTradeRequest;
    /**
     * eth address
     * @type {string}
     * @memberof TradesApiCreateTradeV3
     */
    readonly xImxEthAddress?: string;
    /**
     * eth signature
     * @type {string}
     * @memberof TradesApiCreateTradeV3
     */
    readonly xImxEthSignature?: string;
    /**
     * Authorization header
     * @type {string}
     * @memberof TradesApiCreateTradeV3
     */
    readonly authorization?: string;
}
/**
 * Request parameters for getSignableTrade operation in TradesApi.
 * @export
 * @interface TradesApiGetSignableTradeRequest
 */
interface TradesApiGetSignableTradeRequest {
    /**
     * get a signable trade
     * @type {GetSignableTradeRequest}
     * @memberof TradesApiGetSignableTrade
     */
    readonly getSignableTradeRequest: GetSignableTradeRequest;
}
/**
 * Request parameters for getTrade operation in TradesApi.
 * @export
 * @interface TradesApiGetTradeRequest
 */
interface TradesApiGetTradeRequest {
    /**
     * Trade ID
     * @type {string}
     * @memberof TradesApiGetTrade
     */
    readonly id: string;
}
/**
 * Request parameters for listTrades operation in TradesApi.
 * @export
 * @interface TradesApiListTradesRequest
 */
interface TradesApiListTradesRequest {
    /**
     * Party A\&#39;s (buy order) token type of currency used to buy
     * @type {string}
     * @memberof TradesApiListTrades
     */
    readonly partyATokenType?: string;
    /**
     * Party A\&#39;s (buy order) token address of currency used to buy
     * @type {string}
     * @memberof TradesApiListTrades
     */
    readonly partyATokenAddress?: string;
    /**
     * Party B\&#39;s (sell order) token type of NFT sold - always ERC721
     * @type {string}
     * @memberof TradesApiListTrades
     */
    readonly partyBTokenType?: string;
    /**
     * Party B\&#39;s (sell order) collection address of NFT sold
     * @type {string}
     * @memberof TradesApiListTrades
     */
    readonly partyBTokenAddress?: string;
    /**
     * Party B\&#39;s (sell order) token id of NFT sold
     * @type {string}
     * @memberof TradesApiListTrades
     */
    readonly partyBTokenId?: string;
    /**
     * Page size of the result
     * @type {number}
     * @memberof TradesApiListTrades
     */
    readonly pageSize?: number;
    /**
     * Cursor
     * @type {string}
     * @memberof TradesApiListTrades
     */
    readonly cursor?: string;
    /**
     * Property to sort by
     * @type {'created_at' | 'transaction_id' | 'party_a_sold_quantity' | 'party_b_sold_quantity'}
     * @memberof TradesApiListTrades
     */
    readonly orderBy?: 'created_at' | 'transaction_id' | 'party_a_sold_quantity' | 'party_b_sold_quantity';
    /**
     * Direction to sort (asc/desc)
     * @type {string}
     * @memberof TradesApiListTrades
     */
    readonly direction?: string;
    /**
     * Minimum timestamp for this trade, in ISO 8601 UTC format. Example: \&#39;2022-05-27T00:10:22Z\&#39;
     * @type {string}
     * @memberof TradesApiListTrades
     */
    readonly minTimestamp?: string;
    /**
     * Maximum timestamp for this trade, in ISO 8601 UTC format. Example: \&#39;2022-05-27T00:10:22Z\&#39;
     * @type {string}
     * @memberof TradesApiListTrades
     */
    readonly maxTimestamp?: string;
}
/**
 * Request parameters for listTradesV3 operation in TradesApi.
 * @export
 * @interface TradesApiListTradesV3Request
 */
interface TradesApiListTradesV3Request {
    /**
     * Party A\&#39;s (buy order) token type of currency used to buy
     * @type {string}
     * @memberof TradesApiListTradesV3
     */
    readonly partyATokenType?: string;
    /**
     * Party A\&#39;s (buy order) token address of currency used to buy
     * @type {string}
     * @memberof TradesApiListTradesV3
     */
    readonly partyATokenAddress?: string;
    /**
     * Party B\&#39;s (sell order) token type of NFT sold - always ERC721
     * @type {string}
     * @memberof TradesApiListTradesV3
     */
    readonly partyBTokenType?: string;
    /**
     * Party B\&#39;s (sell order) collection address of NFT sold
     * @type {string}
     * @memberof TradesApiListTradesV3
     */
    readonly partyBTokenAddress?: string;
    /**
     * Party B\&#39;s (sell order) token id of NFT sold
     * @type {string}
     * @memberof TradesApiListTradesV3
     */
    readonly partyBTokenId?: string;
    /**
     * Page size of the result
     * @type {number}
     * @memberof TradesApiListTradesV3
     */
    readonly pageSize?: number;
    /**
     * Cursor
     * @type {string}
     * @memberof TradesApiListTradesV3
     */
    readonly cursor?: string;
    /**
     * Property to sort by
     * @type {'created_at' | 'transaction_id' | 'party_a_sold_quantity' | 'party_b_sold_quantity' | 'timestamp' | 'updated_timestamp'}
     * @memberof TradesApiListTradesV3
     */
    readonly orderBy?: 'created_at' | 'transaction_id' | 'party_a_sold_quantity' | 'party_b_sold_quantity' | 'timestamp' | 'updated_timestamp';
    /**
     * Direction to sort (asc/desc)
     * @type {string}
     * @memberof TradesApiListTradesV3
     */
    readonly direction?: string;
    /**
     * Minimum timestamp for this trade, in ISO 8601 UTC format. Example: \&#39;2022-05-27T00:10:22Z\&#39;
     * @type {string}
     * @memberof TradesApiListTradesV3
     */
    readonly minTimestamp?: string;
    /**
     * Maximum timestamp for this trade, in ISO 8601 UTC format. Example: \&#39;2022-05-27T00:10:22Z\&#39;
     * @type {string}
     * @memberof TradesApiListTradesV3
     */
    readonly maxTimestamp?: string;
}
/**
 * TradesApi - object-oriented interface
 * @export
 * @class TradesApi
 * @extends {BaseAPI}
 */
declare class TradesApi extends BaseAPI {
    /**
     * Create a trade. Use https://docs.x.immutable.com/reference#/operations/getSignableTrade to get request body params.  This version of the endpoint is deprecated, the latest version can be found at https://docs.x.immutable.com/reference/#/operations/createTradeV3.  Deprecation date - Mon, 01 May 2023  Sunset date - Fri, 01 Sept 2023
     * @summary Create a Trade between two parties
     * @param {TradesApiCreateTradeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof TradesApi
     */
    createTrade(requestParameters: TradesApiCreateTradeRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<CreateTradeResponse, any>>;
    /**
     * Create a Trade. Currently only buy order is supported.
     * @summary Create a Trade (V3)
     * @param {TradesApiCreateTradeV3Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TradesApi
     */
    createTradeV3(requestParameters: TradesApiCreateTradeV3Request, options?: AxiosRequestConfig): Promise<AxiosResponse<CreateTradeResponse, any>>;
    /**
     * Generate a signable trade message (V3)
     * @summary Generate a signable trade message (V3)
     * @param {TradesApiGetSignableTradeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TradesApi
     */
    getSignableTrade(requestParameters: TradesApiGetSignableTradeRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<GetSignableTradeResponse, any>>;
    /**
     * Get details of a trade with the given ID
     * @summary Get details of a trade with the given ID
     * @param {TradesApiGetTradeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TradesApi
     */
    getTrade(requestParameters: TradesApiGetTradeRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<Trade, any>>;
    /**
     * Get a list of trades.  This version of the endpoint is deprecated, the latest version can be found at https://docs.x.immutable.com/reference/#/operations/listTradesV3.  Deprecation date - Mon, 01 May 2023  Sunset date - Fri, 01 Sept 2023
     * @summary Get a list of trades
     * @param {TradesApiListTradesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof TradesApi
     */
    listTrades(requestParameters?: TradesApiListTradesRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<ListTradesResponse, any>>;
    /**
     * Get a list of trades (V3)
     * @summary Get a list of trades (V3)
     * @param {TradesApiListTradesV3Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TradesApi
     */
    listTradesV3(requestParameters?: TradesApiListTradesV3Request, options?: AxiosRequestConfig): Promise<AxiosResponse<ListTradesResponse, any>>;
}
/**
 * Request parameters for createTransfer operation in TransfersApi.
 * @export
 * @interface TransfersApiCreateTransferRequest
 */
interface TransfersApiCreateTransferRequest {
    /**
     * Create transfer
     * @type {CreateTransferRequest}
     * @memberof TransfersApiCreateTransfer
     */
    readonly createTransferRequestV2: CreateTransferRequest;
    /**
     * eth address
     * @type {string}
     * @memberof TransfersApiCreateTransfer
     */
    readonly xImxEthAddress?: string;
    /**
     * eth signature
     * @type {string}
     * @memberof TransfersApiCreateTransfer
     */
    readonly xImxEthSignature?: string;
    /**
     * Authorization header
     * @type {string}
     * @memberof TransfersApiCreateTransfer
     */
    readonly authorization?: string;
}
/**
 * Request parameters for createTransferV1 operation in TransfersApi.
 * @export
 * @interface TransfersApiCreateTransferV1Request
 */
interface TransfersApiCreateTransferV1Request {
    /**
     * Create transfer
     * @type {CreateTransferRequestV1}
     * @memberof TransfersApiCreateTransferV1
     */
    readonly createTransferRequest: CreateTransferRequestV1;
    /**
     * eth address
     * @type {string}
     * @memberof TransfersApiCreateTransferV1
     */
    readonly xImxEthAddress?: string;
    /**
     * eth signature
     * @type {string}
     * @memberof TransfersApiCreateTransferV1
     */
    readonly xImxEthSignature?: string;
    /**
     * Authorization header
     * @type {string}
     * @memberof TransfersApiCreateTransferV1
     */
    readonly authorization?: string;
}
/**
 * Request parameters for getSignableTransfer operation in TransfersApi.
 * @export
 * @interface TransfersApiGetSignableTransferRequest
 */
interface TransfersApiGetSignableTransferRequest {
    /**
     * get details of signable transfer
     * @type {GetSignableTransferRequest}
     * @memberof TransfersApiGetSignableTransfer
     */
    readonly getSignableTransferRequestV2: GetSignableTransferRequest;
}
/**
 * Request parameters for getSignableTransferV1 operation in TransfersApi.
 * @export
 * @interface TransfersApiGetSignableTransferV1Request
 */
interface TransfersApiGetSignableTransferV1Request {
    /**
     * get details of signable transfer
     * @type {GetSignableTransferRequestV1}
     * @memberof TransfersApiGetSignableTransferV1
     */
    readonly getSignableTransferRequest: GetSignableTransferRequestV1;
}
/**
 * Request parameters for getTransfer operation in TransfersApi.
 * @export
 * @interface TransfersApiGetTransferRequest
 */
interface TransfersApiGetTransferRequest {
    /**
     * Transfer ID
     * @type {string}
     * @memberof TransfersApiGetTransfer
     */
    readonly id: string;
}
/**
 * Request parameters for listTransfers operation in TransfersApi.
 * @export
 * @interface TransfersApiListTransfersRequest
 */
interface TransfersApiListTransfersRequest {
    /**
     * Page size of the result
     * @type {number}
     * @memberof TransfersApiListTransfers
     */
    readonly pageSize?: number;
    /**
     * Cursor
     * @type {string}
     * @memberof TransfersApiListTransfers
     */
    readonly cursor?: string;
    /**
     * Property to sort by
     * @type {'transaction_id' | 'updated_at' | 'created_at' | 'sender_ether_key' | 'receiver_ether_key'}
     * @memberof TransfersApiListTransfers
     */
    readonly orderBy?: 'transaction_id' | 'updated_at' | 'created_at' | 'sender_ether_key' | 'receiver_ether_key';
    /**
     * Direction to sort (asc/desc)
     * @type {string}
     * @memberof TransfersApiListTransfers
     */
    readonly direction?: string;
    /**
     * Ethereum address of the user who submitted this transfer
     * @type {string}
     * @memberof TransfersApiListTransfers
     */
    readonly user?: string;
    /**
     * Ethereum address of the user who received this transfer
     * @type {string}
     * @memberof TransfersApiListTransfers
     */
    readonly receiver?: string;
    /**
     * Status of this transfer
     * @type {'success' | 'failure'}
     * @memberof TransfersApiListTransfers
     */
    readonly status?: 'success' | 'failure';
    /**
     * Minimum timestamp for this transfer, in ISO 8601 UTC format. Example: \&#39;2022-05-27T00:10:22Z\&#39;
     * @type {string}
     * @memberof TransfersApiListTransfers
     */
    readonly minTimestamp?: string;
    /**
     * Maximum timestamp for this transfer, in ISO 8601 UTC format. Example: \&#39;2022-05-27T00:10:22Z\&#39;
     * @type {string}
     * @memberof TransfersApiListTransfers
     */
    readonly maxTimestamp?: string;
    /**
     * Token type of the transferred asset
     * @type {string}
     * @memberof TransfersApiListTransfers
     */
    readonly tokenType?: string;
    /**
     * ERC721 Token ID of the minted asset
     * @type {string}
     * @memberof TransfersApiListTransfers
     */
    readonly tokenId?: string;
    /**
     * Internal IMX ID of the minted asset
     * @type {string}
     * @memberof TransfersApiListTransfers
     */
    readonly assetId?: string;
    /**
     * Token address of the transferred asset
     * @type {string}
     * @memberof TransfersApiListTransfers
     */
    readonly tokenAddress?: string;
    /**
     * Token name of the transferred asset
     * @type {string}
     * @memberof TransfersApiListTransfers
     */
    readonly tokenName?: string;
    /**
     * Max quantity for the transferred asset
     * @type {string}
     * @memberof TransfersApiListTransfers
     */
    readonly minQuantity?: string;
    /**
     * Max quantity for the transferred asset
     * @type {string}
     * @memberof TransfersApiListTransfers
     */
    readonly maxQuantity?: string;
    /**
     * JSON-encoded metadata filters for the transferred asset
     * @type {string}
     * @memberof TransfersApiListTransfers
     */
    readonly metadata?: string;
}
/**
 * TransfersApi - object-oriented interface
 * @export
 * @class TransfersApi
 * @extends {BaseAPI}
 */
declare class TransfersApi extends BaseAPI {
    /**
     * Create a new transfer request. Use https://docs.x.immutable.com/reference#/operations/getSignableTransfer to get request body params.
     * @summary Creates a transfer of multiple tokens between two parties
     * @param {TransfersApiCreateTransferRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransfersApi
     */
    createTransfer(requestParameters: TransfersApiCreateTransferRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<CreateTransferResponse, any>>;
    /**
     * Create a new transfer request. Use https://docs.x.immutable.com/reference#/operations/getSignableTransferV1 to get request body params.
     * @summary Creates a transfer of tokens between two parties
     * @param {TransfersApiCreateTransferV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransfersApi
     */
    createTransferV1(requestParameters: TransfersApiCreateTransferV1Request, options?: AxiosRequestConfig): Promise<AxiosResponse<CreateTransferResponseV1, any>>;
    /**
     * Gets bulk details of a signable transfer
     * @summary Gets bulk details of a signable transfer
     * @param {TransfersApiGetSignableTransferRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransfersApi
     */
    getSignableTransfer(requestParameters: TransfersApiGetSignableTransferRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<GetSignableTransferResponse, any>>;
    /**
     * Gets details of a signable transfer
     * @summary Gets details of a signable transfer
     * @param {TransfersApiGetSignableTransferV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransfersApi
     */
    getSignableTransferV1(requestParameters: TransfersApiGetSignableTransferV1Request, options?: AxiosRequestConfig): Promise<AxiosResponse<GetSignableTransferResponseV1, any>>;
    /**
     * Get details of a transfer with the given ID
     * @summary Get details of a transfer with the given ID
     * @param {TransfersApiGetTransferRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransfersApi
     */
    getTransfer(requestParameters: TransfersApiGetTransferRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<Transfer, any>>;
    /**
     * Get a list of transfers
     * @summary Get a list of transfers
     * @param {TransfersApiListTransfersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransfersApi
     */
    listTransfers(requestParameters?: TransfersApiListTransfersRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<ListTransfersResponse, any>>;
}
/**
 * Request parameters for getSignableRegistration operation in UsersApi.
 * @export
 * @interface UsersApiGetSignableRegistrationRequest
 */
interface UsersApiGetSignableRegistrationRequest {
    /**
     * Register User
     * @type {GetSignableRegistrationRequest}
     * @memberof UsersApiGetSignableRegistration
     */
    readonly getSignableRegistrationRequest: GetSignableRegistrationRequest;
}
/**
 * Request parameters for getSignableRegistrationOffchain operation in UsersApi.
 * @export
 * @interface UsersApiGetSignableRegistrationOffchainRequest
 */
interface UsersApiGetSignableRegistrationOffchainRequest {
    /**
     * Register User Offchain
     * @type {GetSignableRegistrationRequest}
     * @memberof UsersApiGetSignableRegistrationOffchain
     */
    readonly getSignableRegistrationRequest: GetSignableRegistrationRequest;
}
/**
 * Request parameters for getUsers operation in UsersApi.
 * @export
 * @interface UsersApiGetUsersRequest
 */
interface UsersApiGetUsersRequest {
    /**
     * User
     * @type {string}
     * @memberof UsersApiGetUsers
     */
    readonly user: string;
}
/**
 * Request parameters for registerPassportUser operation in UsersApi.
 * @export
 * @interface UsersApiRegisterPassportUserRequest
 */
interface UsersApiRegisterPassportUserRequest {
    /**
     * Authorization header
     * @type {string}
     * @memberof UsersApiRegisterPassportUser
     */
    readonly authorization: string;
    /**
     * Register Passport User
     * @type {ApiRegisterPassportUserRequest}
     * @memberof UsersApiRegisterPassportUser
     */
    readonly registerPassportUserRequest: ApiRegisterPassportUserRequest;
}
/**
 * Request parameters for registerUser operation in UsersApi.
 * @export
 * @interface UsersApiRegisterUserRequest
 */
interface UsersApiRegisterUserRequest {
    /**
     * Register User
     * @type {RegisterUserRequest}
     * @memberof UsersApiRegisterUser
     */
    readonly registerUserRequest: RegisterUserRequest;
}
/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
declare class UsersApi extends BaseAPI {
    /**
     * Get operator signature to allow clients to register the user
     * @summary Get operator signature to allow clients to register the user
     * @param {UsersApiGetSignableRegistrationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    getSignableRegistration(requestParameters: UsersApiGetSignableRegistrationRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<GetSignableRegistrationResponse, any>>;
    /**
     * Get encoded details to allow clients to register the user offchain
     * @summary Get encoded details to allow clients to register the user offchain
     * @param {UsersApiGetSignableRegistrationOffchainRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    getSignableRegistrationOffchain(requestParameters: UsersApiGetSignableRegistrationOffchainRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<GetSignableRegistrationOffchainResponse, any>>;
    /**
     * Get stark keys for a registered user
     * @summary Get stark keys for a registered user
     * @param {UsersApiGetUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    getUsers(requestParameters: UsersApiGetUsersRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<GetUsersApiResponse, any>>;
    /**
     * Registers a passport user
     * @summary Registers a passport user
     * @param {UsersApiRegisterPassportUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    registerPassportUser(requestParameters: UsersApiRegisterPassportUserRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<object, any>>;
    /**
     * Registers a user
     * @summary Registers a user
     * @param {UsersApiRegisterUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    registerUser(requestParameters: UsersApiRegisterUserRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<RegisterUserResponse, any>>;
}
/**
 * Request parameters for createWithdrawal operation in WithdrawalsApi.
 * @export
 * @interface WithdrawalsApiCreateWithdrawalRequest
 */
interface WithdrawalsApiCreateWithdrawalRequest {
    /**
     * eth address
     * @type {string}
     * @memberof WithdrawalsApiCreateWithdrawal
     */
    readonly xImxEthAddress: string;
    /**
     * eth signature
     * @type {string}
     * @memberof WithdrawalsApiCreateWithdrawal
     */
    readonly xImxEthSignature: string;
    /**
     * create a withdrawal
     * @type {CreateWithdrawalRequest}
     * @memberof WithdrawalsApiCreateWithdrawal
     */
    readonly createWithdrawalRequest: CreateWithdrawalRequest;
}
/**
 * Request parameters for getSignableWithdrawal operation in WithdrawalsApi.
 * @export
 * @interface WithdrawalsApiGetSignableWithdrawalRequest
 */
interface WithdrawalsApiGetSignableWithdrawalRequest {
    /**
     * get details of signable withdrawal
     * @type {GetSignableWithdrawalRequest}
     * @memberof WithdrawalsApiGetSignableWithdrawal
     */
    readonly getSignableWithdrawalRequest: GetSignableWithdrawalRequest;
}
/**
 * Request parameters for getWithdrawal operation in WithdrawalsApi.
 * @export
 * @interface WithdrawalsApiGetWithdrawalRequest
 */
interface WithdrawalsApiGetWithdrawalRequest {
    /**
     * Withdrawal ID
     * @type {string}
     * @memberof WithdrawalsApiGetWithdrawal
     */
    readonly id: string;
}
/**
 * Request parameters for listWithdrawals operation in WithdrawalsApi.
 * @export
 * @interface WithdrawalsApiListWithdrawalsRequest
 */
interface WithdrawalsApiListWithdrawalsRequest {
    /**
     * Withdrawal has been transferred to user\&#39;s Layer 1 wallet
     * @type {boolean}
     * @memberof WithdrawalsApiListWithdrawals
     */
    readonly withdrawnToWallet?: boolean;
    /**
     * Status of the on-chain batch confirmation for this withdrawal
     * @type {string}
     * @memberof WithdrawalsApiListWithdrawals
     */
    readonly rollupStatus?: string;
    /**
     * Page size of the result
     * @type {number}
     * @memberof WithdrawalsApiListWithdrawals
     */
    readonly pageSize?: number;
    /**
     * Cursor
     * @type {string}
     * @memberof WithdrawalsApiListWithdrawals
     */
    readonly cursor?: string;
    /**
     * Property to sort by
     * @type {string}
     * @memberof WithdrawalsApiListWithdrawals
     */
    readonly orderBy?: string;
    /**
     * Direction to sort (asc/desc)
     * @type {string}
     * @memberof WithdrawalsApiListWithdrawals
     */
    readonly direction?: string;
    /**
     * Ethereum address of the user who submitted this withdrawal
     * @type {string}
     * @memberof WithdrawalsApiListWithdrawals
     */
    readonly user?: string;
    /**
     * Status of this withdrawal
     * @type {string}
     * @memberof WithdrawalsApiListWithdrawals
     */
    readonly status?: string;
    /**
     * Minimum timestamp for this deposit, in ISO 8601 UTC format. Example: \&#39;2022-05-27T00:10:22Z\&#39;
     * @type {string}
     * @memberof WithdrawalsApiListWithdrawals
     */
    readonly minTimestamp?: string;
    /**
     * Maximum timestamp for this deposit, in ISO 8601 UTC format. Example: \&#39;2022-05-27T00:10:22Z\&#39;
     * @type {string}
     * @memberof WithdrawalsApiListWithdrawals
     */
    readonly maxTimestamp?: string;
    /**
     * Token type of the withdrawn asset
     * @type {string}
     * @memberof WithdrawalsApiListWithdrawals
     */
    readonly tokenType?: string;
    /**
     * ERC721 Token ID of the minted asset
     * @type {string}
     * @memberof WithdrawalsApiListWithdrawals
     */
    readonly tokenId?: string;
    /**
     * Internal IMX ID of the minted asset
     * @type {string}
     * @memberof WithdrawalsApiListWithdrawals
     */
    readonly assetId?: string;
    /**
     * Token address of the withdrawn asset
     * @type {string}
     * @memberof WithdrawalsApiListWithdrawals
     */
    readonly tokenAddress?: string;
    /**
     * Token name of the withdrawn asset
     * @type {string}
     * @memberof WithdrawalsApiListWithdrawals
     */
    readonly tokenName?: string;
    /**
     * Min quantity for the withdrawn asset
     * @type {string}
     * @memberof WithdrawalsApiListWithdrawals
     */
    readonly minQuantity?: string;
    /**
     * Max quantity for the withdrawn asset
     * @type {string}
     * @memberof WithdrawalsApiListWithdrawals
     */
    readonly maxQuantity?: string;
    /**
     * JSON-encoded metadata filters for the withdrawn asset
     * @type {string}
     * @memberof WithdrawalsApiListWithdrawals
     */
    readonly metadata?: string;
}
/**
 * WithdrawalsApi - object-oriented interface
 * @export
 * @class WithdrawalsApi
 * @extends {BaseAPI}
 */
declare class WithdrawalsApi extends BaseAPI {
    /**
     * Creates a withdrawal.
     * @summary Creates a withdrawal of a token
     * @param {WithdrawalsApiCreateWithdrawalRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WithdrawalsApi
     */
    createWithdrawal(requestParameters: WithdrawalsApiCreateWithdrawalRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<CreateWithdrawalResponse, any>>;
    /**
     * Gets details of a signable withdrawal
     * @summary Gets details of a signable withdrawal
     * @param {WithdrawalsApiGetSignableWithdrawalRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WithdrawalsApi
     */
    getSignableWithdrawal(requestParameters: WithdrawalsApiGetSignableWithdrawalRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<GetSignableWithdrawalResponse, any>>;
    /**
     * Gets details of withdrawal with the given ID
     * @summary Gets details of withdrawal with the given ID
     * @param {WithdrawalsApiGetWithdrawalRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WithdrawalsApi
     */
    getWithdrawal(requestParameters: WithdrawalsApiGetWithdrawalRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<Withdrawal, any>>;
    /**
     * Get a list of withdrawals
     * @summary Get a list of withdrawals
     * @param {WithdrawalsApiListWithdrawalsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WithdrawalsApi
     */
    listWithdrawals(requestParameters?: WithdrawalsApiListWithdrawalsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<ListWithdrawalsResponse, any>>;
}

/**
 * Parameter required to create an Order
 */
interface UnsignedOrderRequest {
    /**
     * The amount of tokens that will be bought for this order
     */
    buy: TokenAmount;
    /**
     * The amount of tokens that will be sold for this order
     */
    sell: TokenAmount;
    /**
     * ExpirationTimestamp in Unix time. Note: will be rounded down to the nearest hour
     */
    expiration_timestamp?: number;
    /**
     * Inclusion of either maker or taker fees
     */
    fees?: Array<FeeEntry>;
}
/**
 * Parameter required to create a Transfer
 */
declare type UnsignedTransferRequest = TokenAmount & {
    /**
     * Ethereum address of the receiving user
     */
    receiver: string;
};
/**
 * Parameter required to Mint tokens
 */
declare type UnsignedMintRequest = Omit<MintRequest, 'auth_signature'>;
/**
 * Parameter required to create a Transfer
 */
declare type UnsignedExchangeTransferRequest = ExchangeTokenAmount & {
    /**
     * Ethereum address of the receiving user
     */
    receiver: string;
    /**
     * Exchange transaction ID
     */
    transactionID: string;
};

/**
 * Parameter required to create a batchNftTransfer
 */
interface NftTransferDetails {
    /**
     * Ethereum address of the receiving user
     */
    receiver: string;
    /**
     * The token ID
     */
    tokenId: string;
    /**
     * The token contract address
     */
    tokenAddress: string;
}

/**
 * The configuration for the Ethereum network
 */
interface EthConfiguration {
    coreContractAddress: string;
    registrationContractAddress: string;
    chainID: number;
}
/**
 * The configuration for the ImmutableX client
 */
interface ImmutableXConfiguration {
    /**
     * The configuration for the API client
     */
    apiConfiguration: Configuration;
    /**
     * The configuration for the Ethereum network
     */
    ethConfiguration: EthConfiguration;
}

interface IMXProvider {
    /**
     * Get the Signer address
     *
     * @return {Promise<string>} Returns a promise that resolves with the signer's address
     */
    getAddress(): Promise<string>;
    /**
     * Register a User to Immutable X if they are not already registered
     *
     * @return {Promise<RegisterUserResponse>} Returns a promise that resolves with the user registration response
     */
    registerOffchain(): Promise<RegisterUserResponse>;
    /**
     * Checks if a User is registered on-chain
     *
     * @return {Promise<boolean>} Returns a promise that resolves with true if the User is registered, false otherwise
     */
    isRegisteredOnchain(): Promise<boolean>;
    /**
     * Create an Order
     *
     * @param {UnsignedOrderRequest} request The unsigned order request to create an order
     * @return {Promise<CreateOrderResponse>} Returns a promise that resolves with the created Order
     */
    createOrder(request: UnsignedOrderRequest): Promise<CreateOrderResponse>;
    /**
     * Cancel an Order
     *
     * @param {GetSignableCancelOrderRequest} request The signable cancel order request
     * @return {Promise<CancelOrderResponse>} Returns a promise that resolves with the cancelled Order
     */
    cancelOrder(request: GetSignableCancelOrderRequest): Promise<CancelOrderResponse>;
    /**
     * Create a Trade
     *
     * @param {GetSignableTradeRequest} request The signable trade request
     * @return {Promise<CreateTradeResponse>} Returns a promise that resolves with the created Trade
     */
    createTrade(request: GetSignableTradeRequest): Promise<CreateTradeResponse>;
    /**
     * Create a new Transfer request
     *
     * @param {UnsignedTransferRequest} request The unsigned transfer request
     * @return {Promise<CreateTransferResponseV1>} Returns a promise that resolves with the created Transfer
     */
    transfer(request: UnsignedTransferRequest): Promise<CreateTransferResponseV1>;
    /**
     * Create a batch of NFT transfer requests
     *
     * @param {Array<NftTransferDetails>} request An array of NFT transfer details
     * @return {Promise<CreateTransferResponse>} Resolves a promise that resolves with the list of Transfer IDs
     */
    batchNftTransfer(request: Array<NftTransferDetails>): Promise<CreateTransferResponse>;
    /**
     * Create a new Exchange transaction
     *
     * @param {UnsignedExchangeTransferRequest} request The unsigned exchange transfer request
     * @return {Promise<CreateTransferResponseV1>} Returns a promise that resolves with the created Exchange Transaction
     */
    exchangeTransfer(request: UnsignedExchangeTransferRequest): Promise<CreateTransferResponseV1>;
    /**
     * Deposit either ETH, ERC20 or ERC721 tokens
     *
     * @param {TokenAmount} request The token type amount in its corresponding unit
     * @return {Promise<TransactionResponse>} Returns a promise that resolves with the transaction
     */
    deposit(deposit: TokenAmount): Promise<TransactionResponse>;
    /**
     * Create a Withdrawal
     *
     * @param {TokenAmount} request The token type amount in its corresponding unit
     * @return {Promise<CreateWithdrawalResponse>} Returns a promise that resolves with the created Withdrawal
     */
    prepareWithdrawal(request: TokenAmount): Promise<CreateWithdrawalResponse>;
    /**
     * Completes a Withdrawal
     *
     * @param {string} starkPublicKey The stark public key
     * @param {AnyToken} token The token to withdraw
     * @return {Promise<TransactionResponse>} Returns a promise that resolves with the transaction
     */
    completeWithdrawal(starkPublicKey: string, token: AnyToken): Promise<TransactionResponse>;
}

interface ImxOverrides {
    immutableXConfig: ImmutableXConfiguration;
}
interface ImxModuleConfiguration extends ModuleConfiguration<ImxOverrides> {
}

declare class ImmutableXClient {
    private immutableX;
    depositsApi: DepositsApi;
    mintsApi: MintsApi;
    ordersApi: OrdersApi;
    tokensApi: TokensApi;
    tradesApi: TradesApi;
    transfersApi: TransfersApi;
    exchangeApi: ExchangesApi;
    nftCheckoutPrimaryApi: NftCheckoutPrimaryApi;
    usersApi: UsersApi;
    withdrawalsApi: WithdrawalsApi;
    balanceApi: BalancesApi;
    assetApi: AssetsApi;
    collectionApi: CollectionsApi;
    metadataApi: MetadataApi;
    metadataRefreshesApi: MetadataRefreshesApi;
    projectsApi: ProjectsApi;
    constructor(config: ImxModuleConfiguration);
    /**
     * Get details of a Deposit with the given ID
     * @param request - the request object containing the parameters to be provided in the API request
     * @returns a promise that resolves with the requested Deposit
     * @throws {@link index.IMXError}
     */
    getDeposit(request: DepositsApiGetDepositRequest): Promise<Deposit>;
    /**
     * Get a list of Deposits
     * @param request - optional object containing the parameters to be provided in the API request
     * @returns a promise that resolves with the requested list of Deposits
     * @throws {@link index.IMXError}
     */
    listDeposits(request?: DepositsApiListDepositsRequest): Promise<ListDepositsResponse>;
    /**
     * Get Stark keys for a registered User
     * @param ethAddress - the eth address of the User
     * @returns a promise that resolves with the requested User
     * @throws {@link index.IMXError}
     */
    getUser(ethAddress: string): Promise<GetUsersApiResponse>;
    /**
     * Get details of an Asset
     * @param request - the request object containing the parameters to be provided in the API request
     * @returns a promise that resolves with the requested Asset
     * @throws {@link index.IMXError}
     */
    getAsset(request: AssetsApiGetAssetRequest): Promise<Asset>;
    /**
     * Get a list of Assets
     * @param request - optional object containing the parameters to be provided in the API request
     * @returns a promise that resolves with the requested list of Assets
     * @throws {@link index.IMXError}
     */
    listAssets(request?: AssetsApiListAssetsRequest): Promise<ListAssetsResponse>;
    /**
     * Create a Collection
     * @param ethSigner - the L1 signer
     * @param request - the request object to be provided in the API request
     * @returns a promise that resolves with the created Collection
     * @throws {@link index.IMXError}
     */
    createCollection(ethSigner: Signer, request: CreateCollectionRequest): Promise<Collection>;
    /**
     * Get details of a Collection at the given address
     * @param request - the request object containing the parameters to be provided in the API request
     * @returns a promise that resolves with the requested Collection
     * @throws {@link index.IMXError}
     */
    getCollection(request: CollectionsApiGetCollectionRequest): Promise<Collection>;
    /**
     * Get a list of Collection filters
     * @param request - the request object containing the parameters to be provided in the API request
     * @returns a promise that resolves with the requested list of Collection Filters
     * @throws {@link index.IMXError}
     */
    listCollectionFilters(request: CollectionsApiListCollectionFiltersRequest): Promise<CollectionFilter>;
    /**
     * Get a list of Collections
     * @param request - optional object containing the parameters to be provided in the API request
     * @returns a promise that resolves with the requested list of Collections
     * @throws {@link index.IMXError}
     */
    listCollections(request?: CollectionsApiListCollectionsRequest): Promise<ListCollectionsResponse>;
    /**
     * Update a Collection
     * @param ethSigner - the L1 signer
     * @param collectionAddress - the Collection contract address
     * @param request - the request object containing the parameters to be provided in the API request
     * @returns a promise that resolves with the updated Collection
     * @throws {@link index.IMXError}
     */
    updateCollection(ethSigner: Signer, collectionAddress: string, request: UpdateCollectionRequest): Promise<Collection>;
    /**
     * Add metadata schema to Collection
     * @param ethSigner - the L1 signer
     * @param collectionAddress - the Collection contract address
     * @param request - the request object containing the parameters to be provided in the API request
     * @returns a promise that resolves with the SuccessResponse if successful
     * @throws {@link index.IMXError}
     */
    addMetadataSchemaToCollection(ethSigner: Signer, collectionAddress: string, request: AddMetadataSchemaToCollectionRequest): Promise<SuccessResponse>;
    /**
     * Get Metadata schema
     * @param request - the request object containing the parameters to be provided in the API request
     * @returns a promise that resolves with the requested Metadata schema
     * @throws {@link index.IMXError}
     */
    getMetadataSchema(request: MetadataApiGetMetadataSchemaRequest): Promise<MetadataSchemaProperty[]>;
    /**
     * Update metadata schema by name
     * @param ethSigner - the L1 signer
     * @param collectionAddress - the Collection contract address
     * @param name - the Metadata schema name
     * @param request - the request object containing the parameters to be provided in the API request
     * @returns a promise that resolves with the SuccessResponse if successful
     * @throws {@link index.IMXError}
     */
    updateMetadataSchemaByName(ethSigner: Signer, collectionAddress: string, name: string, request: MetadataSchemaRequest): Promise<SuccessResponse>;
    /**
     * Get a list of metadata refreshes
     * @param ethSigner - the L1 signer
     * @param collectionAddress - the Collection contract address
     * @param pageSize - the page size of the result
     * @param cursor - the cursor
     * @returns a promise that resolves with the requested metadata refreshes
     * @throws {@link index.IMXError}
     */
    listMetadataRefreshes(ethSigner: Signer, collectionAddress?: string, pageSize?: number, cursor?: string): Promise<GetMetadataRefreshes>;
    /**
     * Get a list of metadata refresh errors
     * @param ethSigner - the L1 signer
     * @param refreshId - the metadata refresh ID
     * @param pageSize - the page size of the result
     * @param cursor - the cursor
     * @returns a promise that resolves with the requested metadata refresh errors
     * @throws {@link index.IMXError}
     */
    getMetadataRefreshErrors(ethSigner: Signer, refreshId: string, pageSize?: number, cursor?: string): Promise<GetMetadataRefreshErrorsResponse>;
    /**
     * Get a list of metadata refresh results
     * @param ethSigner - the L1 signer
     * @param refreshId - the metadata refresh ID
     * @returns a promise that resolves with the requested metadata refresh results
     * @throws {@link index.IMXError}
     */
    getMetadataRefreshResults(ethSigner: Signer, refreshId: string): Promise<GetMetadataRefreshResponse>;
    /**
     * Request a metadata refresh
     * @param ethSigner - the L1 signer
     * @param request the request object containing the parameters to be provided in the API request
     * @returns a promise that resolves with the requested metadata refresh
     * @throws {@link index.IMXError}
     */
    createMetadataRefresh(ethSigner: Signer, request: CreateMetadataRefreshRequest): Promise<CreateMetadataRefreshResponse>;
    /**
     * Create a Project
     * @param ethSigner - the L1 signer
     * @param request - the request object containing the parameters to be provided in the API request
     * @returns a promise that resolves with the created Project
     * @throws {@link index.IMXError}
     */
    createProject(ethSigner: Signer, request: CreateProjectRequest): Promise<CreateProjectResponse>;
    /**
     * Get a Project
     * @param ethSigner - the L1 signer
     * @param id - the Project ID
     * @returns a promise that resolves with the requested Project
     * @throws {@link index.IMXError}
     */
    getProject(ethSigner: Signer, id: string): Promise<Project>;
    /**
     * Get Projects owned by the given User
     * @param ethSigner - the L1 signer
     * @param pageSize - the page size of the result
     * @param cursor - the cursor
     * @param orderBy - the property to sort by
     * @param direction - direction to sort (asc/desc)
     * @returns a promise that resolves with the requested Projects
     * @throws {@link index.IMXError}
     */
    getProjects(ethSigner: Signer, pageSize?: number, cursor?: string, orderBy?: string, direction?: string): Promise<GetProjectsResponse>;
    /**
     * Get the token Balances of the User
     * @param request - the request object containing the parameters to be provided in the API request
     * @returns a promise that resolves with the requested Balance
     * @throws {@link index.IMXError}
     */
    getBalance(request: BalancesApiGetBalanceRequest): Promise<Balance>;
    /**
     * Get a list of Balances for given User
     * @param request the request object containing the parameters to be provided in the API request
     * @returns a promise that resolves with the requested list of Balances
     * @throws {@link index.IMXError}
     */
    listBalances(request: BalancesApiListBalancesRequest): Promise<ListBalancesResponse>;
    /**
     * Get details of a Mint with the given ID
     * @param request the request object containing the parameters to be provided in the API request
     * @returns a promise that resolves with the requested Mint
     * @throws {@link index.IMXError}
     */
    getMint(request: MintsApiGetMintRequest): Promise<Mint[]>;
    /**
     * Get a list of Mints
     * @param request optional object containing the parameters to be provided in the API request
     * @returns a promise that resolves with the requested list of Mints
     * @throws {@link index.IMXError}
     */
    listMints(request?: MintsApiListMintsRequest): Promise<ListMintsResponse>;
    /**
     * Mint tokens in a batch with fees
     * @param ethSigner - the L1 signer
     * @param request - the request object to be provided in the API request
     * @returns a promise that resolves with the minted tokens
     * @throws {@link index.IMXError}
     */
    mint(ethSigner: Signer, request: UnsignedMintRequest): Promise<MintTokensResponse>;
    /**
     * Get a list of Withdrawals
     * @param request - optional object containing the parameters to be provided in the API request
     * @returns a promise that resolves with the requested list of Withdrawals
     * @throws {@link index.IMXError}
     */
    listWithdrawals(request?: WithdrawalsApiListWithdrawalsRequest): Promise<ListWithdrawalsResponse>;
    /**
     * Get details of Withdrawal with the given ID
     * @param request - the request object containing the parameters to be provided in the API request
     * @returns a promise that resolves with the requested Withdrawal
     * @throws {@link index.IMXError}
     */
    getWithdrawal(request: WithdrawalsApiGetWithdrawalRequest): Promise<Withdrawal>;
    /**
     * Get details of an Order with the given ID
     * @param request - the request object containing the parameters to be provided in the API request
     * @returns a promise that resolves with the requested Order
     * @throws {@link index.IMXError}
     */
    getOrder(request: OrdersApiGetOrderRequest): Promise<OrderV3>;
    /**
     * Get a list of Orders
     * @param request - optional object containing the parameters to be provided in the API request
     * @returns a promise that resolves with the requested list of Orders
     * @throws {@link index.IMXError}
     */
    listOrders(request?: OrdersApiListOrdersRequest): Promise<ListOrdersResponseV3>;
    /**
     * Get details of a Trade with the given ID
     * @param request - the request object containing the parameters to be provided in the API request
     * @returns a promise that resolves with the requested Trade
     * @throws {@link index.IMXError}
     */
    getTrade(request: TradesApiGetTradeRequest): Promise<Trade>;
    /**
     * Get a list of Trades
     * @param request - optional object containing the parameters to be provided in the API request
     * @returns a promise that resolves with the requested list of Trades
     * @throws {@link index.IMXError}
     */
    listTrades(request?: TradesApiListTradesRequest): Promise<ListTradesResponse>;
    /**
     * Get details of a Token
     * @param request - the request object containing the parameters to be provided in the API request
     * @returns a promise that resolves with the requested Token
     * @throws {@link index.IMXError}
     */
    getToken(request: TokensApiGetTokenRequest): Promise<TokenDetails>;
    /**
     * Get a list of Tokens
     * @param request - optional object containing the parameters to be provided in the API request
     * @returns a promise that resolves with the requested list of Tokens
     * @throws {@link index.IMXError}
     */
    listTokens(request?: TokensApiListTokensRequest): Promise<ListTokensResponse>;
    /**
     * Get details of a Transfer with the given ID
     * @param request - the request object containing the parameters to be provided in the API request
     * @returns a promise that resolves with the requested Transfer
     * @throws {@link index.IMXError}
     */
    getTransfer(request: TransfersApiGetTransferRequest): Promise<Transfer>;
    /**
     * Get a list of Transfers
     * @param request - optional object containing the parameters to be provided in the API request
     * @returns a promise that resolves with the requested list of Transfers
     * @throws {@link index.IMXError}
     */
    listTransfers(request?: TransfersApiListTransfersRequest): Promise<ListTransfersResponse>;
    /**
     * Create a new Exchange transaction
     * @param request - the request object to be provided in the API request
     * @returns a promise that resolves with the created Exchange Transaction
     * @throws {@link index.IMXError}
     */
    createExchange(request: ExchangesApiCreateExchangeRequest): Promise<ExchangeCreateExchangeAndURLResponse>;
    /**
     * Get an Exchange transaction
     * @param request - the request object to be provided in the API request
     * @returns a promise that resolves with the Exchange Transaction
     * @throws {@link index.IMXError}
     */
    getExchange(request: ExchangesApiGetExchangeRequest): Promise<Exchange>;
    /**
     * Get Exchange transactions
     * @param request - the request object to be provided in the API request
     * @returns a promise that resolves with Exchange Transactions
     * @throws {@link index.IMXError}
     */
    getExchanges(request: ExchangesApiGetExchangesRequest): Promise<GetTransactionsResponse>;
    /**
     * Create a new Transfer request
     * @param walletConnection - the pair of Eth/Stark signers
     * @param request - the request object to be provided in the API request
     * @returns a promise that resolves with the created Exchange Transfer
     * @throws {@link index.IMXError}
     */
    exchangeTransfer(walletConnection: WalletConnection, request: UnsignedExchangeTransferRequest): Promise<CreateTransferResponseV1>;
    /**
     * Create a new nft primary transaction
     * @param request - the request object to be provided in the API request
     * @returns a promise that resolves with the created nft primary Transaction
     * @throws {@link index.IMXError}
     */
    createNftPrimary(request: NftCheckoutPrimaryApiCreateNftPrimaryRequest): Promise<NftprimarytransactionCreateResponse>;
    /**
     * Get nft primary supported currencies and their limits
     * @param request - the request object to be provided in the API request
     * @returns a promise that resolves with nft primary Currencies
     * @throws {@link index.IMXError}
     */
    getCurrenciesNFTCheckoutPrimary(request: NftCheckoutPrimaryApiGetCurrenciesNFTCheckoutPrimaryRequest): Promise<CurrencyWithLimits>;
    /**
     * Get nft primary transaction by transaction id
     * @param request - the request object to be provided in the API request
     * @returns a promise that resolves with nft primary transaction
     * @throws {@link index.IMXError}
     */
    getNftPrimaryTransaction(request: NftCheckoutPrimaryApiGetNftPrimaryTransactionRequest): Promise<NftprimarytransactionGetResponse>;
    /**
     * Get list of nft primary transactions
     * @param request - the request object to be provided in the API request
     * @returns a promise that resolves with nft primary transaction
     * @throws {@link index.IMXError}
     */
    getNftPrimaryTransactions(request: NftCheckoutPrimaryApiGetNftPrimaryTransactionsRequest): Promise<NftprimarytransactionListTransactionsResponse>;
}

type UserProfile = {
    email?: string;
    nickname?: string;
    sub: string;
};
declare enum Networks {
    PRODUCTION = "mainnet",
    SANDBOX = "goerli"
}
interface OidcConfiguration {
    clientId: string;
    logoutRedirectUri: string;
    logoutMode?: 'redirect' | 'silent';
    redirectUri: string;
    scope?: string;
    audience?: string;
}
interface PassportOverrides {
    network: Networks;
    authenticationDomain: string;
    magicPublishableApiKey: string;
    magicProviderId: string;
    passportDomain: string;
    imxPublicApiDomain: string;
    immutableXClient: ImmutableXClient;
    zkEvmRpcUrl: string;
    relayerUrl: string;
    indexerMrBasePath: string;
    orderBookMrBasePath: string;
    passportMrBasePath: string;
}
interface PassportModuleConfiguration extends ModuleConfiguration<PassportOverrides>, OidcConfiguration {
    /**
     * This flag indicates that Passport is being used in a cross-sdk bridge scenario
     * and not directly on the web.
     */
    crossSdkBridgeEnabled?: boolean;
}
type DeviceConnectResponse = {
    code: string;
    deviceCode: string;
    url: string;
    interval: number;
};
type DeviceTokenResponse = {
    access_token: string;
    refresh_token?: string;
    id_token: string;
    token_type: string;
    expires_in: number;
};

/**
 * ProviderErrors should take priority over RpcErrorCodes
 * https://eips.ethereum.org/EIPS/eip-1193#provider-errors
 * https://eips.ethereum.org/EIPS/eip-1474#error-codes
 */
declare enum ProviderErrorCode {
    USER_REJECTED_REQUEST = 4001,
    UNAUTHORIZED = 4100,
    UNSUPPORTED_METHOD = 4200,
    DISCONNECTED = 4900
}
declare enum RpcErrorCode {
    RPC_SERVER_ERROR = -32000,
    INVALID_REQUEST = -32600,
    METHOD_NOT_FOUND = -32601,
    INVALID_PARAMS = -32602,
    INTERNAL_ERROR = -32603,
    PARSE_ERROR = -32700,
    TRANSACTION_REJECTED = -32003
}
declare class JsonRpcError extends Error {
    readonly message: string;
    readonly code: ProviderErrorCode | RpcErrorCode;
    constructor(code: ProviderErrorCode | RpcErrorCode, message: string);
}

interface RequestArguments {
    method: string;
    params?: Array<any>;
}
type JsonRpcRequestPayload = RequestArguments & {
    jsonrpc?: string;
    id?: string | number;
};
interface JsonRpcRequestCallback {
    (err: JsonRpcError | null, result?: JsonRpcResponsePayload | (JsonRpcResponsePayload | null)[] | null): void;
}
interface JsonRpcResponsePayload {
    result?: Array<any> | null;
    error?: JsonRpcError | null;
    jsonrpc?: string;
    id?: string | number;
}
type Provider = {
    request: (request: RequestArguments) => Promise<any>;
    sendAsync: (request: JsonRpcRequestPayload | JsonRpcRequestPayload[], callback: JsonRpcRequestCallback) => void;
    send: (request: string | JsonRpcRequestPayload | JsonRpcRequestPayload[], callbackOrParams?: JsonRpcRequestCallback | Array<any>, callback?: JsonRpcRequestCallback) => void;
    on: (event: string, listener: (...args: any[]) => void) => void;
    removeListener: (event: string, listener: (...args: any[]) => void) => void;
    isPassport: boolean;
};

declare class Passport {
    private readonly authManager;
    private readonly config;
    private readonly confirmationScreen;
    private readonly immutableXClient;
    private readonly magicAdapter;
    private readonly multiRollupApiClients;
    private readonly passportImxProviderFactory;
    private readonly passportEventEmitter;
    constructor(passportModuleConfiguration: PassportModuleConfiguration);
    connectImxSilent(): Promise<IMXProvider | null>;
    connectImx(): Promise<IMXProvider>;
    loginWithDeviceFlow(): Promise<DeviceConnectResponse>;
    connectImxDeviceFlow(deviceCode: string, interval: number, timeoutMs?: number): Promise<IMXProvider | null>;
    getPKCEAuthorizationUrl(): string;
    connectImxPKCEFlow(authorizationCode: string, state: string): Promise<IMXProvider | null>;
    /**
     * @returns {boolean} the stored device flow credentials if they exist
     */
    checkStoredDeviceFlowCredentials(): DeviceTokenResponse | null;
    connectImxWithCredentials(tokenResponse: DeviceTokenResponse): Promise<IMXProvider | null>;
    connectEvm(): Provider;
    loginCallback(): Promise<void>;
    logout(): Promise<void>;
    /**
     * This method should only be called from the logout redirect uri
     * when logout mode is 'silent'.
     */
    logoutSilentCallback(url: string): Promise<void>;
    logoutDeviceFlow(): Promise<void>;
    getUserInfo(): Promise<UserProfile | undefined>;
    getUserInfoDeviceFlow(): Promise<UserProfile | undefined>;
    getIdToken(): Promise<string | undefined>;
    getAccessToken(): Promise<string | undefined>;
    getLinkedAddresses(): Promise<string[]>;
}

/**
 * Enum representing different chain IDs.
 * @enum {number}
 * @property {number} IMTBL_ZKEVM_MAINNET - The chain ID for IMTBL ZKEVM Mainnet.
 * @property {number} IMTBL_ZKEVM_TESTNET - The chain ID for IMTBL ZKEVM Testnet.
 * @property {number} IMTBL_ZKEVM_DEVNET - The chain ID for IMTBL ZKEVM Devnet.
 * @property {number} ETHEREUM - The chain ID for Ethereum.
 * @property {number} SEPOLIA - The chain ID for Sepolia.
 */
declare enum ChainId {
    IMTBL_ZKEVM_MAINNET = 13371,
    IMTBL_ZKEVM_TESTNET = 13472,
    IMTBL_ZKEVM_DEVNET = 13433,
    ETHEREUM = 1,
    SEPOLIA = 11155111
}
/**
 * Enum representing different chain names.
 * @enum {number}
 * @property {number} IMTBL_ZKEVM_MAINNET - The chain name for IMTBL ZKEVM Mainnet.
 * @property {number} IMTBL_ZKEVM_TESTNET - The chain name for IMTBL ZKEVM Testnet.
 * @property {number} IMTBL_ZKEVM_DEVNET - The chain name for IMTBL ZKEVM Devnet.
 * @property {number} ETHEREUM - The chain name for Ethereum.
 * @property {number} SEPOLIA - The chain name for Sepolia.
 */
declare enum ChainName {
    ETHEREUM = "Ethereum",
    SEPOLIA = "Sepolia",
    IMTBL_ZKEVM_TESTNET = "Immutable zkEVM Test",
    IMTBL_ZKEVM_DEVNET = "Immutable zkEVM Dev",
    IMTBL_ZKEVM_MAINNET = "Immutable zkEVM"
}
/**
 * Represents information about a token.
 * @interface TokenInfo
 * @property {string} name - The name of the token.
 * @property {string} symbol - The symbol of the token.
 * @property {number} decimals - The number of decimal places the token supports.
 * @property {string | undefined} [address] - The address of the token.
 * @property {string | undefined} [icon] - The URL of the token's icon.
 */
interface TokenInfo {
    name: string;
    symbol: string;
    decimals: number;
    address?: string;
    icon?: string;
}
/**
 * Interface representing the parameters for {@link Checkout.getBalance}.
 * @property {Web3Provider} provider - The provider used to get the balance.
 * @property {string} walletAddress - The wallet address.
 * @property {string | undefined} contractAddress - The contract address of the token.
 */
interface GetBalanceParams {
    provider: Web3Provider;
    walletAddress: string;
    contractAddress?: string;
}
/**
 * Interface representing the result of {@link Checkout.getBalance}.
 * @property {BigNumber} balance - The balance of the wallet for the token.
 * @property {string} formattedBalance - The formatted balance of the wallet for the token.
 * @property {TokenInfo} token - The token information.
 */
interface GetBalanceResult {
    balance: BigNumber;
    formattedBalance: string;
    token: TokenInfo;
}
/**
 * Interface representing the parameters for {@link Checkout.getAllBalances}.
 * @property {Web3Provider} provider - The provider used to get the balances.
 * @property {string} walletAddress - The wallet address.
 * @property {ChainId} chainId - The ID of the network.
 */
interface GetAllBalancesParams {
    provider: Web3Provider;
    walletAddress: string;
    chainId: ChainId;
}
/**
 * Interface representing the result of {@link Checkout.getAllBalances}.
 * @property {GetBalanceResult[]} balances - The array of balances of the wallet for every token.
 */
interface GetAllBalancesResult {
    balances: GetBalanceResult[];
}
/**
 * Interface representing the parameters for {@link Checkout.smartCheckout}
 * @property {Web3Provider} provider - The provider to use for smart checkout.
 * @property {ItemRequirement[]} itemRequirements - The item requirements for the transaction.
 * @property {FulfillmentTransaction | GasAmount} transactionOrGasAmount - The transaction or gas amount.
 */
interface SmartCheckoutParams {
    provider: Web3Provider;
    itemRequirements: (NativeItemRequirement | ERC20ItemRequirement | ERC721ItemRequirement)[];
    transactionOrGasAmount: FulfillmentTransaction | GasAmount;
}
type NativeItemRequirement = {
    type: ItemType.NATIVE;
    amount: string;
};
type ERC20ItemRequirement = {
    type: ItemType.ERC20;
    contractAddress: string;
    amount: string;
    spenderAddress: string;
};
type ERC721ItemRequirement = {
    type: ItemType.ERC721;
    contractAddress: string;
    id: string;
    spenderAddress: string;
};
/**
 * Represents the item requirements for a transaction.
 * NativeItem, ERC20Item or ERC721Item {@link Checkout.smartCheckout}.
 */
type ItemRequirement = NativeItem | ERC20Item | ERC721Item;
/**
 * An enum representing the item types
 * @enum {string}
 * @property {string} NATIVE - If the item is a native token.
 * @property {string} ERC20 - If the item is an ERC20 token.
 * @property {string} ERC721 - If the item is an ERC721 token.
 */
declare enum ItemType {
    NATIVE = "NATIVE",
    ERC20 = "ERC20",
    ERC721 = "ERC721"
}
/**
 * Represents a native item.
 * @property {ItemType} type - The type indicate this is a native item.
 * @property {BigNumber} amount - The amount of the item.
 */
type NativeItem = {
    type: ItemType.NATIVE;
    amount: BigNumber;
};
/**
 * Represents an ERC20 item.
 * @property {ItemType} type - The type to indicate this is an ERC20 item.
 * @property {string} contractAddress - The contract address of the ERC20.
 * @property {BigNumber} amount - The amount of the item.
 * @property {string} spenderAddress - The contract address of the approver.
 */
type ERC20Item = {
    type: ItemType.ERC20;
    contractAddress: string;
    amount: BigNumber;
    spenderAddress: string;
};
/**
 * Represents an ERC721 item.
 * @property {ItemType} type - The type to indicate this is an ERC721 item.
 * @property {string} contractAddress - The contract address of the ERC721.
 * @property {string} id - The ID of this ERC721 in the collection.
 * @property {string} spenderAddress - The contract address of the approver.
 */
type ERC721Item = {
    type: ItemType.ERC721;
    contractAddress: string;
    id: string;
    spenderAddress: string;
};
/**
 * An enum representing transaction or gas types
 * @enum {string}
 * @property {string} TRANSACTION - If the type is a transaction
 * @property {string} GAS - If the type is the gas amount
 */
declare enum TransactionOrGasType {
    TRANSACTION = "TRANSACTION",
    GAS = "GAS"
}
/**
 * The fulfillment transaction which contains the transaction to send.
 * @property {TransactionOrGasType} type - The type to indicate this is a fulfillment transaction.
 * @property {TransactionRequest} transaction - The transaction to send.
 */
type FulfillmentTransaction = {
    type: TransactionOrGasType.TRANSACTION;
    transaction: TransactionRequest;
};
/**
 * The gas amount which contains the gas token and the gas limit.
 * @property {TransactionOrGasType} type - The type to indicate this is a gas amount.
 * @property {GasToken} gasToken - The gas token.
 */
type GasAmount = {
    type: TransactionOrGasType.GAS;
    gasToken: GasToken;
};
/**
 * Represents the gas token which is either a native token or an ERC20 token.
 */
type GasToken = NativeGas | ERC20Gas;
/**
 * An enum representing the gas token types
 * @enum {string}
 * @property {string} NATIVE - If the gas token is a native token.
 * @property {string} ERC20 - If the gas token is an ERC20 token.
 */
declare enum GasTokenType {
    NATIVE = "NATIVE",
    ERC20 = "ERC20"
}
/**
 * Represents a native gas token.
 * @property {GasTokenType} type - The type to indicate this is a native gas token.
 * @property {BigNumber} limit - The gas limit.
 */
type NativeGas = {
    type: GasTokenType.NATIVE;
    limit: BigNumber;
};
/**
 * Represents an ERC20 gas token.
 * @property {GasTokenType} type - The type to indicate this is an ERC20 gas token.
 * @property {string} contractAddress - The contract address of the ERC20.
 * @property {BigNumber} limit - The gas limit.
 */
type ERC20Gas = {
    type: GasTokenType.ERC20;
    contractAddress: string;
    limit: BigNumber;
};
/**
 * Represents the result of {@link Checkout.smartCheckout}.
 * @property {boolean} sufficient - If the user address has sufficient funds to cover the transaction.
 * @property {TransactionRequirement[]} transactionRequirements - The transaction requirements.
 */
interface SmartCheckoutResult {
    sufficient: boolean;
    transactionRequirements: TransactionRequirement[];
}
/**
 * Represents the transaction requirement for a transaction.
 * @property {ItemType} type - The type of the transaction requirement.
 * @property {boolean} sufficient - If the user address has sufficient funds to cover the transaction.
 * @property {TransactionRequirementItem} required - The required item balance.
 * @property {TransactionRequirementItem} current - The current item balance.
 * @property {TransactionRequirementDelta} delta - The delta between the required and current balances.
 */
type TransactionRequirement = {
    type: ItemType;
    sufficient: boolean;
    required: ItemBalance;
    current: ItemBalance;
    delta: BalanceDelta;
};
/**
 * Represents the balance for either a native or ERC20 token.
 * @property {BigNumber} balance - The balance of the item.
 * @property {string} formattedBalance - The formatted balance of the item.
 * @property {TokenInfo} token - The token info of the item.
 */
type TokenBalance = {
    type: ItemType.NATIVE | ItemType.ERC20;
    balance: BigNumber;
    formattedBalance: string;
    token: TokenInfo;
};
/**
 * Represents the balance for an ERC20.
 * @property {BigNumber} balance - The balance of the item.
 * @property {string} formattedBalance - The formatted balance of the item.
 * @property {TokenInfo} token - The token info of the item.
 */
interface ERC721Balance {
    type: ItemType.ERC721;
    balance: BigNumber;
    formattedBalance: string;
    contractAddress: string;
    id: string;
}
/**
 * Type representing the balance of an item.
 */
type ItemBalance = ERC721Balance | TokenBalance;
/**
 * Represents the delta between two balances.
 * @property {BigNumber} balance - The delta of the balance.
 * @property {string} formattedBalance - The formatted balance of the delta.
 */
type BalanceDelta = {
    balance: BigNumber;
    formattedBalance: string;
};
interface OrderFee {
    amount: FeeToken | FeePercentage;
    recipient: string;
}
interface FeeToken {
    token: string;
}
interface FeePercentage {
    percentageDecimal: number;
}
/**
 * Interface representing the parameters for {@link Checkout.buy}
 * @property {Web3Provider} provider - The provider to use for the buy.
 * @property {Array<BuyOrder>} orders - The orders to buy
 */
interface BuyParams {
    provider: Web3Provider;
    orders: Array<BuyOrder>;
}
/**
 * Interface representing the order to buy
 * @property {string} orderId - the id of the order to buy
 * @property {Array<OrderFee>} takerFees - array of order fees to apply to the order
 */
interface BuyOrder {
    id: string;
    takerFees?: Array<OrderFee>;
}
/**
 * Interface representing the result of the buy
 * @property {SmartCheckoutResult} smartCheckoutResult - The result of smart checkout.
 * @property {string} orderId - The order ID.
 * @property {BuyStatus} status - The status of the buy, present when smart checkout balances are sufficient
 * and the transactions were executed
 */
type BuyResult = {
    smartCheckoutResult: SmartCheckoutResult;
    orderId: string;
    status?: BuyStatus;
};
/**
 * Represents the status of the transaction for the Buy
 */
type BuyStatus = BuySuccessStatus | BuyFailedStatus;
/**
 * Represents the status of a successful Buy
 * @property {string} type - The success buy status type.
 */
interface BuySuccessStatus {
    type: BuyStatusType.SUCCESS;
}
/**
 * Represents the status of a failed Buy
 * @property {string} type - The failed buy status type.
 * @property {string} transactionHash - The transaction hash of the failed transaction.
 * @property {string} reason - The reason for the failed transaction.
 */
interface BuyFailedStatus {
    type: BuyStatusType.FAILED;
    transactionHash: string;
    reason: string;
}
/**
 * A type representing the status of the transaction for the Buy
 * @enum {string}
 * @property {string} SUCCESS - All the transactions were successful.
 * @property {string} FAILED - At least one of the transactions failed.
 */
declare enum BuyStatusType {
    SUCCESS = "SUCCESS",
    FAILED = "FAILED"
}
/**
 * Interface representing the parameters for {@link Checkout.cancel}
 * @property {Web3Provider} provider - The provider to use for the cancel.
 * @property {string[]} orderIds - The order IDs to cancel.
 */
interface CancelParams {
    provider: Web3Provider;
    orderIds: string[];
}
interface CheckoutOverrides {
}
interface CheckoutModuleConfiguration extends ModuleConfiguration<CheckoutOverrides> {
    isOnRampEnabled?: boolean;
    isSwapEnabled?: boolean;
    isBridgeEnabled?: boolean;
}
/**
 * A type representing various remotely defined configurations which are
 * accessible via the Checkout config and configured based on the Environment.
 * @property {DexConfig} dex - The config used for the DEX.
 * @property {OnRampConfig} onramp - The config used for the OnRamp
 * @property {AllowedNetworkConfig[]} allowedNetworks - An array representing the allowed networks.
 * @property {GasEstimateTokenConfig | undefined} gasEstimateTokens - The config for the tokens used to estimate gas.
 */
type RemoteConfiguration = {
    dex: DexConfig;
    onramp: OnRampConfig;
    bridge: BridgeConfig;
    allowedNetworks: AllowedNetworkConfig[];
    gasEstimateTokens?: GasEstimateTokenConfig;
    imxAddressMapping?: ImxAddressConfig;
};
/**
 * A type representing the fee structure for an OnRamp provider
 * @property {string | undefined} minPercentage - minimum percentage fee shown if a fee range is provided
 * @property {string | undefined} maxPercentage - maximum percentage fee shown if a fee range is provided
 * @property {string | undefined} feePercentage - specific fee percentage shown if there is no range provided
 */
type OnRampProviderFees = {
    minPercentage?: string;
    maxPercentage?: string;
    feePercentage?: string;
};
/**
 * A type representing the configuration for the OnRamp for a specific provider.
 * @property {string} publishableApiKey - on ramp provider publishable api-key
 * @property {TokenInfo[]} tokens - allowed tokens for the OnRamp provider
 * @property {OnRampProviderFees} fees - on ramp provider transaction fees
 */
type OnRampProviderConfig = {
    publishableApiKey: string;
    tokens: TokenInfo[];
    fees: OnRampProviderFees;
};
/**
 * A type representing the configuration for the OnRamp.
 * @property {OnRampProviderConfig} transak - OnRamp config for Transak provider
 */
type OnRampConfig = {
    [key: string]: OnRampProviderConfig;
};
/**
 * A type representing the configuration for the DEX.
 * @property {ExchangeOverrides | undefined} overrides - The DEX overrides.
 * @property {TokenInfo[] | undefined} tokens - An array of tokens compatible with the DEX.
 */
type DexConfig = {
    overrides?: ExchangeOverrides;
    tokens?: TokenInfo[];
};
/**
 * A type representing the configuration for the Bridge.
 * @property {TokenInfo[] | undefined} tokens - An array of tokens compatible with the Bridge.
 */
type BridgeConfig = {
    tokens?: TokenInfo[];
};
/**
 * A type representing an allowed network.
 * @property {number} chainId - The network chain id.
 */
type AllowedNetworkConfig = {
    chainId: number;
};
/**
 * A type representing the IMX address mappings across available networks.
 * @type {{ [chainId: string]: string }}
 */
type ImxAddressConfig = {
    [chainId: string]: string;
};
/**
 * A type representing the required information to estimate gas for a transaction.
 * @type {{ [key: string]: { bridgeToL2Addresses?: GasEstimateBridgeToL2TokenConfig, swapAddresses?: GasEstimateSwapTokenConfig } }}
 * - A map of addresses for estimating gas keyed by the network chain id.
 * @property {GasEstimateBridgeToL2TokenConfig | undefined} bridgeToL2Addresses
 * - The type representing the addresses for a bridge to layer 2 gas estimate.
 * @property {GasEstimateSwapTokenConfig | undefined} swapAddresses - The type representing the addresses for a swap gas estimate
 */
type GasEstimateTokenConfig = {
    [key: string]: {
        bridgeToL2Addresses?: GasEstimateBridgeToL2TokenConfig;
        swapAddresses?: GasEstimateSwapTokenConfig;
    };
};
/**
 * A type representing the config for a bridge to layer 2 gas estimate.
 * @property {string | 'NATIVE'} gasTokenAddress - The address of the gas token.
 * @property {string} fromAddress - The address of the token being bridged.
 */
type GasEstimateBridgeToL2TokenConfig = {
    gasTokenAddress: string | 'NATIVE';
    fromAddress: string;
};
/**
 * A type representing the config for a swap gas estimate.
 * @property {string} inAddress - The in token address.
 * @property {string} outAddress - The out token address.
 */
type GasEstimateSwapTokenConfig = {
    inAddress: string;
    outAddress: string;
};
/**
 * A type representing all the feature flags available.
 * @property {TokenInfo[] | undefined} allowed - List of allowed tokens for a given chain.
 * @property {boolean | undefined} blockscout - Feature flag to enable/disable blockscout integration.
 */
type ChainTokensConfig = {
    allowed?: TokenInfo[];
    blockscout?: boolean;
};
/**
 * Represents information about a network.
 * @interface NetworkInfo
 * @property {string} name - The name of the network.
 * @property {number} chainId - The chain ID of the network.
 * @property {TokenInfo} nativeCurrency - Information about the native currency of the network.
 * @property {boolean} isSupported - Indicates whether the network is supported.
 */
interface NetworkInfo {
    name: string;
    chainId: number;
    nativeCurrency: TokenInfo;
    isSupported: boolean;
}
/**
 * Interface representing the params of {@link Checkout.connect}.
 * @property {Web3Provider} provider - The provider used to connect to the network.
 */
interface ConnectParams {
    provider: Web3Provider;
}
/**
 * Interface representing the result of {@link Checkout.connect}.
 * @property {Web3Provider} provider - The provider used to connect to the network.
 * @property {NetworkInfo} network - Information about the connected network.
 */
interface ConnectResult {
    provider: Web3Provider;
    network: NetworkInfo;
}
/**
 * Interface representing the params of {@link Checkout.checkIsWalletConnected}.
 * @property {Web3Provider} provider - The provider used to connect to the network.
 */
interface CheckConnectionParams {
    provider: Web3Provider;
}
/**
 * Interface representing the result of {@link Checkout.checkIsWalletConnected}.
 * @property {boolean} isConnected - A boolean indicating the connection status of th Web3 provider.
 * @property {string} walletAddress - The wallet address used to check the connection.
 */
interface CheckConnectionResult {
    isConnected: boolean;
    walletAddress: string;
}
/**
 * An enum representing the type of gas estimate.
 * @enum {string}
 * @property {string} BRIDGE_TO_L2 - The gas estimate type for a bridge to L2 transaction.
 * @property {string} SWAP - The gas estimate type for a swap transaction.
 */
declare enum GasEstimateType {
    BRIDGE_TO_L2 = "BRIDGE_TO_L2",
    SWAP = "SWAP"
}
/**
 * Represents the parameters for estimating gas usage, which can be either
 * GasEstimateBridgeToL2Params or GasEstimateSwapParams {@link Checkout.gasEstimate}.
 * @typedef {GasEstimateBridgeToL2Params | GasEstimateSwapParams} GasEstimateParams
 */
type GasEstimateParams = GasEstimateBridgeToL2Params | GasEstimateSwapParams;
/**
 * An interface representing the parameters for estimating gas for a bridge to L2 transaction {@link Checkout.gasEstimate}.
 * @param {GasEstimateType.BRIDGE_TO_L2} gasEstimateType - The type of gas estimate.
 * @param {boolean} isSpendingCapApprovalRequired - Whether or not spending cap approval is required.
 * @param {FungibleToken | undefined} tokenAddress - The address of the fungible token to use in the transaction.
 */
interface GasEstimateBridgeToL2Params {
    gasEstimateType: GasEstimateType.BRIDGE_TO_L2;
    isSpendingCapApprovalRequired: boolean;
    tokenAddress?: FungibleToken;
}
/**
 * An interface representing the parameters for a gas estimate swap {@link Checkout.gasEstimate}.
 * @interface
 * @property {GasEstimateType.SWAP} gasEstimateType - The type of gas estimate, which is always "swap".
 */
interface GasEstimateSwapParams {
    gasEstimateType: GasEstimateType.SWAP;
}
/**
 * An interface representing the result of a gas estimate for a swap transaction {@link Checkout.gasEstimate}.
 * @interface GasEstimateSwapResult
 * @property {GasEstimateType.SWAP} gasEstimateType - The type of gas estimate, which is always "SWAP".
 * @property {TokenAmountEstimate} gasFee - The estimated gas fee for the swap transaction.
 */
interface GasEstimateSwapResult {
    gasEstimateType: GasEstimateType.SWAP;
    gasFee: TokenAmountEstimate;
}
/**
 * An interface representing the result of a gas estimate for a bridge to L2 transaction {@link Checkout.gasEstimate}.
 * @interface GasEstimateBridgeToL2Result
 * @property {GasEstimateType.BRIDGE_TO_L2} gasEstimateType - The type of gas estimate.
 * @property {TokenAmountEstimate} gasFee - The estimated gas fee for the transaction.
 * @property {TokenAmountEstimate} bridgeFee - The estimated bridge fee for the transaction.
 * @property {boolean} bridgeable - A boolean indicating whether the transaction is bridgeable.
 */
interface GasEstimateBridgeToL2Result {
    gasEstimateType: GasEstimateType.BRIDGE_TO_L2;
    gasFee: TokenAmountEstimate;
    bridgeFee: TokenAmountEstimate;
    bridgeable: boolean;
}
interface TokenAmountEstimate {
    estimatedAmount?: BigNumber;
    token?: TokenInfo;
}
/**
 * Interface representing the parameters for {@link Checkout.switchNetwork}.
 * @property {Web3Provider} provider - The provider to connect to the network.
 * @property {ChainId} chainId - The ID of the network to switch to.
 */
interface SwitchNetworkParams {
    provider: Web3Provider;
    chainId: ChainId;
}
/**
 * Represents the result of switching the network in a Web3 application {@link Checkout.switchNetwork}.
 * @interface SwitchNetworkResult
 * @property {NetworkInfo} network - The information about the switched network.
 * @property {Web3Provider} provider - The Web3 provider for the switched network.
 */
interface SwitchNetworkResult {
    network: NetworkInfo;
    provider: Web3Provider;
}
/**
 * * Interface representing the parameters for {@link Checkout.getNetworkInfo}.
 * @property {Web3Provider} provider - The provider to connect to the network.
 */
interface GetNetworkParams {
    provider: Web3Provider;
}
/**
 * * Interface representing the parameters for {@link Checkout.getNetworkAllowList}.
 * @property {NetworkFilterTypes} type - The type of allow list filter to apply.
 * @property {NetworkFilter[]} [exclude] - The list of networks to exclude from the allow list.
 */
interface GetNetworkAllowListParams {
    type: NetworkFilterTypes;
    exclude?: NetworkFilter[];
}
/**
 * Interface representing the result of {@link Checkout.getNetworkAllowList}.
 * @property {NetworkInfo[]} networks - The list of allowed networks.
 */
interface GetNetworkAllowListResult {
    networks: NetworkInfo[];
}
/**
 * Enum representing the types of filters that can be applied to get the allow list of networks.
 */
declare enum NetworkFilterTypes {
    ALL = "all"
}
/**
 * Interface representing a filter for filtering a specific network.
 * @property {ChainId} chainId - The ID of the network to allow or disallow.
 */
interface NetworkFilter {
    chainId: ChainId;
}
/**
 * Interface representing the parameters for {@link Checkout.sell}
 * @property {Web3Provider} provider - The provider to use for the sell.
 * @property {Array<SellOrder>} orders - An array of sell orders to execute.
 * Only currently actions the first order in the array until we support batch processing.
 */
interface SellParams {
    provider: Web3Provider;
    orders: Array<SellOrder>;
}
/**
 * Interface of the SellOrder to create a listing from, includes makerFees
 * @property {SellToken} sellToken - the token to be listed for sale
 * @property {BuyToken} buyToken - the token info of the price of the item
 * @property {OrderFee[]} makerFees - option array of makerFees to be applied to the listing
 */
interface SellOrder {
    sellToken: SellToken;
    buyToken: BuyToken;
    makerFees?: Array<OrderFee>;
}
/**
 * Interface of the SellToken
 * @property {string} id - The ERC721 token id
 * @property {string} collectionAddress - The ERC721 contract address
 */
interface SellToken {
    id: string;
    collectionAddress: string;
}
/**
 * Interface representing the result of the sell
 * @property {string} id - The ERC721 ID.
 * @property {string} collectionAddress - The contract address of the ERC721s collection.
 * @property {SmartCheckoutResult} smartCheckoutResult - The result of the smart checkout.
 * @property {SellStatus} status - The status of the sell, present when smart checkout balances are sufficient
 */
type SellResult = {
    id: string;
    collectionAddress: string;
    smartCheckoutResult: SmartCheckoutResult;
    status?: SellStatus;
};
/**
 * Represents the status of the transaction for the Sell
 */
type SellStatus = SellSuccessStatus | SellFailedStatus;
/**
 * Represents the status of a successful Sell
 * @property {string} type - The success sell status type.
 * @property {string} orderId - The order ID of the listing.
 */
interface SellSuccessStatus {
    type: SellStatusType.SUCCESS;
    orderId: string;
}
/**
 * Represents the status of a failed Sell
 * @property {string} type - The failed sell status type.
 * @property {string} transactionHash - The transaction hash of the failed transaction.
 * @property {string} reason - The reason for the failed transaction.
 */
interface SellFailedStatus {
    type: SellStatusType.FAILED;
    transactionHash: string;
    reason: string;
}
/**
 * A type representing the status of the transaction for the Sell
 * @enum {string}
 * @property {string} SUCCESS - All the transactions were successful.
 * @property {string} FAILED - At least one of the transactions failed.
 */
declare enum SellStatusType {
    SUCCESS = "SUCCESS",
    FAILED = "FAILED"
}
/**
 * Represents the token that the item can be bought with once listed for sale.
 * NativeBuyToken or ERC20BuyToken {@link Checkout.smartCheckout}.
 */
type BuyToken = NativeBuyToken | ERC20BuyToken;
/**
 * Represents a native buy token
 * @property {ItemType} type - The type indicate this is a native token.
 * @property {string} amount - The amount of native token.
 */
type NativeBuyToken = {
    type: ItemType.NATIVE;
    amount: string;
};
/**
 * Represents a ERC20 buy token
 * @property {ItemType} type - The type indicate this is a ERC20 token.
 * @property {string} amount - The amount of native token.
 * @property {string} contractAddress - The contract address of the ERC20.
 */
type ERC20BuyToken = {
    type: ItemType.ERC20;
    amount: string;
    contractAddress: string;
};
/**
 * Interface representing the parameters for {@link Checkout.getTokenAllowList}.
 * @property {TokenFilterTypes} type - The type of token to retrieve.
 * @property {ChainId}  chainId - The ID of the blockchain network.
 * @property {TokenFilter[]} [exclude] - The tokens to exclude from the list.
 */
interface GetTokenAllowListParams {
    type: TokenFilterTypes;
    chainId: ChainId;
    exclude?: TokenFilter[];
}
/**
 * Interface representing the result of {@link Checkout.getTokenAllowList}.
 * @property {TokenInfo[]} tokens - The list of tokens allowed for the specified params.
 */
interface GetTokenAllowListResult {
    tokens: TokenInfo[];
}
/**
 * Enum representing the types of token filters available.
 */
declare enum TokenFilterTypes {
    ALL = "all",
    SWAP = "swap",
    BRIDGE = "bridge",
    ONRAMP = "onramp"
}
/**
 * Interface representing a token filter that can be used to exclude certain tokens.
 * @property {string} address - The token contract address.
 */
interface TokenFilter {
    address: string;
}
/**
 * Interface representing the parameters for {@link Checkout.sendTransaction}.
 * @property {Web3Provider} provider - The provider to connect to the network.
 * @property {TransactionRequest} transaction - The transaction to send.
 */
interface SendTransactionParams {
    provider: Web3Provider;
    transaction: TransactionRequest;
}
/**
 * Interface representing the result of {@link Checkout.sendTransaction}.
 * @property {TransactionResponse} transactionResponse - The response of the transaction.
 */
interface SendTransactionResult {
    transactionResponse: TransactionResponse;
}
/**
 * Enum representing the names of different wallet providers.
 */
declare enum WalletProviderName {
    PASSPORT = "passport",
    METAMASK = "metamask"
}
/**
 * Interface for the parameters required to create a wallet provider {@link Checkout.createProvider}.
 * @interface CreateProviderParams
 * @property {WalletProviderName} walletProvider - The name of the wallet provider.
 * @property {Passport | undefined} passport - The Passport instance required to create a provider for passport users.
 * If walletProvider is 'passport', then the passport instance must be passed in.
 */
interface CreateProviderParams {
    walletProvider: WalletProviderName;
    passport?: Passport;
}
/**
 * Represents the result of creating a Web3 provider {@link Checkout.createProvider}.
 * @property {Web3Provider} provider - The created Web3 provider.
 * @property {WalletProviderName} providerName - The name of the wallet provider.
 */
type CreateProviderResult = {
    provider: Web3Provider;
    walletProviderName: WalletProviderName;
};
/**
 * Interface representing a wallet filter to be used in {@link GetWalletAllowListParams}.
 * @property {WalletProviderName} connectionProvider - The connection provider to filter wallets by.
 */
interface WalletFilter {
    walletProvider: WalletProviderName;
}
/**
 * Interface representing the parameters for {@link Checkout.getWalletAllowList}.
 * @property {WalletFilterTypes} type - The type of wallets to filter by.
 * @property {WalletFilter[]} [exclude] - An optional list of wallet filters to exclude from the allowed wallets list.
 */
interface GetWalletAllowListParams {
    type: WalletFilterTypes;
    exclude?: WalletFilter[];
}
/**
 * Interface representing information about a wallet used in {@link GetWalletAllowListResult}.
 * @property {WalletProviderName} walletProvider - The connection provider for the wallet.
 * @property {string} name - The name of the wallet.
 * @property {string | undefined} description - A description of the wallet.
 * @property {string | undefined} icon - The URL/data:image of an icon for the wallet.
 */
interface WalletInfo {
    walletProvider: WalletProviderName;
    name: string;
    description?: string;
    icon?: string;
}
/**
 * Interface representing the result of {@link Checkout.getWalletAllowList}.
 * @property {WalletInfo[]} wallets - A list of {@link WalletInfo} objects representing the allowed wallets.
 */
interface GetWalletAllowListResult {
    wallets: WalletInfo[];
}
/**
 * Enum representing the platform filters used in {@link GetWalletAllowListParams}.
 */
declare enum WalletFilterTypes {
    ALL = "all"
}
/**
 * Base URL for the checkout API based on the environment.
 * @property {string} DEVELOPMENT - The base URL for the development environment.
 * @property {string} SANDBOX - The base URL for the sandbox environment.
 * @property {string} PRODUCTION - The base URL for the production environment.
 */
declare const CHECKOUT_API_BASE_URL: {
    [x: string]: string;
    sandbox: string;
    production: string;
};
type NetworkDetails = {
    chainIdHex: string;
    chainName: string;
    rpcUrls: string[];
    nativeCurrency: TokenInfo;
    blockExplorerUrls?: string[];
};
type NetworkMap = Map<ChainId, NetworkDetails>;
/**
 * An enum representing the type of exchange.
 * @enum {string}
 * @property {string} ONRAMP - The exchange type for transacting.
 */
declare enum ExchangeType {
    ONRAMP = "onramp"
}
/**
 * Interface representing the result of {@link Checkout.createFiatRampUrl}.
 * @property {ExchangeType} exchangeType - The ExchangeType specified.
 * @property {Web3Provider} web3Provider - The Web3Provider used to exchange.
 * @property {string | undefined} tokenAmount - The token amount specified as input.
 * @property {string | undefined} tokenAddress - The token address specified as input.
 * @property {Passport | undefined} passport - The Passport instance specified as input.
 */
interface FiatRampParams {
    exchangeType: ExchangeType;
    web3Provider: Web3Provider;
    tokenAmount?: string;
    tokenAddress?: string;
    passport?: Passport;
}
/**
 * Enum representing different types of errors that can occur during the checkout process.
 */
declare enum CheckoutErrorType {
    WEB3_PROVIDER_ERROR = "WEB3_PROVIDER_ERROR",
    PROVIDER_ERROR = "PROVIDER_ERROR",
    DEFAULT_PROVIDER_ERROR = "DEFAULT_PROVIDER_ERROR",
    CONNECT_PROVIDER_ERROR = "CONNECT_PROVIDER_ERROR",
    GET_BALANCE_ERROR = "GET_BALANCE_ERROR",
    GET_INDEXER_BALANCE_ERROR = "GET_INDEXER_BALANCE_ERROR",
    GET_ERC20_BALANCE_ERROR = "GET_ERC20_BALANCE_ERROR",
    GET_ERC721_BALANCE_ERROR = "GET_ERC721_BALANCE_ERROR",
    GET_NETWORK_INFO_ERROR = "GET_NETWORK_INFO_ERROR",
    METAMASK_PROVIDER_ERROR = "METAMASK_PROVIDER_ERROR",
    CHAIN_NOT_SUPPORTED_ERROR = "CHAIN_NOT_SUPPORTED_ERROR",
    PROVIDER_REQUEST_MISSING_ERROR = "PROVIDER_REQUEST_MISSING_ERROR",
    PROVIDER_REQUEST_FAILED_ERROR = "PROVIDER_REQUEST_FAILED_ERROR",
    USER_REJECTED_REQUEST_ERROR = "USER_REJECTED_REQUEST_ERROR",
    TRANSACTION_FAILED = "TRANSACTION_FAILED",
    INSUFFICIENT_FUNDS = "INSUFFICIENT_FUNDS",
    UNPREDICTABLE_GAS_LIMIT = "UNPREDICTABLE_GAS_LIMIT",
    INVALID_GAS_ESTIMATE_TYPE = "INVALID_GAS_ESTIMATE_TYPE",
    UNSUPPORTED_TOKEN_TYPE_ERROR = "UNSUPPORTED_TOKEN_TYPE_ERROR",
    UNSUPPORTED_BALANCE_REQUIREMENT_ERROR = "UNSUPPORTED_BALANCE_REQUIREMENT_ERROR",
    GET_ORDER_LISTING_ERROR = "GET_ORDER_LISTING_ERROR",
    CANCEL_ORDER_LISTING_ERROR = "CANCEL_ORDER_LISTING_ERROR",
    PREPARE_ORDER_LISTING_ERROR = "PREPARE_ORDER_LISTING_ERROR",
    CREATE_ORDER_LISTING_ERROR = "CREATE_ORDER_LISTING_ERROR",
    FULFILL_ORDER_LISTING_ERROR = "FULFILL_ORDER_LISTING_ERROR",
    SWITCH_NETWORK_UNSUPPORTED = "SWITCH_NETWORK_UNSUPPORTED",
    GET_ERC20_ALLOWANCE_ERROR = "GET_ERC20_ALLOWANCE_ERROR",
    GET_ERC721_ALLOWANCE_ERROR = "GET_ERC721_ALLOWANCE_ERROR",
    EXECUTE_APPROVAL_TRANSACTION_ERROR = "EXECUTE_APPROVAL_TRANSACTION_ERROR",
    EXECUTE_FULFILLMENT_TRANSACTION_ERROR = "EXECUTE_FULFILLMENT_TRANSACTION_ERROR",
    SIGN_MESSAGE_ERROR = "SIGN_MESSAGE_ERROR",
    BRIDGE_GAS_ESTIMATE_ERROR = "BRIDGE_GAS_ESTIMATE_ERROR",
    ORDER_FEE_ERROR = "ORDER_FEE_ERROR",
    ITEM_REQUIREMENTS_ERROR = "ITEM_REQUIREMENTS_ERROR"
}
/**
 * Represents an error object with a specific type, optional message, and optional data.
 * @property {CheckoutErrorType} type - The type of the error.
 * @property {string | undefined} [message] - The error message.
 * @property {Object.<string, string> | undefined} [data] - Additional data associated with the error.
 */
type ErrorType = {
    type: CheckoutErrorType;
    message?: string;
    data?: {
        [key: string]: string;
    };
};
type RemoteConfigParams = {
    isDevelopment: boolean;
    isProduction: boolean;
};
declare class RemoteConfigFetcher {
    constructor(params: RemoteConfigParams);
    getConfig(key?: keyof RemoteConfiguration): Promise<RemoteConfiguration | RemoteConfiguration[keyof RemoteConfiguration] | undefined>;
    getTokensConfig(chainId: ChainId): Promise<ChainTokensConfig>;
}
declare class CheckoutConfiguration {
    readonly isDevelopment: boolean;
    readonly isProduction: boolean;
    readonly isOnRampEnabled: boolean;
    readonly isSwapEnabled: boolean;
    readonly isBridgeEnabled: boolean;
    readonly remote: RemoteConfigFetcher;
    readonly environment: Environment;
    readonly networkMap: NetworkMap;
    constructor(config: CheckoutModuleConfiguration);
}
interface FiatRampWidgetParams {
    exchangeType: ExchangeType;
    isPassport: boolean;
    walletAddress?: string;
    tokenAmount?: string;
    tokenSymbol?: string;
    email?: string;
}
declare class FiatRampService {
    readonly config: CheckoutConfiguration;
    /**
     * Constructs a new instance of the FiatRampService class.
     * @param {CheckoutConfiguration} config - The config required for the FiatRampService.
     */
    constructor(config: CheckoutConfiguration);
    feeEstimate(): Promise<OnRampProviderFees>;
    createWidgetUrl(params: FiatRampWidgetParams): Promise<string>;
}
declare class Checkout {
    readonly config: CheckoutConfiguration;
    readonly fiatRampService: FiatRampService;
    /**
     * Constructs a new instance of the CheckoutModule class.
     * @param {CheckoutModuleConfiguration} [config=SANDBOX_CONFIGURATION] - The configuration object for the CheckoutModule.
     */
    constructor(config?: CheckoutModuleConfiguration);
    /**
     * Creates a provider using the given parameters.
     * @param {CreateProviderParams} params - The parameters for creating the provider.
     * @returns {Promise<CreateProviderResult>} A promise that resolves to the created provider.
     */
    createProvider(params: CreateProviderParams): Promise<CreateProviderResult>;
    /**
     * Checks if a wallet is connected to the specified provider.
     * @param {CheckConnectionParams} params - The parameters for checking the wallet connection.
     * @returns {Promise<CheckConnectionResult>} - A promise that resolves to the result of the check.
     */
    checkIsWalletConnected(params: CheckConnectionParams): Promise<CheckConnectionResult>;
    /**
     * Connects to a blockchain network using the specified provider.
     * @param {ConnectParams} params - The parameters for connecting to the network.
     * @returns {Promise<ConnectResult>} A promise that resolves to an object containing the provider and network information.
     * @throws {Error} If the provider is not valid or if there is an error connecting to the network.
     */
    connect(params: ConnectParams): Promise<ConnectResult>;
    /**
     * Switches the network for the current wallet provider.
     * @param {SwitchNetworkParams} params - The parameters for switching the network.
     * @returns {Promise<SwitchNetworkResult>} - A promise that resolves to the result of switching the network.
     */
    switchNetwork(params: SwitchNetworkParams): Promise<SwitchNetworkResult>;
    /**
     * Retrieves the balance of a wallet address.
     * @param {GetBalanceParams} params - The parameters for retrieving the balance.
     * @returns {Promise<GetBalanceResult>} - A promise that resolves to the balance result.
     */
    getBalance(params: GetBalanceParams): Promise<GetBalanceResult>;
    /**
     * Retrieves the balances of all tokens for a given wallet address on a specific chain.
     * @param {GetAllBalancesParams} params - The parameters for retrieving the balances.
     * @returns {Promise<GetAllBalancesResult>} - A promise that resolves to the result of retrieving the balances.
     */
    getAllBalances(params: GetAllBalancesParams): Promise<GetAllBalancesResult>;
    /**
     * Retrieves the supported networks based on the provided parameters.
     * @param {GetNetworkAllowListParams} params - The parameters for retrieving the network allow list.
     * @returns {Promise<GetNetworkAllowListResult>} - A promise that resolves to the network allow list result.
     */
    getNetworkAllowList(params: GetNetworkAllowListParams): Promise<GetNetworkAllowListResult>;
    /**
     * Retrieves the supported tokens based on the provided parameters.
     * @param {GetTokenAllowListParams} params - The parameters for retrieving the token allow list.
     * @returns {Promise<GetTokenAllowListResult>} - A promise that resolves to the token allow list result.
     */
    getTokenAllowList(params: GetTokenAllowListParams): Promise<GetTokenAllowListResult>;
    /**
     * Retrieves the default supported wallets based on the provided parameters.
     * @param {GetWalletAllowListParams} params - The parameters for retrieving the wallet allow list.
     * @returns {Promise<GetWalletAllowListResult>} - A promise that resolves to the wallet allow list result.
     */
    getWalletAllowList(params: GetWalletAllowListParams): Promise<GetWalletAllowListResult>;
    /**
     * Sends a transaction using the specified provider and transaction parameters.
     * @param {SendTransactionParams} params - The parameters for sending the transaction.
     * @returns {Promise<SendTransactionResult>} A promise that resolves to the result of the transaction.
     */
    sendTransaction(params: SendTransactionParams): Promise<SendTransactionResult>;
    /**
     * Retrieves network information using the specified provider.
     * @param {GetNetworkParams} params - The parameters for retrieving network information.
     * @returns {Promise<NetworkInfo>} A promise that resolves to the network information.
     */
    getNetworkInfo(params: GetNetworkParams): Promise<NetworkInfo>;
    /**
     * Determines the requirements for performing a buy.
     * @param {BuyParams} params - The parameters for the buy.
    */
    buy(params: BuyParams): Promise<void>;
    /**
     * Determines the requirements for performing a sell.
     * @param {SellParams} params - The parameters for the sell.
     * Only currently actions the first order in the array until we support batch processing.
     * Only currently actions the first fee in the fees array of each order until we support multiple fees.
    */
    sell(params: SellParams): Promise<void>;
    /**
     * Cancels a sell.
     * @param {CancelParams} params - The parameters for the cancel.
     */
    cancel(params: CancelParams): Promise<void>;
    /**
     * Determines the transaction requirements to complete a purchase.
     * @params {SmartCheckoutParams} params - The parameters for smart checkout.
     */
    smartCheckout(params: SmartCheckoutParams): Promise<void>;
    /**
     * Checks if the given object is a Web3 provider.
     * @param {Web3Provider} web3Provider - The object to check.
     * @returns {boolean} - True if the object is a Web3 provider, false otherwise.
     */
    static isWeb3Provider(web3Provider: Web3Provider): boolean;
    /**
     * Estimates the gas required for a swap or bridge transaction.
     * @param {GasEstimateParams} params - The parameters for the gas estimation.
     * @returns {Promise<GasEstimateSwapResult | GasEstimateBridgeToL2Result>} - A promise that resolves to the gas estimation result.
     */
    gasEstimate(params: GasEstimateParams): Promise<GasEstimateSwapResult | GasEstimateBridgeToL2Result>;
    /**
     * Creates and returns a URL for the fiat ramp widget.
     * @param {FiatRampParams} params - The parameters for creating the url.
     * @returns {Promise<string>} - A promise that resolves to a string url.
     */
    createFiatRampUrl(params: FiatRampParams): Promise<string>;
    /**
     * Fetches fiat ramp fee estimations.
     * @returns {Promise<OnRampProviderFees>} - A promise that resolves to OnRampProviderFees.
     */
    getExchangeFeeEstimate(): Promise<OnRampProviderFees>;
}

export { AllowedNetworkConfig, BuyParams, BuyResult, CHECKOUT_API_BASE_URL, CancelParams, ChainId, ChainName, CheckConnectionParams, CheckConnectionResult, Checkout, CheckoutErrorType, CheckoutModuleConfiguration, ConnectParams, ConnectResult, DexConfig, ERC20ItemRequirement, ERC721ItemRequirement, ErrorType, ExchangeType, FeePercentage, FeeToken, FiatRampParams, GasEstimateBridgeToL2Result, GasEstimateParams, GasEstimateSwapResult, GasEstimateTokenConfig, GasEstimateType, GasTokenType, GetAllBalancesParams, GetAllBalancesResult, GetBalanceParams, GetBalanceResult, GetNetworkAllowListParams, GetNetworkAllowListResult, GetNetworkParams, GetTokenAllowListParams, GetTokenAllowListResult, GetWalletAllowListParams, GetWalletAllowListResult, ItemRequirement, ItemType, NativeItemRequirement, NetworkFilter, NetworkFilterTypes, NetworkInfo, OrderFee, RemoteConfiguration, SellOrder, SellParams, SellResult, SellToken, SendTransactionParams, SendTransactionResult, SmartCheckoutParams, SwitchNetworkParams, SwitchNetworkResult, TokenFilter, TokenFilterTypes, TokenInfo, TransactionOrGasType, WalletFilter, WalletFilterTypes, WalletInfo, WalletProviderName };
